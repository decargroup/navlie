Search.setIndex({"docnames": ["_autosummary/navlie.batch", "_autosummary/navlie.batch.estimator", "_autosummary/navlie.batch.estimator.BatchEstimator", "_autosummary/navlie.batch.gaussian_mixtures", "_autosummary/navlie.batch.gaussian_mixtures.GaussianMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.HessianSumMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.MaxMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.MaxSumMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.SumMixtureResidual", "_autosummary/navlie.batch.losses", "_autosummary/navlie.batch.losses.CauchyLoss", "_autosummary/navlie.batch.losses.L2Loss", "_autosummary/navlie.batch.losses.LossFunction", "_autosummary/navlie.batch.problem", "_autosummary/navlie.batch.problem.OptimizationSummary", "_autosummary/navlie.batch.problem.Problem", "_autosummary/navlie.batch.residuals", "_autosummary/navlie.batch.residuals.MeasurementResidual", "_autosummary/navlie.batch.residuals.PriorResidual", "_autosummary/navlie.batch.residuals.ProcessResidual", "_autosummary/navlie.batch.residuals.Residual", "_autosummary/navlie.bspline", "_autosummary/navlie.bspline.SE3Bspline", "_autosummary/navlie.composite", "_autosummary/navlie.composite.CompositeInput", "_autosummary/navlie.composite.CompositeMeasurement", "_autosummary/navlie.composite.CompositeMeasurementModel", "_autosummary/navlie.composite.CompositeProcessModel", "_autosummary/navlie.composite.CompositeState", "_autosummary/navlie.datagen", "_autosummary/navlie.datagen.DataGenerator", "_autosummary/navlie.datagen.generate_measurement", "_autosummary/navlie.filters", "_autosummary/navlie.filters.CubatureKalmanFilter", "_autosummary/navlie.filters.ExtendedKalmanFilter", "_autosummary/navlie.filters.GaussHermiteKalmanFilter", "_autosummary/navlie.filters.GaussianSumFilter", "_autosummary/navlie.filters.InteractingModelFilter", "_autosummary/navlie.filters.IteratedKalmanFilter", "_autosummary/navlie.filters.SigmaPointKalmanFilter", "_autosummary/navlie.filters.UnscentedKalmanFilter", "_autosummary/navlie.filters.check_outlier", "_autosummary/navlie.filters.generate_sigmapoints", "_autosummary/navlie.filters.mean_state", "_autosummary/navlie.filters.run_filter", "_autosummary/navlie.filters.run_gsf_filter", "_autosummary/navlie.filters.run_imm_filter", "_autosummary/navlie.lib", "_autosummary/navlie.lib.camera", "_autosummary/navlie.lib.camera.PinholeCamera", "_autosummary/navlie.lib.camera.PoseMatrix", "_autosummary/navlie.lib.datasets", "_autosummary/navlie.lib.datasets.SimulatedInertialGPSDataset", "_autosummary/navlie.lib.datasets.SimulatedInertialLandmarkDataset", "_autosummary/navlie.lib.datasets.SimulatedPoseRangingDataset", "_autosummary/navlie.lib.datasets.generate_landmark_positions", "_autosummary/navlie.lib.imu", "_autosummary/navlie.lib.imu.G_matrix", "_autosummary/navlie.lib.imu.G_matrix_inv", "_autosummary/navlie.lib.imu.IMU", "_autosummary/navlie.lib.imu.IMUKinematics", "_autosummary/navlie.lib.imu.IMUState", "_autosummary/navlie.lib.imu.L_matrix", "_autosummary/navlie.lib.imu.M_matrix", "_autosummary/navlie.lib.imu.N_matrix", "_autosummary/navlie.lib.imu.U_matrix", "_autosummary/navlie.lib.imu.U_matrix_inv", "_autosummary/navlie.lib.imu.U_tilde_matrix", "_autosummary/navlie.lib.imu.adjoint_IE3", "_autosummary/navlie.lib.imu.delta_matrix", "_autosummary/navlie.lib.imu.get_unbiased_imu", "_autosummary/navlie.lib.imu.inverse_IE3", "_autosummary/navlie.lib.models", "_autosummary/navlie.lib.models.AbsolutePosition", "_autosummary/navlie.lib.models.AbsoluteVelocity", "_autosummary/navlie.lib.models.Altitude", "_autosummary/navlie.lib.models.BodyFrameVelocity", "_autosummary/navlie.lib.models.CameraProjection", "_autosummary/navlie.lib.models.DoubleIntegrator", "_autosummary/navlie.lib.models.DoubleIntegratorWithBias", "_autosummary/navlie.lib.models.GlobalPosition", "_autosummary/navlie.lib.models.Gravitometer", "_autosummary/navlie.lib.models.InvariantMeasurement", "_autosummary/navlie.lib.models.InvariantPointRelativePosition", "_autosummary/navlie.lib.models.LinearMeasurement", "_autosummary/navlie.lib.models.Magnetometer", "_autosummary/navlie.lib.models.OneDimensionalPositionVelocityRange", "_autosummary/navlie.lib.models.PointRelativePosition", "_autosummary/navlie.lib.models.PointRelativePositionSLAM", "_autosummary/navlie.lib.models.RangePointToAnchor", "_autosummary/navlie.lib.models.RangePoseToAnchor", "_autosummary/navlie.lib.models.RangePoseToPose", "_autosummary/navlie.lib.models.RangeRelativePose", "_autosummary/navlie.lib.models.RelativeBodyFrameVelocity", "_autosummary/navlie.lib.models.SingleIntegrator", "_autosummary/navlie.lib.preintegration", "_autosummary/navlie.lib.preintegration.AngularVelocityIncrement", "_autosummary/navlie.lib.preintegration.BodyVelocityIncrement", "_autosummary/navlie.lib.preintegration.IMUIncrement", "_autosummary/navlie.lib.preintegration.LinearIncrement", "_autosummary/navlie.lib.preintegration.PreintegratedAngularVelocity", "_autosummary/navlie.lib.preintegration.PreintegratedBodyVelocity", "_autosummary/navlie.lib.preintegration.PreintegratedIMUKinematics", "_autosummary/navlie.lib.preintegration.PreintegratedLinearModel", "_autosummary/navlie.lib.preintegration.PreintegratedWheelOdometry", "_autosummary/navlie.lib.preintegration.RelativeMotionIncrement", "_autosummary/navlie.lib.preintegration.WheelOdometryIncrement", "_autosummary/navlie.lib.states", "_autosummary/navlie.lib.states.MatrixLieGroupState", "_autosummary/navlie.lib.states.MixtureState", "_autosummary/navlie.lib.states.SE23State", "_autosummary/navlie.lib.states.SE2State", "_autosummary/navlie.lib.states.SE3State", "_autosummary/navlie.lib.states.SL3State", "_autosummary/navlie.lib.states.SO2State", "_autosummary/navlie.lib.states.SO3State", "_autosummary/navlie.lib.states.StampedValue", "_autosummary/navlie.lib.states.VectorInput", "_autosummary/navlie.lib.states.VectorState", "_autosummary/navlie.types", "_autosummary/navlie.types.Dataset", "_autosummary/navlie.types.Input", "_autosummary/navlie.types.Measurement", "_autosummary/navlie.types.MeasurementModel", "_autosummary/navlie.types.ProcessModel", "_autosummary/navlie.types.State", "_autosummary/navlie.types.StateWithCovariance", "_autosummary/navlie.utils", "_autosummary/navlie.utils.alignment", "_autosummary/navlie.utils.alignment.associate_and_align_trajectories", "_autosummary/navlie.utils.alignment.evo_traj_to_state_list", "_autosummary/navlie.utils.alignment.state_list_to_evo_traj", "_autosummary/navlie.utils.common", "_autosummary/navlie.utils.common.GaussianResult", "_autosummary/navlie.utils.common.GaussianResultList", "_autosummary/navlie.utils.common.MixtureResult", "_autosummary/navlie.utils.common.MixtureResultList", "_autosummary/navlie.utils.common.MonteCarloResult", "_autosummary/navlie.utils.common.associate_stamps", "_autosummary/navlie.utils.common.find_nearest_stamp_idx", "_autosummary/navlie.utils.common.jacobian", "_autosummary/navlie.utils.common.load_tum_trajectory", "_autosummary/navlie.utils.common.monte_carlo", "_autosummary/navlie.utils.common.randvec", "_autosummary/navlie.utils.common.schedule_sequential_measurements", "_autosummary/navlie.utils.common.state_interp", "_autosummary/navlie.utils.common.van_loans", "_autosummary/navlie.utils.mixture", "_autosummary/navlie.utils.mixture.gaussian_mixing", "_autosummary/navlie.utils.mixture.gaussian_mixing_vectorspace", "_autosummary/navlie.utils.mixture.reparametrize_gaussians_about_X_par", "_autosummary/navlie.utils.mixture.update_X", "_autosummary/navlie.utils.plot", "_autosummary/navlie.utils.plot.CameraPoseVisualizer", "_autosummary/navlie.utils.plot.plot_camera_poses", "_autosummary/navlie.utils.plot.plot_error", "_autosummary/navlie.utils.plot.plot_meas", "_autosummary/navlie.utils.plot.plot_meas_by_model", "_autosummary/navlie.utils.plot.plot_nees", "_autosummary/navlie.utils.plot.plot_poses", "_autosummary/navlie.utils.plot.set_axes_equal", "api", "index", "tutorial", "tutorial/batch", "tutorial/composite", "tutorial/jacobians", "tutorial/lie_groups", "tutorial/traditional"], "filenames": ["_autosummary/navlie.batch.rst", "_autosummary/navlie.batch.estimator.rst", "_autosummary/navlie.batch.estimator.BatchEstimator.rst", "_autosummary/navlie.batch.gaussian_mixtures.rst", "_autosummary/navlie.batch.gaussian_mixtures.GaussianMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.MaxMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.SumMixtureResidual.rst", "_autosummary/navlie.batch.losses.rst", "_autosummary/navlie.batch.losses.CauchyLoss.rst", "_autosummary/navlie.batch.losses.L2Loss.rst", "_autosummary/navlie.batch.losses.LossFunction.rst", "_autosummary/navlie.batch.problem.rst", "_autosummary/navlie.batch.problem.OptimizationSummary.rst", "_autosummary/navlie.batch.problem.Problem.rst", "_autosummary/navlie.batch.residuals.rst", "_autosummary/navlie.batch.residuals.MeasurementResidual.rst", "_autosummary/navlie.batch.residuals.PriorResidual.rst", "_autosummary/navlie.batch.residuals.ProcessResidual.rst", "_autosummary/navlie.batch.residuals.Residual.rst", "_autosummary/navlie.bspline.rst", "_autosummary/navlie.bspline.SE3Bspline.rst", "_autosummary/navlie.composite.rst", "_autosummary/navlie.composite.CompositeInput.rst", "_autosummary/navlie.composite.CompositeMeasurement.rst", "_autosummary/navlie.composite.CompositeMeasurementModel.rst", "_autosummary/navlie.composite.CompositeProcessModel.rst", "_autosummary/navlie.composite.CompositeState.rst", "_autosummary/navlie.datagen.rst", "_autosummary/navlie.datagen.DataGenerator.rst", "_autosummary/navlie.datagen.generate_measurement.rst", "_autosummary/navlie.filters.rst", "_autosummary/navlie.filters.CubatureKalmanFilter.rst", "_autosummary/navlie.filters.ExtendedKalmanFilter.rst", "_autosummary/navlie.filters.GaussHermiteKalmanFilter.rst", "_autosummary/navlie.filters.GaussianSumFilter.rst", "_autosummary/navlie.filters.InteractingModelFilter.rst", "_autosummary/navlie.filters.IteratedKalmanFilter.rst", "_autosummary/navlie.filters.SigmaPointKalmanFilter.rst", "_autosummary/navlie.filters.UnscentedKalmanFilter.rst", "_autosummary/navlie.filters.check_outlier.rst", "_autosummary/navlie.filters.generate_sigmapoints.rst", "_autosummary/navlie.filters.mean_state.rst", "_autosummary/navlie.filters.run_filter.rst", "_autosummary/navlie.filters.run_gsf_filter.rst", "_autosummary/navlie.filters.run_imm_filter.rst", "_autosummary/navlie.lib.rst", "_autosummary/navlie.lib.camera.rst", "_autosummary/navlie.lib.camera.PinholeCamera.rst", "_autosummary/navlie.lib.camera.PoseMatrix.rst", "_autosummary/navlie.lib.datasets.rst", "_autosummary/navlie.lib.datasets.SimulatedInertialGPSDataset.rst", "_autosummary/navlie.lib.datasets.SimulatedInertialLandmarkDataset.rst", "_autosummary/navlie.lib.datasets.SimulatedPoseRangingDataset.rst", "_autosummary/navlie.lib.datasets.generate_landmark_positions.rst", "_autosummary/navlie.lib.imu.rst", "_autosummary/navlie.lib.imu.G_matrix.rst", "_autosummary/navlie.lib.imu.G_matrix_inv.rst", "_autosummary/navlie.lib.imu.IMU.rst", "_autosummary/navlie.lib.imu.IMUKinematics.rst", "_autosummary/navlie.lib.imu.IMUState.rst", "_autosummary/navlie.lib.imu.L_matrix.rst", "_autosummary/navlie.lib.imu.M_matrix.rst", "_autosummary/navlie.lib.imu.N_matrix.rst", "_autosummary/navlie.lib.imu.U_matrix.rst", "_autosummary/navlie.lib.imu.U_matrix_inv.rst", "_autosummary/navlie.lib.imu.U_tilde_matrix.rst", "_autosummary/navlie.lib.imu.adjoint_IE3.rst", "_autosummary/navlie.lib.imu.delta_matrix.rst", "_autosummary/navlie.lib.imu.get_unbiased_imu.rst", "_autosummary/navlie.lib.imu.inverse_IE3.rst", "_autosummary/navlie.lib.models.rst", "_autosummary/navlie.lib.models.AbsolutePosition.rst", "_autosummary/navlie.lib.models.AbsoluteVelocity.rst", "_autosummary/navlie.lib.models.Altitude.rst", "_autosummary/navlie.lib.models.BodyFrameVelocity.rst", "_autosummary/navlie.lib.models.CameraProjection.rst", "_autosummary/navlie.lib.models.DoubleIntegrator.rst", "_autosummary/navlie.lib.models.DoubleIntegratorWithBias.rst", "_autosummary/navlie.lib.models.GlobalPosition.rst", "_autosummary/navlie.lib.models.Gravitometer.rst", "_autosummary/navlie.lib.models.InvariantMeasurement.rst", "_autosummary/navlie.lib.models.InvariantPointRelativePosition.rst", "_autosummary/navlie.lib.models.LinearMeasurement.rst", "_autosummary/navlie.lib.models.Magnetometer.rst", "_autosummary/navlie.lib.models.OneDimensionalPositionVelocityRange.rst", "_autosummary/navlie.lib.models.PointRelativePosition.rst", "_autosummary/navlie.lib.models.PointRelativePositionSLAM.rst", "_autosummary/navlie.lib.models.RangePointToAnchor.rst", "_autosummary/navlie.lib.models.RangePoseToAnchor.rst", "_autosummary/navlie.lib.models.RangePoseToPose.rst", "_autosummary/navlie.lib.models.RangeRelativePose.rst", "_autosummary/navlie.lib.models.RelativeBodyFrameVelocity.rst", "_autosummary/navlie.lib.models.SingleIntegrator.rst", "_autosummary/navlie.lib.preintegration.rst", "_autosummary/navlie.lib.preintegration.AngularVelocityIncrement.rst", "_autosummary/navlie.lib.preintegration.BodyVelocityIncrement.rst", "_autosummary/navlie.lib.preintegration.IMUIncrement.rst", "_autosummary/navlie.lib.preintegration.LinearIncrement.rst", "_autosummary/navlie.lib.preintegration.PreintegratedAngularVelocity.rst", "_autosummary/navlie.lib.preintegration.PreintegratedBodyVelocity.rst", "_autosummary/navlie.lib.preintegration.PreintegratedIMUKinematics.rst", "_autosummary/navlie.lib.preintegration.PreintegratedLinearModel.rst", "_autosummary/navlie.lib.preintegration.PreintegratedWheelOdometry.rst", "_autosummary/navlie.lib.preintegration.RelativeMotionIncrement.rst", "_autosummary/navlie.lib.preintegration.WheelOdometryIncrement.rst", "_autosummary/navlie.lib.states.rst", "_autosummary/navlie.lib.states.MatrixLieGroupState.rst", "_autosummary/navlie.lib.states.MixtureState.rst", "_autosummary/navlie.lib.states.SE23State.rst", "_autosummary/navlie.lib.states.SE2State.rst", "_autosummary/navlie.lib.states.SE3State.rst", "_autosummary/navlie.lib.states.SL3State.rst", "_autosummary/navlie.lib.states.SO2State.rst", "_autosummary/navlie.lib.states.SO3State.rst", "_autosummary/navlie.lib.states.StampedValue.rst", "_autosummary/navlie.lib.states.VectorInput.rst", "_autosummary/navlie.lib.states.VectorState.rst", "_autosummary/navlie.types.rst", "_autosummary/navlie.types.Dataset.rst", "_autosummary/navlie.types.Input.rst", "_autosummary/navlie.types.Measurement.rst", "_autosummary/navlie.types.MeasurementModel.rst", "_autosummary/navlie.types.ProcessModel.rst", "_autosummary/navlie.types.State.rst", "_autosummary/navlie.types.StateWithCovariance.rst", "_autosummary/navlie.utils.rst", "_autosummary/navlie.utils.alignment.rst", "_autosummary/navlie.utils.alignment.associate_and_align_trajectories.rst", "_autosummary/navlie.utils.alignment.evo_traj_to_state_list.rst", "_autosummary/navlie.utils.alignment.state_list_to_evo_traj.rst", "_autosummary/navlie.utils.common.rst", "_autosummary/navlie.utils.common.GaussianResult.rst", "_autosummary/navlie.utils.common.GaussianResultList.rst", "_autosummary/navlie.utils.common.MixtureResult.rst", "_autosummary/navlie.utils.common.MixtureResultList.rst", "_autosummary/navlie.utils.common.MonteCarloResult.rst", "_autosummary/navlie.utils.common.associate_stamps.rst", "_autosummary/navlie.utils.common.find_nearest_stamp_idx.rst", "_autosummary/navlie.utils.common.jacobian.rst", "_autosummary/navlie.utils.common.load_tum_trajectory.rst", "_autosummary/navlie.utils.common.monte_carlo.rst", "_autosummary/navlie.utils.common.randvec.rst", "_autosummary/navlie.utils.common.schedule_sequential_measurements.rst", "_autosummary/navlie.utils.common.state_interp.rst", "_autosummary/navlie.utils.common.van_loans.rst", "_autosummary/navlie.utils.mixture.rst", "_autosummary/navlie.utils.mixture.gaussian_mixing.rst", "_autosummary/navlie.utils.mixture.gaussian_mixing_vectorspace.rst", "_autosummary/navlie.utils.mixture.reparametrize_gaussians_about_X_par.rst", "_autosummary/navlie.utils.mixture.update_X.rst", "_autosummary/navlie.utils.plot.rst", "_autosummary/navlie.utils.plot.CameraPoseVisualizer.rst", "_autosummary/navlie.utils.plot.plot_camera_poses.rst", "_autosummary/navlie.utils.plot.plot_error.rst", "_autosummary/navlie.utils.plot.plot_meas.rst", "_autosummary/navlie.utils.plot.plot_meas_by_model.rst", "_autosummary/navlie.utils.plot.plot_nees.rst", "_autosummary/navlie.utils.plot.plot_poses.rst", "_autosummary/navlie.utils.plot.set_axes_equal.rst", "api.rst", "index.rst", "tutorial.rst", "tutorial/batch.ipynb", "tutorial/composite.ipynb", "tutorial/jacobians.ipynb", "tutorial/lie_groups.ipynb", "tutorial/traditional.ipynb"], "titles": ["navlie.batch", "navlie.batch.estimator", "navlie.batch.estimator.BatchEstimator", "navlie.batch.gaussian_mixtures", "navlie.batch.gaussian_mixtures.GaussianMixtureResidual", "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual", "navlie.batch.gaussian_mixtures.MaxMixtureResidual", "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual", "navlie.batch.gaussian_mixtures.SumMixtureResidual", "navlie.batch.losses", "navlie.batch.losses.CauchyLoss", "navlie.batch.losses.L2Loss", "navlie.batch.losses.LossFunction", "navlie.batch.problem", "navlie.batch.problem.OptimizationSummary", "navlie.batch.problem.Problem", "navlie.batch.residuals", "navlie.batch.residuals.MeasurementResidual", "navlie.batch.residuals.PriorResidual", "navlie.batch.residuals.ProcessResidual", "navlie.batch.residuals.Residual", "navlie.bspline", "navlie.bspline.SE3Bspline", "navlie.composite", "navlie.composite.CompositeInput", "navlie.composite.CompositeMeasurement", "navlie.composite.CompositeMeasurementModel", "navlie.composite.CompositeProcessModel", "navlie.composite.CompositeState", "navlie.datagen", "navlie.datagen.DataGenerator", "navlie.datagen.generate_measurement", "navlie.filters", "navlie.filters.CubatureKalmanFilter", "navlie.filters.ExtendedKalmanFilter", "navlie.filters.GaussHermiteKalmanFilter", "navlie.filters.GaussianSumFilter", "navlie.filters.InteractingModelFilter", "navlie.filters.IteratedKalmanFilter", "navlie.filters.SigmaPointKalmanFilter", "navlie.filters.UnscentedKalmanFilter", "navlie.filters.check_outlier", "navlie.filters.generate_sigmapoints", "navlie.filters.mean_state", "navlie.filters.run_filter", "navlie.filters.run_gsf_filter", "navlie.filters.run_imm_filter", "navlie.lib", "navlie.lib.camera", "navlie.lib.camera.PinholeCamera", "navlie.lib.camera.PoseMatrix", "navlie.lib.datasets", "navlie.lib.datasets.SimulatedInertialGPSDataset", "navlie.lib.datasets.SimulatedInertialLandmarkDataset", "navlie.lib.datasets.SimulatedPoseRangingDataset", "navlie.lib.datasets.generate_landmark_positions", "navlie.lib.imu", "navlie.lib.imu.G_matrix", "navlie.lib.imu.G_matrix_inv", "navlie.lib.imu.IMU", "navlie.lib.imu.IMUKinematics", "navlie.lib.imu.IMUState", "navlie.lib.imu.L_matrix", "navlie.lib.imu.M_matrix", "navlie.lib.imu.N_matrix", "navlie.lib.imu.U_matrix", "navlie.lib.imu.U_matrix_inv", "navlie.lib.imu.U_tilde_matrix", "navlie.lib.imu.adjoint_IE3", "navlie.lib.imu.delta_matrix", "navlie.lib.imu.get_unbiased_imu", "navlie.lib.imu.inverse_IE3", "navlie.lib.models", "navlie.lib.models.AbsolutePosition", "navlie.lib.models.AbsoluteVelocity", "navlie.lib.models.Altitude", "navlie.lib.models.BodyFrameVelocity", "navlie.lib.models.CameraProjection", "navlie.lib.models.DoubleIntegrator", "navlie.lib.models.DoubleIntegratorWithBias", "navlie.lib.models.GlobalPosition", "navlie.lib.models.Gravitometer", "navlie.lib.models.InvariantMeasurement", "navlie.lib.models.InvariantPointRelativePosition", "navlie.lib.models.LinearMeasurement", "navlie.lib.models.Magnetometer", "navlie.lib.models.OneDimensionalPositionVelocityRange", "navlie.lib.models.PointRelativePosition", "navlie.lib.models.PointRelativePositionSLAM", "navlie.lib.models.RangePointToAnchor", "navlie.lib.models.RangePoseToAnchor", "navlie.lib.models.RangePoseToPose", "navlie.lib.models.RangeRelativePose", "navlie.lib.models.RelativeBodyFrameVelocity", "navlie.lib.models.SingleIntegrator", "navlie.lib.preintegration", "navlie.lib.preintegration.AngularVelocityIncrement", "navlie.lib.preintegration.BodyVelocityIncrement", "navlie.lib.preintegration.IMUIncrement", "navlie.lib.preintegration.LinearIncrement", "navlie.lib.preintegration.PreintegratedAngularVelocity", "navlie.lib.preintegration.PreintegratedBodyVelocity", "navlie.lib.preintegration.PreintegratedIMUKinematics", "navlie.lib.preintegration.PreintegratedLinearModel", "navlie.lib.preintegration.PreintegratedWheelOdometry", "navlie.lib.preintegration.RelativeMotionIncrement", "navlie.lib.preintegration.WheelOdometryIncrement", "navlie.lib.states", "navlie.lib.states.MatrixLieGroupState", "navlie.lib.states.MixtureState", "navlie.lib.states.SE23State", "navlie.lib.states.SE2State", "navlie.lib.states.SE3State", "navlie.lib.states.SL3State", "navlie.lib.states.SO2State", "navlie.lib.states.SO3State", "navlie.lib.states.StampedValue", "navlie.lib.states.VectorInput", "navlie.lib.states.VectorState", "navlie.types", "navlie.types.Dataset", "navlie.types.Input", "navlie.types.Measurement", "navlie.types.MeasurementModel", "navlie.types.ProcessModel", "navlie.types.State", "navlie.types.StateWithCovariance", "navlie.utils", "navlie.utils.alignment", "navlie.utils.alignment.associate_and_align_trajectories", "navlie.utils.alignment.evo_traj_to_state_list", "navlie.utils.alignment.state_list_to_evo_traj", "navlie.utils.common", "navlie.utils.common.GaussianResult", "navlie.utils.common.GaussianResultList", "navlie.utils.common.MixtureResult", "navlie.utils.common.MixtureResultList", "navlie.utils.common.MonteCarloResult", "navlie.utils.common.associate_stamps", "navlie.utils.common.find_nearest_stamp_idx", "navlie.utils.common.jacobian", "navlie.utils.common.load_tum_trajectory", "navlie.utils.common.monte_carlo", "navlie.utils.common.randvec", "navlie.utils.common.schedule_sequential_measurements", "navlie.utils.common.state_interp", "navlie.utils.common.van_loans", "navlie.utils.mixture", "navlie.utils.mixture.gaussian_mixing", "navlie.utils.mixture.gaussian_mixing_vectorspace", "navlie.utils.mixture.reparametrize_gaussians_about_X_par", "navlie.utils.mixture.update_X", "navlie.utils.plot", "navlie.utils.plot.CameraPoseVisualizer", "navlie.utils.plot.plot_camera_poses", "navlie.utils.plot.plot_error", "navlie.utils.plot.plot_meas", "navlie.utils.plot.plot_meas_by_model", "navlie.utils.plot.plot_nees", "navlie.utils.plot.plot_poses", "navlie.utils.plot.set_axes_equal", "API Documentation", "Welcome to navlie!", "Getting Started", "Toy Batch SLAM Example", "Composite States", "Jacobians in navlie", "Toy Problem - Lie group approach", "Toy Problem - Traditional Approach"], "terms": {"A": [0, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 28, 30, 37, 49, 50, 51, 56, 61, 75, 84, 87, 96, 97, 98, 99, 103, 106, 108, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 125, 126, 129, 133, 134, 136, 137, 140, 146, 148, 150, 151, 153, 154, 155, 156, 157, 159, 162, 164, 165, 167], "subpackag": 0, "least": [0, 5, 7, 8, 9, 11, 12, 13, 15], "squar": [0, 4, 5, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 41, 46, 94, 126, 133, 135, 137, 143, 167, 168], "estim": [0, 16, 20, 33, 34, 35, 36, 37, 38, 39, 40, 82, 129, 133, 134, 135, 137, 162, 163, 165, 166, 167, 168], "modul": [0, 1, 32, 47, 48, 56, 119, 127, 161, 162], "construct": [1, 4, 13, 82], "problem": [1, 2, 4, 9, 11, 12, 162, 163, 165], "compos": 1, "prior": [1, 16, 18, 164], "residu": [1, 4, 5, 6, 7, 8, 10, 13, 15, 83, 164], "process": [1, 2, 19, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 60, 76, 78, 79, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 116, 117, 124, 162, 164, 165, 166], "measur": [1, 2, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 52, 53, 54, 59, 60, 70, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 105, 106, 120, 123, 144, 156, 157, 162, 165, 166], "The": [1, 2, 4, 5, 6, 10, 11, 12, 17, 21, 22, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 47, 54, 60, 61, 63, 64, 76, 77, 78, 79, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 124, 125, 129, 130, 131, 133, 134, 135, 136, 142, 144, 145, 148, 154, 159, 162, 163, 165, 166, 167, 168], "batchestim": 1, "solv": [1, 2, 13, 15, 164], "method": [1, 4, 5, 6, 7, 8, 20, 27, 28, 33, 34, 35, 39, 40, 42, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 120, 123, 124, 125, 134, 136, 140, 145, 146, 148, 164, 165, 166, 167, 168], "over": [1, 96, 97, 98, 99, 105, 106, 167, 168], "sequenc": 1, "input": [1, 2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 52, 53, 54, 59, 60, 62, 76, 78, 79, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 117, 120, 124, 140, 164, 165, 166, 167, 168], "data": [1, 2, 4, 29, 30, 44, 45, 56, 59, 70, 116, 117, 120, 122, 126, 133, 134, 137, 142, 155, 156, 157, 165, 167], "ar": [1, 4, 5, 6, 7, 8, 16, 21, 28, 33, 35, 39, 40, 55, 60, 61, 62, 77, 93, 129, 134, 137, 141, 142, 144, 145, 146, 154, 159, 162, 164, 165, 166, 167, 168], "automat": [1, 36, 37, 162, 165, 166], "creat": [1, 2, 19, 22, 24, 59, 75, 105, 115, 121, 134, 136, 154, 155, 156, 157, 158, 159, 167], "ad": [1, 13, 15, 75, 116, 117, 164, 165, 166, 167], "us": [1, 2, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 59, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 129, 133, 134, 135, 136, 140, 142, 146, 153, 161, 162, 163, 164, 165, 166, 167, 168], "gener": [1, 2, 17, 18, 19, 21, 22, 24, 28, 29, 30, 31, 33, 35, 39, 40, 42, 49, 54, 55, 61, 84, 97, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 143, 144, 155, 165, 166, 167], "definit": [1, 162, 165, 166, 167], "defin": [1, 4, 9, 11, 12, 28, 108, 110, 111, 112, 113, 114, 115, 124, 134, 136, 137, 162, 165, 166], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 137, 152, 153, 161, 162, 164, 165, 166, 167, 168], "solver_typ": 2, "str": [2, 15, 33, 35, 39, 40, 42, 61, 108, 110, 111, 112, 113, 114, 115, 129, 140, 141, 153, 154, 155, 158, 159, 164], "gn": [2, 15], "max_it": [2, 15, 38], "int": [2, 14, 15, 24, 28, 42, 49, 52, 53, 54, 55, 59, 61, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 129, 137, 138, 139, 142, 143, 154, 159, 164], "100": [2, 15, 54, 164], "step_tol": [2, 15, 38], "float": [2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 22, 24, 25, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 53, 54, 55, 59, 60, 61, 62, 65, 66, 67, 69, 75, 76, 78, 79, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 129, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 148, 149, 153, 154, 158, 159, 165, 166, 167, 168], "1e": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 140, 164], "07": [2, 15, 164], "ftol": [2, 15], "none": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 49, 52, 53, 54, 59, 60, 61, 75, 81, 82, 85, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 140, 153, 154, 155, 156, 157, 158, 159, 164, 165, 167, 168], "gradient_tol": [2, 15], "tau": [2, 15], "11": [2, 15, 36, 37, 164, 166], "verbos": [2, 15, 22, 129, 142], "bool": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 27, 30, 31, 33, 34, 35, 36, 38, 39, 40, 44, 45, 49, 52, 53, 54, 129, 134, 136, 137, 155, 156, 157, 158, 159, 164], "true": [2, 4, 5, 15, 16, 31, 33, 35, 38, 39, 40, 52, 53, 54, 129, 133, 134, 135, 136, 137, 155, 156, 157, 164, 165, 166, 167, 168], "base": [2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 52, 53, 54, 59, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 133, 134, 135, 136, 137, 153, 156, 157, 162, 164, 165], "object": [2, 14, 15, 22, 24, 27, 28, 30, 31, 34, 36, 37, 39, 49, 50, 59, 60, 61, 76, 78, 79, 82, 93, 94, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 133, 134, 136, 137, 140, 141, 142, 145, 153, 154, 156, 157, 159, 167, 168], "main": [2, 13, 15, 167], "instanti": [2, 49, 166, 168], "batchestiamtor": 2, "paramet": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 54, 55, 59, 60, 61, 70, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164], "solver": [2, 5, 15, 164], "option": [2, 4, 5, 6, 7, 8, 15, 20, 22, 24, 25, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 49, 54, 59, 61, 75, 81, 82, 85, 87, 99, 108, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 125, 129, 134, 136, 137, 138, 140, 142, 143, 154, 155, 156, 157, 158, 159, 168], "type": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 22, 24, 25, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 49, 55, 59, 60, 61, 70, 76, 78, 79, 82, 83, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 151, 164, 165, 168], "either": [2, 13, 15, 30, 108, 110, 111, 112, 113, 114, 115, 124, 134, 145, 159, 165, 168], "lm": [2, 165], "default": [2, 4, 5, 6, 7, 8, 15, 20, 22, 25, 30, 31, 33, 34, 35, 36, 38, 39, 40, 49, 54, 59, 60, 61, 75, 81, 82, 85, 99, 108, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 129, 134, 136, 137, 138, 140, 142, 143, 154, 155, 156, 157, 158, 159, 164, 166], "maximum": [2, 22, 129, 138, 142, 166, 167], "number": [2, 6, 7, 8, 43, 55, 125, 129, 137, 142, 154, 164], "optim": [2, 4, 5, 6, 7, 8, 14, 15, 20, 164], "iter": [2, 38, 43, 142, 162, 164], "converg": [2, 15], "step": [2, 33, 34, 35, 36, 37, 38, 39, 40, 93, 134, 137, 140, 154, 159, 163, 164, 168], "toler": 2, "7": [2, 6, 140, 164, 165], "exit": 2, "when": [2, 26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 123, 124, 125, 134, 136, 165, 166, 168], "delta": [2, 19, 27, 28, 60, 61, 76, 78, 79, 82, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 118, 124, 125, 146, 164, 165, 166, 167, 168], "x": [2, 4, 11, 17, 18, 19, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 49, 60, 61, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 140, 146, 150, 151, 164, 165, 166, 167, 168], "_2": [2, 93, 164, 167], "text": [2, 155, 164], "where": [2, 4, 11, 12, 18, 19, 20, 21, 28, 49, 60, 61, 73, 74, 75, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 106, 123, 124, 134, 140, 141, 146, 163, 164, 165, 166, 167, 168], "i": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 56, 59, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 126, 129, 134, 136, 137, 139, 140, 142, 145, 146, 150, 151, 161, 162, 163, 164, 165, 166, 167, 168], "chang": [2, 162, 164, 165, 167], "state": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 52, 53, 54, 59, 60, 61, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 120, 121, 122, 123, 124, 126, 133, 134, 135, 136, 137, 140, 145, 150, 151, 156, 157, 162, 163, 164, 166], "success": 2, "rel": [2, 49, 76, 87, 88, 92, 93, 164], "cost": [2, 10, 11, 12, 14, 15, 164], "decreas": 2, "c": [2, 5, 10, 21, 60, 77, 81, 84, 85, 87, 88, 96, 110, 111, 112, 113, 114, 115, 140, 153, 154, 159, 164, 165, 166, 167], "function": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 51, 56, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 116, 117, 123, 124, 128, 132, 134, 136, 138, 140, 142, 147, 152, 158, 161, 164, 167, 168], "accept": [2, 30, 134, 142, 168], "gradient": [2, 164], "infin": 2, "norm": [2, 140, 164, 165, 166, 167, 168], "max_i": 2, "nabla": 2, "j": [2, 4, 28, 36, 37, 61, 96, 97, 98, 99, 101, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164], "_i": [2, 99, 103, 164], "mathbf": [2, 4, 17, 18, 19, 21, 22, 26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 146, 153, 154, 159, 164, 165, 166, 167, 168], "e": [2, 4, 10, 11, 12, 17, 18, 19, 21, 89, 90, 110, 111, 112, 113, 114, 115, 162, 163, 164, 167, 168], "t": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 21, 27, 50, 60, 76, 77, 78, 79, 81, 83, 85, 87, 88, 93, 94, 96, 97, 100, 101, 102, 103, 104, 106, 110, 111, 112, 114, 115, 124, 140, 146, 164, 165, 166, 167, 168], "h": [2, 21, 36, 37], "print": [2, 22, 142, 164, 165, 166, 167, 168], "dure": [2, 15], "runtim": 2, "x0": [2, 18, 30, 44, 45, 46, 52, 53, 54, 164], "p0": [2, 44, 46, 165, 167, 168], "ndarrai": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 33, 35, 37, 39, 40, 41, 42, 43, 44, 46, 49, 50, 52, 53, 54, 55, 59, 60, 61, 62, 64, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 129, 133, 134, 135, 136, 137, 139, 140, 143, 146, 149, 150, 151, 153, 164, 165, 166, 167, 168], "input_data": [2, 44, 45, 46, 165, 167, 168], "list": [2, 4, 5, 6, 7, 8, 14, 15, 17, 18, 19, 20, 22, 24, 27, 28, 30, 31, 36, 37, 43, 44, 45, 46, 52, 53, 54, 55, 61, 81, 85, 89, 90, 96, 97, 98, 99, 105, 106, 109, 120, 129, 130, 131, 134, 136, 137, 138, 139, 141, 144, 145, 148, 149, 150, 154, 155, 156, 157, 159, 161, 164, 165, 167, 168], "meas_data": [2, 44, 45, 46, 165, 167, 168], "process_model": [2, 19, 30, 33, 34, 35, 36, 38, 39, 40, 164, 165, 166, 167, 168], "processmodel": [2, 16, 19, 27, 30, 33, 34, 35, 36, 38, 39, 40, 46, 60, 76, 78, 93, 94, 101, 102, 103, 164, 165, 166, 167, 168], "return_opt_result": 2, "fals": [2, 4, 22, 27, 30, 33, 34, 35, 36, 38, 39, 40, 44, 45, 129, 134, 136, 155, 156, 157, 158, 159, 164], "statewithcovari": [2, 33, 34, 35, 38, 39, 40, 44, 45, 46, 109, 133, 134, 135, 148, 150, 151, 164, 165, 167, 168], "propag": [2, 19, 33, 34, 35, 36, 38, 39, 40, 60, 101, 140], "initi": [2, 30, 37, 54, 98, 144, 165, 167, 168], "forward": [2, 33, 34, 35, 36, 37, 38, 39, 40, 49, 60, 103, 140, 154, 164, 165, 168], "time": [2, 14, 19, 21, 22, 27, 28, 30, 33, 34, 35, 36, 38, 39, 40, 54, 60, 76, 78, 79, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 124, 129, 134, 136, 137, 142, 143, 144, 146, 156, 157, 164, 165, 167, 168], "model": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 60, 96, 97, 99, 100, 101, 102, 103, 104, 106, 116, 117, 122, 123, 124, 144, 156, 157, 162, 165, 166], "an": [2, 11, 12, 16, 19, 20, 21, 24, 28, 33, 34, 35, 38, 39, 40, 41, 43, 46, 48, 59, 60, 61, 79, 88, 89, 90, 96, 97, 98, 99, 101, 105, 106, 116, 117, 125, 129, 130, 131, 134, 136, 145, 154, 159, 164, 165, 166, 167, 168], "timestep": [2, 37, 60, 146], "involv": [2, 36, 37, 42, 164, 165], "priorresidu": [2, 16, 164], "processresidu": [2, 16, 164], "each": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 28, 30, 31, 37, 42, 43, 61, 91, 93, 125, 133, 134, 135, 136, 137, 141, 144, 149, 150, 164, 165, 167, 168], "connect": [2, 153, 164], "subsequ": 2, "through": [2, 19, 134, 140, 144, 154, 163, 164, 168], "measurementresidu": [2, 16], "np": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 24, 27, 28, 30, 33, 35, 37, 39, 40, 42, 43, 44, 46, 49, 54, 55, 59, 60, 61, 70, 75, 76, 78, 79, 81, 83, 84, 85, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 124, 125, 126, 129, 140, 143, 146, 149, 150, 151, 153, 164, 165, 166, 167, 168], "covari": [2, 4, 5, 6, 7, 8, 15, 24, 26, 27, 28, 30, 33, 34, 35, 39, 40, 41, 54, 59, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 117, 121, 123, 124, 126, 133, 134, 135, 136, 143, 149, 150, 151, 165, 166, 167, 168], "form": [2, 4, 10, 18, 28, 73, 74, 75, 77, 81, 82, 84, 85, 89, 90, 93, 94, 96, 97, 99, 106, 108, 110, 111, 112, 113, 114, 115, 123, 124, 138, 146, 164, 165, 167, 168], "flag": [2, 4, 5, 6, 7, 8, 20, 31, 129, 159, 168], "return": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 22, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 49, 52, 53, 54, 55, 59, 60, 61, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 129, 130, 131, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 164, 165, 166, 167, 168], "result": [2, 34, 134, 136, 137, 142, 155, 158, 162, 164, 165, 166, 167, 168], "dictionari": [2, 28, 129, 164], "from": [2, 4, 5, 6, 7, 8, 9, 10, 22, 26, 27, 28, 30, 33, 34, 35, 37, 39, 40, 42, 49, 56, 60, 63, 64, 70, 76, 77, 78, 79, 89, 90, 93, 94, 99, 100, 101, 102, 103, 104, 115, 123, 124, 125, 134, 136, 138, 142, 144, 166, 167, 168], "error": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 27, 41, 60, 76, 78, 79, 91, 93, 94, 100, 101, 102, 103, 104, 124, 133, 134, 135, 136, 137, 155, 162, 164, 165, 166, 167, 168], "weight": [4, 5, 6, 7, 8, 9, 10, 11, 12, 36, 42, 43, 148, 149], "abc": [4, 12, 20, 120, 121, 123, 124, 125], "gaussian": [4, 5, 6, 7, 8, 26, 27, 36, 37, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 133, 147, 148, 149, 150, 151], "mixtur": [4, 5, 6, 7, 8, 36, 37], "can": [4, 17, 19, 28, 30, 48, 56, 60, 99, 108, 116, 117, 122, 124, 125, 126, 134, 137, 140, 143, 145, 146, 159, 161, 162, 164, 165, 166, 167, 168], "instanc": [4, 37, 43, 46, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125], "non": [4, 142], "nois": [4, 26, 27, 30, 31, 49, 59, 60, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 116, 117, 123, 124, 146, 164, 165, 166, 167, 168], "ha": [4, 24, 28, 54, 59, 108, 110, 111, 112, 113, 114, 115, 116, 117, 121, 151, 164, 165, 166, 167, 168], "been": [4, 28, 61, 164, 165, 167, 168], "fit": 4, "unknown": [4, 88, 164], "associ": [4, 25, 26, 28, 30, 33, 35, 36, 39, 40, 43, 54, 59, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 105, 106, 116, 117, 122, 123, 126, 129, 133, 135, 137, 138, 144, 164, 165, 167], "loop": [4, 144, 168], "closur": 4, "one": [4, 60, 108, 124, 142, 144, 164, 165, 167, 168], "compon": [4, 5, 6, 7, 8, 75, 129, 133, 135, 137, 140, 141, 165], "correspond": [4, 5, 6, 7, 8, 15, 20, 28, 31, 37, 61, 122, 125, 126, 133, 134, 135, 136, 137, 141, 149, 164, 165, 166, 167, 168], "small": [4, 43, 164], "anoth": [4, 28, 61, 89, 92, 108, 110, 111, 112, 113, 114, 115, 118, 125, 167], "larg": [4, 162, 165, 167], "implement": [4, 5, 6, 7, 8, 20, 21, 27, 47, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 123, 124, 125, 134, 136, 162, 164, 165, 166, 167, 168], "term": [4, 11, 12, 13, 15, 164, 167], "log": [4, 21, 167], "sum_": [4, 99, 164], "k": [4, 19, 27, 33, 35, 39, 40, 49, 60, 76, 78, 79, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 124, 146, 164, 165, 166, 167, 168], "1": [4, 5, 6, 7, 8, 10, 17, 18, 19, 20, 21, 22, 27, 28, 33, 35, 39, 40, 60, 61, 75, 76, 78, 79, 82, 85, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 114, 115, 124, 129, 134, 136, 137, 140, 142, 143, 146, 153, 154, 158, 159, 164, 165, 166, 167, 168], "w_k": 4, "det": [4, 113, 114, 115], "left": [4, 21, 49, 82, 99, 108, 110, 111, 112, 113, 114, 115, 163, 164, 166], "sqrt": [4, 140], "r": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 123, 124, 153, 158, 164, 165, 166, 167, 168], "_k": [4, 19, 27, 60, 76, 78, 79, 93, 94, 99, 100, 101, 102, 103, 104, 106, 124, 146, 164, 165, 166, 167], "right": [4, 21, 49, 61, 82, 83, 99, 108, 110, 111, 112, 113, 114, 115, 140, 164, 165, 166], "exp": [4, 21, 76, 93, 96, 97, 106, 108, 110, 111, 112, 113, 114, 115, 164, 166, 167], "boldsymbol": [4, 164, 166, 167], "eta": 4, "normal": [4, 5, 6, 7, 8, 41, 49, 133, 135, 137, 140, 158, 168], "yield": 4, "argument": [4, 26, 27, 33, 34, 35, 36, 38, 39, 40, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 123, 124, 168], "constructor": 4, "must": [4, 5, 6, 7, 8, 9, 20, 30, 33, 34, 35, 36, 38, 39, 40, 46, 87, 108, 110, 111, 112, 113, 114, 115, 123, 124, 125, 134, 136, 137, 140, 142, 150, 158, 164, 165, 166, 167, 168], "sqrt_info_matrix": [4, 5, 6, 7, 8, 17, 18, 19, 20], "root": [4, 17, 18, 19, 133, 135, 137, 164], "inform": [4, 5, 6, 7, 8, 17, 18, 19, 20, 22, 77, 99, 116, 117, 124, 129, 164, 167], "matrix": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 24, 27, 28, 36, 37, 49, 59, 60, 61, 63, 64, 68, 71, 76, 78, 79, 83, 84, 90, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 121, 123, 124, 126, 146, 153, 154, 159, 164, 165, 166, 167], "differ": [4, 5, 6, 7, 8, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 38, 39, 40, 56, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 129, 134, 136, 137, 138, 140, 164, 165, 166, 167, 168], "how": [4, 48, 134, 136, 163, 164, 165, 166], "overal": [4, 144], "jacobian": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 26, 27, 28, 34, 38, 60, 61, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 162, 164, 165], "therefor": 4, "subclass": [4, 108, 165, 167, 168], "overwrit": [4, 98], "mix_error": [4, 5, 6, 7, 8], "mix_jacobian": [4, 5, 6, 7, 8], "which": [4, 5, 6, 7, 8, 9, 16, 20, 25, 26, 28, 31, 33, 34, 35, 37, 38, 39, 40, 82, 89, 96, 97, 98, 99, 105, 106, 123, 124, 133, 134, 135, 137, 142, 144, 154, 158, 162, 164, 165, 166, 167, 168], "abstract": [4, 12, 20, 105, 120, 121, 123, 124, 125, 162, 166, 167, 168], "error_value_list": [4, 5, 6, 7, 8], "sqrt_info_matrix_list": [4, 5, 6, 7, 8], "tupl": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 26, 42, 70, 73, 74, 75, 77, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 123, 129, 138, 146, 155, 156, 157, 158, 164], "thi": [4, 5, 6, 7, 8, 11, 12, 13, 15, 19, 21, 25, 26, 27, 28, 33, 34, 35, 38, 39, 40, 48, 49, 56, 59, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 134, 137, 140, 142, 143, 144, 150, 162, 163, 164, 165, 166, 167, 168], "comput": [4, 5, 6, 7, 8, 15, 16, 17, 20, 22, 30, 33, 34, 35, 39, 40, 43, 49, 62, 82, 83, 99, 133, 135, 137, 140, 142, 146, 151, 164, 166], "factor": [4, 5, 6, 7, 8, 164], "all": [4, 5, 6, 7, 8, 10, 24, 28, 30, 61, 129, 134, 142, 144, 154, 161, 162, 163, 164, 165, 166, 167, 168], "assum": [4, 5, 6, 7, 8, 25, 30, 76, 77, 79, 82, 92, 108, 110, 111, 112, 113, 114, 115, 122, 137, 164, 168], "have": [4, 5, 6, 7, 8, 26, 27, 28, 60, 61, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 134, 141, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168], "ident": [4, 5, 6, 7, 8, 49, 54, 98, 137, 164, 166], "jacobian_list_of_list": [4, 5, 6, 7, 8], "reused_valu": [4, 5, 6, 7, 8], "dict": [4, 5, 6, 7, 8, 15, 28, 34, 129], "For": [4, 5, 6, 7, 8, 17, 18, 19, 20, 21, 28, 42, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 134, 142, 165, 166, 167, 168], "everi": [4, 5, 6, 7, 8, 143], "w": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 27, 59, 60, 76, 78, 79, 83, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 117, 121, 124, 146, 164, 165], "jacobian_list": [4, 5, 6, 7, 8], "outer": [4, 5, 6, 7, 8], "inner": [4, 5, 6, 7, 8], "contain": [4, 5, 6, 7, 8, 20, 25, 32, 48, 49, 59, 61, 70, 76, 77, 82, 83, 91, 99, 116, 117, 119, 120, 122, 125, 126, 129, 133, 134, 137, 142, 145, 149, 154, 155, 159, 162, 164, 165, 167, 168], "evaluate_component_residu": [4, 5, 6, 7, 8], "compute_jacobian": [4, 5, 6, 7, 8, 17, 18, 19, 20, 164], "evalu": [4, 5, 6, 7, 8, 10, 17, 18, 19, 20, 25, 26, 27, 28, 31, 34, 38, 49, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 128, 162, 165, 166, 167, 168], "jacobian_fd": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 166], "step_siz": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 140], "06": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 164], "calcul": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 28, 33, 34, 35, 36, 38, 39, 40, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 134, 136, 137, 140, 149, 168], "finit": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 140, 162, 166], "point": [4, 5, 6, 7, 8, 17, 18, 19, 20, 21, 22, 33, 34, 35, 38, 39, 40, 42, 49, 78, 83, 89, 124, 134, 136, 145, 154, 168], "respect": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 27, 28, 42, 60, 61, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 164, 166], "exampl": [4, 5, 6, 7, 8, 17, 18, 19, 20, 28, 48, 51, 61, 134, 136, 140, 165, 166, 168], "first": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 89, 93, 124, 134, 138, 163, 164, 165, 167, 168], "element": [4, 5, 6, 7, 8, 17, 18, 19, 20, 60, 61, 89, 108, 110, 111, 112, 113, 114, 115, 118, 125, 129, 134, 136, 150, 151, 154, 159, 164, 165, 167], "0": [4, 5, 6, 7, 8, 10, 11, 17, 18, 19, 20, 21, 22, 27, 30, 38, 52, 53, 54, 59, 60, 75, 76, 78, 79, 81, 85, 93, 94, 99, 100, 101, 102, 103, 104, 110, 111, 112, 123, 124, 129, 134, 136, 137, 138, 140, 145, 146, 153, 154, 158, 164, 165, 166, 167, 168], "second": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 129, 138, 164], "etc": [4, 5, 6, 7, 8, 17, 18, 19, 20, 164], "no_use_complex_numb": 5, "gaussianmixtureresidu": [5, 6, 7, 8], "hessian": 5, "sum": [5, 36, 133, 135], "patch": 5, "compat": [5, 46, 73, 74, 75, 81, 85, 91, 140, 168], "nonlinear": [5, 9, 11, 12, 13, 15, 34, 36, 39], "follow": [5, 6, 7, 56, 60, 82, 125, 141, 162, 163, 164, 165, 166, 167, 168], "refer": [5, 6, 7, 8, 36, 37, 60, 76, 129, 165, 166, 167], "misc": 5, "korotkine2024hessian": 5, "titl": [5, 6, 7, 8, 168], "likelihood": 5, "author": [5, 6, 7, 8], "vassili": 5, "korotkin": 5, "mitchel": 5, "cohen": 5, "jame": 5, "richard": 5, "forb": 5, "year": [5, 6, 7, 8], "2024": 5, "eprint": 5, "2404": 5, "05452": 5, "archiveprefix": 5, "arxiv": 5, "primaryclass": 5, "ro": [5, 112, 115], "static": [5, 30, 49, 59, 110, 111, 112, 114, 115, 134, 136], "get_normalization_const": 5, "alpha": [5, 7, 22], "articl": [6, 7, 8], "olson2013infer": 6, "infer": 6, "network": 6, "robust": [6, 9, 10, 11, 15], "robot": [6, 7, 8, 21, 54, 73, 74, 75, 76, 77, 87, 88, 90, 91, 92, 93, 106, 141, 164, 165, 166, 167, 168], "map": [6, 162, 167], "olson": 6, "edwin": 6, "agarw": 6, "pratik": 6, "journal": [6, 7, 8], "intern": [6, 24, 96, 97, 105, 106, 116, 117, 121], "research": 6, "volum": [6, 7, 8], "32": [6, 167], "page": [6, 7, 8, 21, 161, 163], "826": 6, "840": 6, "2013": 6, "publish": 6, "sage": 6, "public": 6, "uk": 6, "london": 6, "england": 6, "damping_const": 7, "10": [7, 8, 36, 37, 53, 54, 134, 142, 145, 164, 165, 167, 168], "9381625": [7, 8], "pfeifer": [7, 8], "tim": [7, 8, 166], "lang": [7, 8], "sven": [7, 8], "protzel": [7, 8], "peter": [7, 8], "ieee": [7, 8, 21, 36, 37], "autom": [7, 8], "letter": [7, 8, 36, 37], "advanc": [7, 8], "2021": [7, 8], "6": [7, 8, 54, 59, 98, 140, 164, 165, 166], "2": [7, 8, 28, 61, 91, 92, 93, 111, 114, 124, 140, 142, 145, 159, 164, 165, 166, 167, 168], "3941": [7, 8], "3948": [7, 8], "doi": [7, 8, 36, 37], "1109": [7, 8, 36, 37], "lra": [7, 8], "3067307": [7, 8], "compute_nonlinear_part": 7, "scalar_errors_differ": 7, "detail": [8, 21, 56, 166], "see": [8, 21, 48, 161, 164, 166, 168], "here": [9, 10, 21, 60, 77, 164, 165, 166, 167, 168], "inherit": [9, 122, 123, 124, 125, 126, 164, 166, 168], "lossfunct": [9, 10, 11, 15], "interfac": [9, 13, 128, 162], "cauchi": 10, "taken": [10, 33, 34, 35, 36, 38, 39, 40, 138, 164], "mactavish": 10, "barfoot": [10, 64, 166, 167], "At": 10, "given": [10, 15, 22, 24, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 44, 45, 49, 60, 61, 77, 78, 82, 91, 92, 93, 96, 97, 98, 99, 101, 105, 106, 108, 110, 111, 112, 113, 114, 115, 118, 125, 133, 142, 143, 146, 151, 156, 157, 164, 166, 168], "standard": [11, 15, 25, 26, 77, 117, 118, 166, 168], "l2": [11, 164], "simpli": [11, 25, 82, 94, 122, 162, 164, 167, 168], "5": [11, 52, 53, 61, 140, 145, 159, 164, 165, 167, 168], "ones": 11, "rho": [11, 12], "often": [11, 12, 125, 168], "design": [11, 12, 162, 168], "variabl": [11, 12, 15, 20, 116, 117, 164], "depend": [11, 12, 60, 134, 136, 162, 163, 164, 166], "current": [11, 12, 19, 25, 33, 34, 35, 36, 37, 38, 39, 40, 60, 82, 92, 122, 163, 164], "valu": [11, 12, 21, 24, 25, 27, 28, 30, 31, 33, 34, 35, 38, 39, 40, 60, 61, 76, 78, 79, 82, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 133, 134, 136, 137, 145, 156, 157, 158, 164, 165, 166, 167, 168], "reweight": [11, 12], "our": [11, 12, 18, 19, 162, 164, 165, 166, 167, 168], "origin": [11, 12, 99, 164, 167], "ani": [12, 17, 19, 21, 24, 25, 26, 28, 31, 49, 59, 61, 77, 82, 87, 88, 91, 92, 93, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 145, 161, 162, 164, 165, 166, 167, 168], "allow": [13, 129, 144, 162, 165, 166, 168], "arbitrari": [13, 24, 33, 34, 35, 38, 39, 40, 116, 117, 121], "gauss": [13, 15, 33, 35, 39, 40, 42, 162], "newton": [13, 15], "levenberg": [13, 15], "marquardt": [13, 15], "code": [13, 21, 134, 136, 142, 145, 165, 167, 168], "inspir": 13, "utiasstart": 13, "pyslam": 13, "repo": [13, 162, 163], "http": [13, 21], "github": [13, 21, 162, 163], "com": [13, 21, 162, 163], "utiasstar": 13, "well": [13, 28, 164, 165, 167], "cere": [13, 164], "size_st": 14, "size_error": 14, "store": [14, 15, 50, 61, 90, 92, 110, 111, 112, 113, 114, 115, 120, 122, 164, 167, 168], "summari": [14, 164], "build": [15, 164], "is_converg": 15, "delta_cost": 15, "dx": [15, 28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 165, 167], "grad_norm": 15, "add_residu": [15, 164], "loss": 15, "l2loss": 15, "add": [15, 24, 27, 28, 30, 31, 59, 61, 96, 97, 98, 99, 106, 155, 164, 165, 167, 168], "along": [15, 21, 125, 154, 159], "add_vari": [15, 164], "kei": [15, 17, 18, 19, 20, 21, 28, 129, 164], "hashabl": [15, 17, 18, 19, 20, 164], "set_variables_const": 15, "set": [15, 16, 21, 24, 28, 34, 49, 54, 60, 61, 160, 163, 164, 165, 168], "held": 15, "constant": [15, 60, 165], "compute_error_jac_cost": 15, "full": [15, 28, 60, 61, 164], "vector": [15, 25, 28, 60, 61, 75, 81, 82, 84, 85, 89, 108, 110, 111, 112, 113, 114, 115, 117, 118, 122, 133, 135, 140, 143, 145, 150, 162, 164, 165, 166, 167, 168], "If": [15, 27, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 49, 54, 60, 61, 76, 78, 79, 82, 93, 94, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 124, 126, 129, 139, 140, 142, 145, 155, 156, 157, 158, 159, 164, 166], "get_covariance_block": [15, 164], "key_1": [15, 164], "key_2": [15, 164], "retriev": 15, "block": [15, 28, 61, 134, 136, 145], "two": [15, 27, 28, 54, 60, 61, 76, 78, 79, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 124, 129, 134, 138, 164, 165, 167, 168], "compute_covari": [15, 164], "after": [15, 37, 162, 164, 165], "commonli": [16, 76, 167], "These": [16, 28, 146, 167], "assign": [16, 24, 25, 26, 116, 117, 121, 125, 158, 165], "between": [16, 21, 22, 25, 27, 33, 34, 35, 36, 38, 39, 40, 49, 60, 76, 78, 79, 82, 93, 94, 100, 101, 102, 103, 104, 122, 124, 129, 133, 134, 135, 136, 137, 138, 145, 153, 158, 164, 167], "predict": [16, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 49, 82, 101, 103, 122, 164, 165, 167, 168], "actual": [16, 27, 76, 78, 79, 94, 100, 101, 102, 103, 104, 124, 158, 164, 168], "compar": [16, 164, 166], "measurementmodel": [16, 25, 26, 30, 31, 48, 73, 74, 75, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 122, 144, 164, 165, 166, 167, 168], "y": [17, 25, 28, 33, 34, 35, 36, 37, 38, 39, 40, 49, 61, 73, 74, 75, 77, 81, 82, 83, 84, 85, 87, 88, 89, 90, 108, 110, 111, 112, 113, 114, 115, 118, 123, 125, 155, 156, 157, 164, 165, 166, 167, 168], "g": [17, 21, 26, 60, 73, 74, 75, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 164, 166], "neg": [17, 164], "prior_stat": [18, 164], "prior_covari": [18, 164], "minu": [18, 19, 25, 28, 61, 82, 108, 110, 111, 112, 113, 114, 115, 118, 122, 125, 164, 165, 166, 167, 168], "oper": [18, 19, 24, 25, 28, 61, 82, 92, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 162, 164, 165, 166, 167], "_0": 18, "guess": 18, "u": [19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 49, 60, 70, 76, 78, 79, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 124, 164, 165, 166, 167, 168], "math": [19, 146, 153, 154, 159], "_": [19, 21, 27, 60, 76, 77, 78, 79, 81, 85, 87, 88, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 124, 146, 153, 154, 159, 164, 165, 166, 167, 168], "hat": 19, "written": [19, 77, 164, 167], "f": [19, 27, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124, 164, 166, 167, 168], "x_k": [19, 164, 166, 168], "x_k_hat": [19, 164], "t_k": [19, 167], "self": [20, 28, 33, 34, 35, 38, 39, 40, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164, 165, 166, 167, 168], "b": [21, 22, 79, 99, 165], "spline": [21, 22], "se": [21, 22, 50, 76, 106, 129, 154, 159, 164, 165, 166, 167], "3": [21, 22, 50, 56, 59, 60, 61, 77, 98, 110, 112, 113, 115, 129, 134, 140, 154, 159, 164, 165, 166, 167, 168], "simul": [21, 30, 51, 54], "trajectori": [21, 30, 128, 129, 130, 131, 134, 136, 137, 141, 159, 164, 168], "3d": [21, 49, 54, 112, 113, 115, 153, 154, 159, 160, 167], "space": [21, 54, 141, 150, 151, 162], "interocept": 21, "like": [21, 164, 165], "imu": [21, 49, 52, 53, 98, 162], "essenti": 21, "python": [21, 134, 136, 145], "found": [21, 28, 56, 162], "openvin": 21, "rpng": 21, "open_vin": 21, "blob": 21, "master": 21, "ov_cor": 21, "src": 21, "sim": [21, 27, 60, 76, 78, 79, 93, 94, 99, 100, 101, 102, 103, 104, 123, 124, 129, 146, 164, 165], "bsplinese3": 21, "core": [21, 119, 162, 168], "idea": [21, 162], "util": [21, 49, 162, 164], "cubic": 21, "interpol": [21, 134, 136, 145, 156, 157], "control": [21, 22, 36, 37, 168], "pose": [21, 22, 49, 50, 60, 61, 77, 87, 88, 90, 91, 92, 110, 111, 129, 130, 141, 153, 154, 159, 164, 165, 167], "denot": [21, 137, 164, 167, 168], "ab": [21, 77, 81, 85, 87, 88, 153, 154, 159, 165, 167], "vehicl": 21, "parameter": 21, "evenli": 21, "ab_i": 21, "curv": 21, "pure": 21, "four": 21, "bound": [21, 133, 134, 135, 136, 137, 145, 155, 158, 164], "tild": [21, 164], "4": [21, 36, 140, 164, 165, 166], "ab_0": 21, "prod_": [21, 96, 97, 99, 106], "n": [21, 27, 28, 60, 61, 64, 76, 78, 79, 93, 94, 99, 100, 101, 102, 103, 104, 106, 123, 124, 134, 136, 137, 140, 143, 146, 164, 165], "ab_": 21, "cumul": [21, 134, 136, 137], "basi": 21, "deriv": [21, 28, 56, 61, 63, 108, 110, 111, 112, 113, 114, 115, 118, 125, 140, 166], "equat": [21, 60, 64, 99, 101, 103, 166, 167], "behind": [21, 162], "mueggler": 21, "gallego": 21, "rebecq": 21, "d": [21, 26, 27, 28, 36, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 146, 164, 165, 166], "scaramuzza": 21, "continu": [21, 60, 78, 146, 168], "visual": [21, 164], "inerti": [21, 22, 60, 88, 153, 164], "odometri": [21, 106, 162, 164, 165], "event": 21, "camera": [21, 77, 153, 154], "transact": [21, 36, 37], "16": 21, "2018": 21, "traj_point": 22, "se3stat": [22, 49, 54, 73, 75, 76, 81, 85, 87, 88, 90, 91, 93, 129, 130, 131, 134, 141, 145, 154, 159, 167], "max_dt": 22, "Will": [22, 143, 156, 157], "interopol": 22, "uniform": 22, "interv": [22, 27, 33, 34, 35, 36, 38, 39, 40, 60, 76, 78, 79, 93, 94, 99, 100, 101, 102, 103, 104, 124, 134, 136, 137, 158], "whether": [22, 30, 31, 33, 34, 35, 36, 38, 39, 40, 82, 129, 134, 136, 137, 155, 156, 157, 158], "out": [22, 37, 145, 162, 163, 167], "debug": [22, 142], "get_pos": 22, "stamp": [22, 24, 25, 28, 33, 34, 35, 36, 37, 38, 39, 40, 59, 61, 82, 96, 97, 98, 99, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 129, 133, 134, 135, 136, 137, 138, 139, 145, 164, 165, 167, 168], "queri": [22, 139, 145], "get": [22, 24, 28, 61, 120, 134, 164, 166, 168], "timestamp": [22, 24, 25, 28, 30, 59, 61, 82, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 129, 133, 134, 135, 136, 137, 138, 139, 141, 142, 156, 157, 164], "get_veloc": 22, "angular": [22, 54, 76, 96, 106, 166, 168], "translat": [22, 54, 76, 106, 167], "veloc": [22, 54, 61, 74, 76, 93, 94, 96, 106, 108, 110, 111, 112, 113, 114, 115, 140, 166, 167, 168], "resolv": [22, 49, 54, 60, 76, 77, 87, 88, 93, 164, 167, 168], "bodi": [22, 49, 54, 76, 77, 87, 88, 91, 92, 93, 110, 111, 112, 140, 164, 168], "frame": [22, 49, 54, 60, 73, 74, 76, 77, 81, 85, 87, 88, 91, 92, 93, 140, 153, 164, 167, 168], "omega": [22, 60, 65, 66, 67, 96, 106, 166, 167, 168], "_b": [22, 77, 167], "ba": 22, "wherea": [22, 166], "v": [22, 49, 60, 74, 78, 79, 81, 82, 84, 85, 106, 110, 123, 164, 167, 168], "_a": [22, 81, 85, 89, 90, 164, 165, 167, 168], "get_acceler": 22, "acceler": 22, "global": 22, "input_list": [24, 164], "under": [24, 27, 162], "develop": [24, 27], "dof": [24, 28, 42, 59, 61, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 134, 136, 137, 140, 165, 167, 168], "degre": [24, 26, 28, 59, 61, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 126, 134, 158, 167], "freedom": [24, 26, 28, 59, 61, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 126, 134, 158, 167], "get_index_by_id": [24, 28, 61], "state_id": [24, 25, 26, 28, 31, 59, 61, 82, 92, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 164, 165, 167, 168], "index": [24, 28, 61, 139], "particular": [24, 28, 61, 161, 164], "add_input": 24, "remove_input_by_id": 24, "remov": [24, 28, 61, 70], "id": [24, 25, 26, 28, 59, 61, 77, 82, 91, 92, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 122, 164], "get_input_by_id": 24, "get_dof_by_id": [24, 28, 61], "sub": [24, 28, 61], "get_stamp_by_id": [24, 28, 61], "set_stamp_by_id": [24, 28, 61], "set_input_by_id": 24, "whole": [24, 28, 61], "set_stamp_for_al": [24, 28, 61], "subinput": 24, "to_list": [24, 28, 61], "convert": [24, 25, 28, 49, 61, 112, 115, 130, 131, 164, 167], "back": [24, 28, 61, 162, 166, 167], "copi": [24, 28, 49, 50, 59, 61, 96, 97, 98, 99, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 126, 164, 165, 166, 167, 168], "deep": [24, 59, 105, 121, 167], "plu": [24, 28, 59, 61, 96, 97, 98, 99, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 165, 166, 167], "addit": [24, 26, 27, 34, 60, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 125, 162, 165, 166, 167, 168], "modifi": [24, 59, 99, 105, 116, 117, 121], "new": [24, 28, 30, 33, 34, 35, 36, 38, 39, 40, 60, 61, 93, 96, 97, 98, 99, 105, 106, 112, 115, 121, 125, 134, 155, 156, 157, 158, 165, 166, 167], "shape": [24, 54, 59, 61, 98, 116, 117, 121, 134, 136, 137, 140, 143, 164], "identifi": [24, 41, 49, 61, 87, 99, 116, 117, 121, 164], "possibl": [24, 28, 116, 117, 121, 164, 165], "replac": [25, 164], "compositemeasurementmodel": [25, 92, 165], "per": [25, 55, 168], "numpi": [25, 27, 28, 60, 61, 76, 78, 79, 81, 82, 85, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 133, 134, 135, 136, 137, 139, 143, 164, 165, 166, 167, 168], "y_check": [25, 82, 122, 164], "By": [25, 82, 99, 116, 117, 122, 162, 167], "column": [25, 42, 82, 122, 143, 163, 164], "thu": [25, 82, 122, 142, 164], "subtract": [25, 28, 61, 82, 99, 108, 110, 111, 112, 113, 114, 115, 118, 122, 125, 166, 167, 168], "wrapper": [26, 165], "specif": [26, 28, 61, 124, 150, 162, 165, 167], "substat": [26, 28, 61, 92, 165], "referenc": [26, 165], "insid": [26, 92, 167], "compositest": [26, 27, 61, 77, 88, 91, 92, 164], "take": [26, 28, 61], "care": [26, 28, 61, 140, 164], "extract": [26, 28, 61, 165, 167], "relev": [26, 150, 165], "appli": [26, 30, 33, 34, 35, 36, 38, 39, 40, 103], "It": [26, 28, 143, 165, 166, 167, 168], "also": [26, 28, 30, 61, 77, 89, 99, 101, 123, 124, 134, 140, 162, 164, 165, 167, 168], "pad": 26, "zero": [26, 84, 142, 143, 151, 165, 166, 167], "appropri": [26, 28], "match": [26, 92, 138, 166], "larger": [26, 33, 34, 35, 37, 38, 39, 40], "onli": [26, 96, 134, 136, 150, 164, 166], "singl": [26, 28, 30, 94, 134, 136, 137, 142, 162, 164, 166], "uniqu": [26, 61, 87, 164, 165], "mathcal": [26, 27, 28, 60, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 146, 164, 165, 166], "frac": [26, 27, 28, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 164, 166], "evaluate_with_jacobian": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124], "simultan": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 133], "its": [26, 27, 34, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 146, 150, 162, 165, 168], "output": [26, 27, 34, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 139, 140, 142, 164, 168], "overrid": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 166], "perform": [26, 27, 34, 41, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 145, 163, 168], "reason": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 168], "lot": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 165], "common": [26, 27, 47, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 150, 155, 156, 157, 162, 166, 167], "more": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 134, 142, 162, 165, 166, 168], "effici": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124], "them": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 143, 162, 166, 167], "same": [26, 27, 28, 43, 60, 61, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 123, 124, 125, 129, 144, 162, 164, 165, 167, 168], "call": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 164, 167, 168], "sqrt_inform": [26, 27, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 123, 124, 164], "model_list": [27, 144], "shared_input": 27, "should": [27, 43, 49, 99, 124, 125, 141, 154, 162, 163, 164], "stackedprocessmodel": 27, "todo": 27, "document": [27, 63], "test": [27, 33, 34, 35, 36, 38, 39, 40, 41, 125], "compositeinput": 27, "dt": [27, 33, 34, 35, 36, 37, 38, 39, 40, 57, 58, 60, 62, 65, 66, 67, 69, 76, 78, 79, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 124, 146, 164, 165, 166, 167, 168], "provid": [27, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 60, 76, 78, 79, 93, 94, 98, 99, 100, 101, 102, 103, 104, 112, 115, 124, 134, 136, 137, 145, 166, 168], "numer": [27, 76, 78, 79, 94, 100, 101, 102, 103, 104, 124, 162], "access": [27, 28, 76, 78, 79, 94, 100, 101, 102, 103, 104, 124, 165, 166, 168], "via": [27, 76, 78, 79, 82, 94, 100, 101, 102, 103, 104, 124, 163, 164], "q": [27, 30, 52, 53, 54, 60, 76, 78, 79, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 124, 146, 164, 165, 166, 167, 168], "overridden": [27, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124], "approxim": [27, 36, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124, 166], "linear": [27, 60, 76, 78, 79, 84, 93, 94, 100, 101, 102, 103, 104, 113, 124, 134, 136, 145, 162, 166, 167], "procedur": [27, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124, 140], "input_covari": [27, 30, 33, 35, 39, 40, 60, 76, 78, 79, 93, 94, 98, 99, 100, 101, 102, 103, 104, 124, 165, 166, 167, 168], "input_jacobian_fd": [27, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124], "arg": [27, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 124, 140], "kwarg": [27, 60, 76, 78, 79, 93, 94, 100, 101, 102, 103, 104, 108, 113, 114, 124, 140], "state_list": [28, 131, 145, 156, 157], "intend": [28, 134, 136], "hold": [28, 125, 167], "conceptu": 28, "potenti": [28, 165], "plus_jacobian": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125], "minus_jacobian": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164], "attribut": [28, 105, 125, 134, 145, 165], "both": [28, 62, 76, 77, 134, 136, 148, 162, 166, 167], "technic": [28, 108], "": [28, 31, 48, 61, 116, 117, 122, 133, 139, 143, 145, 146, 159, 163, 164, 165, 166, 167], "get_slic": [28, 61], "slice": [28, 61, 134], "add_stat": [28, 61], "remove_state_by_id": [28, 61], "get_slice_by_id": [28, 61], "get_matrix_block_by_id": [28, 61], "mat": [28, 61], "state_id_1": [28, 61], "state_id_2": [28, 61], "portion": [28, 61], "subblock": [28, 61], "corrspond": [28, 61], "set_matrix_block_by_id": [28, 61], "new_mat_block": [28, 61], "enter": [28, 61], "updat": [28, 37, 43, 61, 96, 97, 98, 99, 105, 106, 165], "get_value_by_id": [28, 61], "get_state_by_id": [28, 61, 164], "set_state_by_id": [28, 61], "set_value_by_id": [28, 61], "new_stamp": [28, 61], "inter": [28, 61, 99], "pars": [28, 61], "alwai": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 165, 166, 168], "arrai": [28, 46, 61, 98, 108, 110, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 134, 136, 139, 140, 143, 164, 165, 166, 167, 168], "plus_by_id": [28, 61], "jacobian_from_block": [28, 61, 108, 110, 111, 112, 113, 114, 115, 164], "block_dict": 28, "entir": [28, 164], "some": [28, 125, 134, 164, 165, 166, 167, 168], "being": [28, 89, 166, 168], "That": [28, 61, 87, 88, 108, 110, 111, 112, 113, 114, 115, 118, 124, 125], "lie": [28, 36, 37, 61, 83, 90, 93, 108, 110, 111, 112, 113, 114, 115, 118, 125, 148, 150, 151, 158, 162], "notat": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125], "oplu": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 124, 125, 166, 167], "group": [28, 36, 37, 60, 61, 68, 71, 83, 90, 93, 97, 108, 110, 111, 112, 113, 114, 115, 118, 125, 148, 150, 151, 162, 164], "known": [28, 61, 87, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164, 165, 167, 168], "ominu": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164, 166, 167], "invers": [28, 61, 71, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164, 167], "x1": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164], "x2": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164], "minus_jacobian_fd": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125], "08": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125, 164], "plus_jacobian_fd": [28, 61, 108, 110, 111, 112, 113, 114, 115, 118, 125], "tool": [29, 167], "input_func": [30, 165, 167, 168], "callabl": [30, 46, 99, 140, 142, 167, 168], "input_freq": [30, 52, 53, 54, 164, 165, 167, 168], "meas_model_list": [30, 164, 165, 167, 168], "meas_freq_list": [30, 164, 165, 167, 168], "meas_offset_list": 30, "mani": [30, 32, 93, 108, 110, 111, 112, 113, 114, 115, 118, 125, 143, 162, 164, 166, 167], "you": [30, 61, 123, 124, 125, 134, 140, 161, 165, 166, 167, 168], "want": [30, 134, 164, 165, 166], "frequenc": [30, 54, 142, 144, 167, 168], "offset": [30, 129, 138, 144], "specifi": [30, 123, 124, 155, 158, 159, 167, 168], "ground": [30, 31, 133, 156, 157, 168], "truth": [30, 31, 133, 156, 157, 168], "vari": [30, 165], "add_measurement_model": 30, "freq": [30, 144], "exist": 30, "start": [30, 54, 164, 165, 167, 168], "stop": [30, 164, 165, 167, 168], "integr": [30, 78, 79, 94, 167, 168], "noiseless": 30, "measuement": 30, "end": [30, 54, 110, 111, 112, 145, 162, 164, 165, 166, 167, 168], "possibli": [30, 168], "noisi": [30, 54, 164, 168], "request": 30, "field": [31, 81, 85, 165], "correct": [32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 99, 129, 165, 167, 168], "style": [32, 44, 45], "reject_outli": [33, 34, 35, 36, 38, 39, 40], "iterate_mean": [33, 35, 39, 40], "sigmapointkalmanfilt": [33, 35, 40], "sigma": [33, 35, 39, 40, 42, 49, 133, 134, 135, 136, 155, 164], "unscent": [33, 35, 39, 40, 42, 162], "cubatur": [33, 35, 39, 40, 42, 162], "gh": [33, 35, 39, 40, 42], "hermit": [33, 35, 39, 40, 42, 162], "ni": [33, 34, 35, 36, 38, 39, 40, 41], "mean": [33, 35, 39, 40, 43, 84, 126, 133, 135, 137, 143, 149, 150, 151, 165, 168], "check": [33, 35, 39, 40, 49, 166], "x_": [33, 35, 39, 40, 166, 168], "fuse": [33, 34, 35, 37, 38, 39, 40, 82, 165, 167, 168], "produc": [33, 34, 35, 38, 39, 40, 143, 167], "vectorinput": [33, 35, 39, 40, 76, 78, 79, 93, 94, 96, 97, 99, 106, 116, 165, 166, 167, 168], "most": [33, 34, 35, 37, 38, 39, 40, 166], "recent": [33, 34, 35, 37, 38, 39, 40], "than": [33, 34, 35, 37, 38, 39, 40, 134, 142, 166, 167], "case": [33, 34, 35, 38, 39, 40, 124, 164, 165, 167, 168], "user": [33, 34, 35, 36, 38, 39, 40, 116, 117, 162, 164, 168], "durat": [33, 34, 35, 36, 38, 39, 40, 96, 97, 98, 99, 105, 106, 167], "next": [33, 34, 35, 36, 38, 39, 40, 163, 164, 165, 167, 168], "inpu": [33, 35, 39, 40], "grab": [33, 35, 39, 40], "On": [34, 36, 37, 38, 39], "manifold": [34, 36, 37, 38, 39, 140, 162], "kalman": [34, 38, 39, 162, 168], "x_jac": [34, 38], "output_detail": [34, 38], "just": [34, 134, 164, 165, 166, 167, 168], "done": [34, 56, 97, 163, 164, 166, 167], "valuat": [34, 38], "intermedi": 34, "innov": [34, 41, 82, 83], "gsf": 36, "alspach": 36, "sorenson": 36, "bayesian": 36, "vol": [36, 37], "17": 36, "pp": [36, 37], "439": 36, "448": 36, "august": 36, "1972": 36, "mix": [36, 37, 147, 148, 150], "\u0107esi\u0107": [36, 37], "markovi\u0107": [36, 37], "petrovi\u0107": [36, 37], "reduct": [36, 37], "signal": [36, 37], "24": [36, 37, 168], "1719": [36, 37], "1723": [36, 37], "nov": [36, 37], "2017": [36, 37], "lsp": [36, 37], "2723765": [36, 37], "mixturest": [36, 37, 135, 136], "kf_list": 37, "extendedkalmanfilt": [37, 38, 44, 165, 167, 168], "transition_matrix": 37, "interact": [37, 162], "multipl": [37, 145, 162, 165], "imm": 37, "p": [37, 151, 164], "blom": 37, "bar": [37, 82, 99, 166], "shalom": 37, "algorithm": [37, 162, 163, 166], "system": [37, 146, 164], "markovian": 37, "switch": [37, 167], "coeffici": 37, "33": 37, "8": [37, 140, 141, 164, 167], "780": 37, "783": 37, "aug": 37, "1988": 37, "9": [37, 59, 60, 64, 81, 140, 164, 166, 167], "1299": 37, "probabl": [37, 134, 136, 137, 158], "transit": [37, 99], "x_km": 37, "carri": 37, "previou": [37, 98, 164, 165, 166, 167], "x_check": 37, "mu_km_model": 37, "0001": 38, "200": [38, 52, 53], "line_search": 38, "extend": [38, 60, 162, 167, 168], "outlier": 41, "unit": [42, 137], "three": [42, 133, 134, 135, 136, 155, 164, 165, 168], "avail": [42, 162, 165, 167, 168], "sigmapoint": [42, 162], "repres": [42, 77, 94, 108, 110, 111, 112, 113, 114, 115, 117, 118, 124, 126, 153, 154, 159, 164, 165, 167], "x_arrai": 43, "manner": 43, "until": [43, 165, 167, 168], "reach": 43, "maximun": 43, "averag": [43, 137], "thei": [43, 62, 162, 166, 167], "disable_progress_bar": [44, 45], "execut": [44, 45, 46, 142, 162], "_description_": [44, 45, 46], "gaussiansumfilt": 45, "interactingmodelfilt": 46, "interactingmultiplemodel": 46, "q_profil": 46, "built": [47, 168], "librari": [47, 168], "basic": 48, "pinhol": [48, 49, 77], "cameraproject": 48, "fu": 49, "fv": 49, "cu": 49, "cv": 49, "image_width": 49, "image_height": 49, "t_bc": 49, "posematrix": 49, "camera_id": 49, "pixel": 49, "coordin": [49, 108, 110, 111, 112, 113, 114, 115], "imag": 49, "intrins": [49, 77], "focal": 49, "length": [49, 138, 159, 164], "horizont": [49, 143], "vertic": [49, 55], "optic": [49, 153, 154], "axi": [49, 154, 155, 156, 157, 168], "intersect": 49, "plane": 49, "width": 49, "height": [49, 75], "transform": [49, 77, 110, 111, 112, 129, 165, 167], "get_cam_to_enu": 49, "dcm": [49, 129, 141], "relat": 49, "enu": 49, "z": [49, 75, 77, 82, 154], "down": 49, "up": [49, 99, 134, 136, 156, 157, 163, 165, 168], "properti": [49, 50, 61, 96, 97, 98, 99, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 126, 154, 159, 165, 167], "sigma_normalized_image_coord": 49, "r_normalized_image_coord": 49, "is_measurement_valid": 49, "uv": 49, "valid": [49, 75, 93, 167, 168], "posit": [49, 50, 61, 73, 75, 77, 83, 87, 88, 89, 90, 91, 92, 108, 110, 111, 112, 113, 114, 115, 129, 134, 141, 153, 154, 159, 164, 166, 167, 168], "within": 49, "is_landmark_in_front_of_cam": 49, "r_pw_a": [49, 164], "landmark": [49, 55, 77, 87, 88, 164, 165, 166, 167, 168], "front": 49, "free": [49, 163], "imust": [49, 52, 53, 60, 70, 73, 74, 75, 81, 85, 87, 88, 90, 91, 102], "world": [49, 73, 74, 81, 85, 93, 168], "resolve_landmark_in_cam_fram": 49, "project": [49, 77, 162], "r_pc_c": 49, "to_normalized_coord": 49, "to_pixel_coor": 49, "mea": [49, 82, 164], "conveni": [50, 134, 136, 164, 165], "attitud": [50, 61, 83, 87, 88, 96, 108, 110, 111, 112, 113, 114, 115, 134, 140, 153, 154, 159, 164], "collect": [51, 132, 147, 152, 162, 164], "01": [52, 53, 54, 164, 166, 167], "meas_freq": [52, 53, 54], "t_start": [52, 53, 54], "t_end": [52, 53, 54, 164], "50": [52, 53, 142, 165, 167, 168], "noise_act": [52, 53, 54], "get_ground_truth": [52, 53, 54, 120], "groundtruth": [52, 53, 54, 120, 164], "get_input_data": [52, 53, 54, 120], "retrun": [52, 53, 54, 120], "get_measurement_data": [52, 53, 54, 120], "cylinder_radiu": [53, 55], "max_height": [53, 55], "n_level": [53, 55], "n_landmarks_per_level": [53, 55], "get_groundtruth_landmark": 53, "30": [54, 165, 167, 168], "simpl": [54, 94, 122, 168], "rigid": [54, 91, 110, 111, 112], "move": [54, 166, 168], "rang": [54, 89, 90, 91, 92, 145, 164, 165, 167, 168], "anchor": [54, 89, 90], "tag": [54, 91, 92], "mount": 54, "own": [54, 150, 165, 167, 168], "order": [54, 61, 78, 165], "arrang": [55, 164], "cylind": 55, "radiu": 55, "top": [55, 161], "discret": [55, 60, 78, 79, 93, 94, 146, 167, 168], "level": [55, 142], "place": [55, 96, 97, 98, 99, 105, 106, 164], "kinemat": [56, 60, 78, 167], "note": [56, 77, 164, 165, 166, 168], "treatment": 56, "typic": 56, "sens": [56, 125, 168], "directli": [56, 82, 83, 99, 108, 124, 158, 163, 165, 167, 168], "se_2": [56, 60, 61, 167], "pdf": 56, "describ": [56, 59, 77, 87, 88, 116, 117, 167], "link": [56, 161, 164], "graviti": [57, 58, 60, 98, 102], "gyro": [59, 61, 70, 98], "accel": [59, 65, 66, 67, 98], "bias_gyro_walk": 59, "bias_accel_walk": 59, "read": [59, 122, 166], "size": [59, 61, 91, 98, 140, 154, 159, 164], "acceleromet": [59, 61, 70], "drive": 59, "bia": [59, 61, 62, 70, 75, 79, 96, 97, 98, 99, 105, 106, 165], "random": [59, 79, 98, 99, 110, 111, 112, 114, 115, 125, 143, 145, 164, 165, 168], "walk": [59, 79, 98, 99, 165], "12x12": 59, "12": [59, 98, 164, 167], "dot": [60, 78, 79, 94, 108, 110, 111, 112, 113, 114, 115, 146, 167, 168], "wedg": [60, 76, 93, 96, 97, 106, 108, 110, 111, 112, 113, 114, 115, 164, 166, 167], "shown": [60, 99, 125, 166, 168], "matric": [60, 99, 146, 167], "quit": 60, "instead": [60, 80, 108, 165, 167], "belong": [60, 166, 167], "name": [60, 167], "increment": [60, 68, 71, 96, 97, 98, 99, 105, 106], "euclidean": [60, 68, 71, 167], "ie": 60, "g_a": 60, "80665": [60, 81], "assumpt": 60, "nav_stat": 61, "bias_gyro": 61, "bias_accel": 61, "direct": [61, 82, 108, 110, 111, 112, 113, 114, 115, 140, 164, 165, 167], "composit": [61, 92, 164], "navig": 61, "bias": [61, 70], "orient": [61, 168], "gyroscop": 61, "perturb": [61, 108, 110, 111, 112, 113, 114, 115, 125, 164, 166], "nav": [61, 62, 134, 164, 165, 166, 167, 168], "se23stat": [61, 73, 74, 75, 76, 81, 85, 87, 88, 90, 91, 93, 140, 167], "vectorst": [61, 78, 79, 84, 86, 89, 94, 103, 164, 165, 166, 168], "gyro_bia": [61, 98], "accel_bia": [61, 98], "In": [61, 77, 94, 96, 97, 98, 99, 105, 106, 124, 125, 162, 164, 166, 167, 168], "other": [61, 99, 108, 110, 111, 112, 113, 114, 115, 125, 166, 167, 168], "word": 61, "unbiased_gyro": 62, "unbiased_accel": 62, "sinc": [62, 164, 165, 166, 168], "phi_vec": [63, 64], "m": [63, 85, 93, 140, 164, 165, 166, 167, 168], "2nd": [64, 92], "edit": 64, "211": 64, "adjoint": [68, 166], "correupt": 70, "unbias": 70, "absolut": [73, 74, 91], "se2stat": [73, 76, 87, 88, 90, 91, 93, 108, 159, 164, 165, 166, 167], "matrixliegroupst": [73, 74, 75, 76, 80, 81, 83, 85, 87, 90, 93, 100, 101, 104, 110, 111, 112, 113, 114, 115], "minimum": 75, "varianc": [75, 89], "minim": 75, "fix": [75, 77], "sensor": [75, 168], "local": [76, 81, 85, 163, 168], "comptabil": [76, 84, 87, 88, 90, 93], "so2stat": [76, 93, 167], "so3stat": [76, 81, 85, 93, 108, 167], "pose_state_id": [77, 88, 164], "landmark_state_id": [77, 88, 164], "pinholecamera": 77, "thih": 77, "bc": 77, "so": [77, 110, 111, 112, 167], "mathbb": [77, 94, 110, 111, 112, 113, 114, 115, 164, 165, 167, 168], "extrins": 77, "_c": [77, 146], "ell": [77, 87, 88, 99, 166, 168], "cdot": [77, 166, 167], "f_u": 77, "c_u": 77, "f_v": 77, "c_v": 77, "about": [77, 133, 150, 166], "includ": [77, 99, 162, 164, 165, 167], "doubl": [78, 79, 134, 136, 137, 166], "input_jacobian": [78, 79, 124], "doubleintegr": 79, "rais": [79, 94, 126, 145], "valueerror": [79, 94, 126], "absoluteposit": 80, "deprec": 80, "gravity_vector": 81, "magnet": [81, 85], "auto": 82, "invari": [82, 83], "readi": [82, 163, 165], "chosen": [82, 150], "approx": 82, "xi": [82, 166, 167], "henc": [82, 140], "similarli": [82, 164], "opposit": 82, "suppli": [82, 92, 99], "invariantinnov": 82, "indirectli": 82, "chain": 82, "rule": 82, "pointrelativeposit": [83, 164], "magnetic_vector": 85, "landmark_posit": [87, 164, 165, 166, 167, 168], "landmark_id": [87, 164], "lndmark": 88, "anchor_posit": [89, 90], "dim": 89, "tag_body_posit": [90, 92], "tag_body_position1": 91, "tag_body_position2": 91, "state_id1": 91, "state_id2": 91, "nb_tag_body_posit": 92, "nb_state_id": 92, "neighbor": 92, "somewher": 92, "q1": 93, "q2": 93, "To": [93, 123, 124, 150, 164, 166, 167, 168], "honest": 93, "sure": 93, "peopl": 93, "we": [93, 162, 163, 164, 165, 166, 167, 168], "were": [93, 153, 154, 155, 156, 157], "while": [93, 165, 167, 168], "motion": [93, 168], "stack": [93, 98, 134, 143, 167], "_1": [93, 167], "bodyvelocityincr": [96, 100, 101, 104, 106], "give": [96, 142, 167, 168], "rotat": [96, 114, 115, 129, 153, 154, 159, 167], "ij": [96, 97, 99, 101, 103, 106], "reiniti": [96, 98, 99, 106], "rmi": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "relativemotionincr": [96, 97, 98, 99, 106], "later": [96, 97, 98, 99, 105, 106, 164, 168], "symmetr": [96, 97, 98, 99, 105, 106, 126], "update_bia": [96, 97, 98, 99, 105, 106], "new_bia": [96, 97, 98, 99, 105, 106], "rtype": [96, 97, 106], "matrixliegroup": [97, 108, 110, 111, 112, 113, 114, 115], "trivial": 97, "original_valu": [98, 99, 106], "original_bia": [98, 99], "bias_jacobian": [98, 99], "new_gyro_bia": 98, "new_accel_bia": 98, "state_matrix": 99, "input_matrix": 99, "_j": 99, "rewritten": 99, "quantiti": 99, "total": [99, 137, 164], "furthermor": 99, "augment": 99, "befor": [99, 164, 165, 166], "make": [99, 134, 136, 143, 156, 157, 158, 165, 168], "itself": [99, 166], "preintegratedbodyveloc": [100, 104], "accord": 101, "accordingli": [101, 165], "imuincr": 102, "linearincr": 103, "incorpor": 105, "wheel": [106, 162, 164, 165], "varpi": [106, 164, 166, 167], "although": [108, 163, 168], "recommend": [108, 166], "exponenti": [108, 110, 111, 112, 113, 114, 115, 146, 167], "otherwis": [108, 110, 111, 112, 113, 114, 115, 129, 165], "2d": [108, 110, 111, 112, 113, 114, 115, 159, 166, 167, 168], "pymlg": [108, 110, 111, 112, 113, 114, 115, 162, 164], "se2": [108, 110, 111, 112, 113, 114, 115, 167], "so3": [108, 110, 111, 112, 113, 114, 115, 164], "ext": [108, 110, 111, 112, 113, 114, 115], "model_st": 109, "model_prob": [109, 135, 136], "5x5": 110, "se23": 110, "egin": [110, 111, 112], "bmatrix": [110, 111, 112, 164, 165, 166, 167], "quad": [110, 111, 112, 113, 114, 115], "3x3": [111, 113, 115, 167], "4x4": 112, "se3": 112, "from_ro": [112, 115], "msg": [112, 115], "posestamp": 112, "messag": [112, 115, 142], "frame_id": [112, 115], "to_ro": [112, 115], "special": [113, 167], "sl3": 113, "sl": [113, 167], "im": [113, 114, 115], "2x2": 114, "so2": 114, "quaternionstamp": 115, "quaternion": [115, 141], "unless": [116, 117], "someth": [116, 117, 125], "els": [116, 117, 164], "fulli": [116, 117], "seper": [116, 117, 166], "memori": [116, 117], "1d": [117, 118], "primit": [119, 168], "throughout": [119, 134, 136, 137, 166], "without": [122, 126, 164, 167], "period": [124, 146], "wai": [124, 143, 162, 165, 167, 168], "distribut": [124, 126, 147], "u_": 124, "l": [124, 146, 164], "sort": [125, 138, 165], "certain": 125, "label": [125, 155, 158, 159, 164, 168], "differenti": 125, "tutori": [125, 162, 163, 168], "practic": [125, 164, 165, 167], "line": [125, 134, 136, 153, 154, 156, 157, 158, 165], "randn": [125, 164], "dx_test": 125, "assert": [125, 140], "allclos": [125, 140], "usual": [126, 162, 165], "doe": [126, 134, 164, 165, 167], "enforc": 126, "symmetri": 126, "evo": [128, 130, 131], "packag": [128, 161, 162, 163], "traj_ref_list": 129, "traj_est_list": 129, "max_diff": 129, "02": [129, 138, 164, 166, 167], "correct_scal": 129, "n_to_align": 129, "traj_ref": 129, "traj_est": 129, "scale": [129, 153, 154, 160, 164], "traj": 130, "posetrajectory3d": [130, 131], "miscellan": [132, 152], "state_tru": [133, 134, 135, 136], "variou": [133, 135, 137, 162], "interest": [133, 137, 168], "metric": [133, 135, 137, 168], "filter": [133, 162, 165], "ee": [133, 134, 135, 136, 137], "nee": [133, 134, 135, 136, 137, 158, 164, 165, 167, 168], "rmse": [133, 134, 135, 136, 137], "md": [133, 134, 135, 136, 168], "mahalanobi": [133, 134, 135, 136, 168], "distanc": [133, 134, 135, 136, 168], "three_sigma": [133, 134, 135, 136, 168], "result_list": [134, 136], "gaussianresult": [134, 135, 136, 164], "plot": [134, 136, 162, 164, 168], "noth": 134, "ifi": [134, 167], "support": 134, "themselv": [134, 164], "from_estim": [134, 136, 165, 167, 168], "state_true_list": [134, 136], "except": 134, "veri": [134, 167], "examin": 134, "last": [134, 164, 165], "plot_error": [134, 164, 165, 167, 168], "likewis": 134, "let": [134, 136, 137, 164, 165, 166, 167, 168], "len": [134, 136, 164, 165, 167, 168], "value_tru": [134, 136], "nees_lower_bound": [134, 136, 137], "confidence_interv": [134, 136, 137, 158], "lower": [134, 136, 137], "side": [134, 136, 137, 166], "threshold": [134, 136, 137], "confid": [134, 136, 137, 158], "upper": [134, 136, 137], "ax": [134, 136, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 167, 168], "99": [134, 136], "nees_upper_bound": [134, 136, 137], "double_sid": [134, 136, 137], "estimate_list": [134, 136], "nearest": [134, 136, 139], "do": [134, 136, 156, 157, 164, 165, 166, 168], "exactli": [134, 136, 167], "imm_estim": 135, "mixtureresult": 136, "gaussianresultlist": [136, 137, 142, 155, 158, 164, 165, 167, 168], "trial_result": 137, "mont": [137, 142, 162], "carlo": [137, 142, 162], "experi": [137, 142, 162], "trial": [137, 142], "raw": [137, 168], "num_trial": [137, 142], "average_ne": 137, "average_e": 137, "total_rms": 137, "meaningless": 137, "expected_ne": 137, "expect": [137, 142, 158, 166], "first_stamp": 138, "second_stamp": 138, "max_differ": 138, "smallest": 138, "rpg_trajectory_evalu": 138, "toolbox": 138, "consid": [138, 164, 165], "match_first_idx": 138, "match_second_idx": 138, "stamps_list": 139, "find": [139, 146], "indic": 139, "fun": 140, "reshap": [140, 164], "def": [140, 164, 165, 166, 167, 168], "jac_test": 140, "jac_tru": 140, "atol": 140, "c_ab": [140, 141, 164], "v_zw_a": 140, "v_zw_b": 140, "linalg": [140, 164, 165, 166, 167, 168], "jac_fd": 140, "union": [140, 159], "central": 140, "complex": [140, 164], "ensur": 140, "handl": [140, 148, 153, 154, 155, 156, 157, 164, 165], "fpath": 141, "load": [141, 165, 167, 168], "tum": 141, "file": 141, "row": 141, "entri": 141, "separ": 141, "format": 141, "px": 141, "py": 141, "pz": 141, "qx": 141, "qy": 141, "qz": 141, "qw": 141, "num_job": 142, "montecarloresult": [142, 158], "executor": [142, 162], "aappgreg": 142, "integ": [142, 167], "remain": [142, 167], "consist": [142, 162, 166], "concurr": 142, "run": [142, 162, 163, 165], "job": 142, "cpu": 142, "parallel": 142, "below": [142, 161, 164, 167, 168], "n_cpu": 142, "progress": 142, "abov": [142, 165, 167, 168], "sent": 142, "stdout": 142, "increas": [142, 164], "report": 142, "cov": [143, 164], "num_sampl": 143, "independ": 143, "faster": [143, 167], "sampl": [143, 146, 167, 168], "avoid": [143, 165], "recomput": 143, "choleski": [143, 164], "decomposit": 143, "schedul": 144, "sequenti": 144, "cannot": [144, 167], "reduc": 144, "individu": [144, 164], "query_stamp": 145, "geodes": 145, "onc": [145, 150, 168], "fashion": [145, 150], "x_data": 145, "x_queri": 145, "x_interp": 145, "thereof": 145, "treat": 145, "typeerror": 145, "a_c": 146, "l_c": 146, "q_c": 146, "van": 146, "loan": 146, "hspace": 146, "5mm": 146, "power": 146, "spectral": 146, "densiti": 146, "equival": [146, 164], "represent": [146, 167], "_d": 146, "a_d": 146, "q_d": 146, "requir": [147, 166], "x_list": [148, 150], "vectorspac": [148, 149], "x_par": 150, "reparametr": 150, "tangent": [150, 151], "expand": 150, "around": [150, 151, 165], "mai": [150, 159, 166], "member": 150, "mu": 151, "express": [151, 166], "stateandcovari": 151, "x_hat": 151, "algebra": 151, "whose": 151, "line_thick": [153, 154], "25": [153, 154, 168], "color": [153, 154, 155, 158, 159], "tab": [153, 154, 164], "blue": [153, 154, 164], "matplotlib": [153, 160, 164, 165, 167, 168], "plot_pos": [153, 164], "center": 153, "corner": 153, "plt": [153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 167, 168], "figur": [153, 154, 155, 156, 157, 158, 163, 168], "drawn": [153, 154, 155, 156, 157, 158], "thick": 154, "sharei": [155, 156, 157], "plotter": 155, "draw": [155, 156, 157, 158], "meas_list": [156, 157, 164], "domain": [156, 157], "similar": [156, 157, 164, 165, 168], "perfectli": [156, 157, 166], "95": 158, "expected_nees_color": 158, "show": [158, 164, 165, 166, 167, 168], "fed": 158, "desir": 158, "region": 158, "wa": [158, 165, 166], "line_color": [159, 164], "triad_color": 159, "arrow_length": 159, "linewidth": 159, "plot_2d": 159, "triad": 159, "planar": 159, "rgb": 159, "arrow": 159, "bird": 159, "ey": [159, 165, 166, 167, 168], "view": 159, "equal": [160, 164, 168], "navli": [161, 163, 165, 167, 168], "click": 161, "altern": [161, 165], "search": 161, "box": [161, 162, 167], "tradit": 162, "fall": [162, 166], "exact": [162, 167], "varieti": 162, "custom": [162, 167, 168], "spheric": 162, "batch": 162, "differenc": 162, "aggreg": [162, 166], "preintegr": 162, "few": [162, 163, 167, 168], "diagram": 162, "summar": 162, "clone": [162, 163], "directori": 162, "git": [162, 163], "decargroup": [162, 163], "cd": [162, 163], "pip": [162, 163], "command": [162, 163], "mathemat": [162, 167], "depth": 162, "websit": 162, "folder": 162, "python3": 162, "script": 162, "welcom": 163, "go": [163, 165], "toi": 163, "framework": [163, 164, 165, 167, 168], "instal": 163, "now": [163, 164, 165, 166, 167, 168], "regist": 163, "pypi": 163, "work": [163, 165, 166, 167, 168], "re": 163, "still": [163, 167], "properli": 163, "sorri": 163, "feel": 163, "help": 163, "ll": [164, 165, 168], "notebook": [164, 166], "part": 164, "goal": 164, "ldot": 164, "begin": [164, 165, 166, 167, 168], "ab_k": 164, "theta": [164, 165, 166, 167, 168], "addition": 164, "th": [164, 166], "align": [164, 166, 167, 168], "jk": 164, "mathsf": 164, "white": 164, "notic": [164, 165], "unlik": [164, 167], "leverag": 164, "need": [164, 166, 167, 168], "rest": 164, "import": [164, 165, 166, 167, 168], "invert": 164, "string": 164, "pose_key_str": 164, "landmark_key_str": 164, "20": 164, "pointrelativepositionslam": 164, "__init__": [164, 165, 166, 167, 168], "_r": 164, "lib": [164, 165, 166, 167, 168], "r_a": 164, "p_a": 164, "_pose_state_id": 164, "_landmark_state_id": 164, "r_zw_a": 164, "pose_jacobian": 164, "odot": 164, "elif": 164, "landmark_jacobian": 164, "jac_dict": 164, "09642014": 164, "05653507": 164, "Then": 164, "bodyframeveloc": 164, "circl": 164, "co": [164, 166, 167, 168], "sin": [164, 166, 167, 168], "linspac": 164, "pi": 164, "enumer": [164, 168], "meas_model": [164, 165, 166, 167, 168], "profil": 164, "input_profil": 164, "lambda": [164, 165, 167, 168], "dg": [164, 165, 167, 168], "datagener": [164, 165, 167, 168], "gt_pose": 164, "pyplot": [164, 165, 167, 168], "fig": [164, 165, 167, 168], "set_titl": [164, 165, 167, 168], "set_xlabel": [164, 165, 167, 168], "set_ylabel": [164, 165, 167, 168], "wish": 164, "measaur": 164, "howev": [164, 166, 168], "thankfulli": 164, "rewrit": 164, "pai": 164, "attent": 164, "ve": 164, "seen": [164, 167], "nonweight": 164, "explor": 164, "subset": 164, "consecut": 164, "section": 164, "super": [164, 165, 167], "_cov": 164, "_x0": 164, "precomput": 164, "squara": 164, "_l": 164, "inv": [164, 167], "_process_model": 164, "_u": 164, "x_km1": 164, "info": 164, "jac_list": 164, "pointrelativepositionresidu": 164, "previous": [164, 166], "eval_st": 164, "full_jac": 164, "dead": 164, "reckon": 164, "x0_hat": 164, "init_pose_est": 164, "append": [164, 165, 167, 168], "init_landmark_est": 164, "sigma_init": 164, "perturbed_landmark": 164, "red": 164, "marker": 164, "legend": [164, 168], "39": [164, 167], "l0": 164, "l1": 164, "init_keys_list": 164, "variables_init": 164, "x3": 164, "x4": 164, "x5": 164, "x6": 164, "x7": 164, "x8": 164, "x9": 164, "l3": 164, "l4": 164, "l5": 164, "l6": 164, "l7": 164, "l8": 164, "l9": 164, "est_stamp": 164, "init_cov": 164, "prior_residu": 164, "process_residu": 164, "find_nearest_stamp_idx": 164, "pose_idx": 164, "meas_residu": 164, "dc": 164, "opt_result": 164, "variables_opt": 164, "10209": 164, "908382510479": 164, "1187e": 164, "03": [164, 167], "8430e": 164, "0913e": 164, "8191e": 164, "00": [164, 166, 167], "grad": 164, "_inf": 164, "5900e": 164, "9963e": 164, "1161e": 164, "2235e": 164, "1290e": 164, "5779e": 164, "0496e": 164, "0240e": 164, "0158e": 164, "05": [164, 167], "1471e": 164, "9900e": 164, "9980e": 164, "04": [164, 167], "0009e": 164, "1650e": 164, "6577e": 164, "5637e": 164, "8333e": 164, "09": 164, "0333e": 164, "1292e": 164, "4423e": 164, "7244e": 164, "7811e": 164, "7510e": 164, "0526e": 164, "2728e": 164, "3721e": 164, "0217e": 164, "7209e": 164, "3668e": 164, "5173e": 164, "5874e": 164, "3465e": 164, "7452e": 164, "13": 164, "0893e": 164, "6017": 164, "9997": 164, "final": [164, 167, 168], "1996": 164, "258310853446": 164, "40": 164, "7240629196167": 164, "thee": 164, "margin": 164, "sometim": [164, 166, 167], "choos": [164, 168], "manipul": [164, 166], "complet": 164, "poses_results_list": 164, "landmarks_results_list": 164, "postprocess": 164, "gaussian_result_list": 164, "plot_ne": [164, 165, 167, 168], "rad": [164, 165, 167, 168], "opt_pos": 164, "green": 164, "opt_landmark": 164, "sparsiti": 164, "pattern": 164, "subplot": 164, "spy": 164, "info_matrix": 164, "arbitarili": 165, "combin": [165, 168], "suppos": 165, "easili": [165, 167], "former": 165, "approach": 165, "48": 165, "99500417": [165, 167], "09983342": [165, 167], "84679329": 165, "09491919": 165, "who": 165, "alreadi": 165, "demonstr": 165, "49": 165, "x_temp": 165, "nresult": 165, "45359612": 165, "89120736": 165, "80531705": 165, "55185711": 165, "write": 165, "mathrm": 165, "slowli": 165, "scipi": [165, 166, 167], "expm": [165, 166, 167], "wedge_se2": [165, 166, 167], "wheeledrobotwithbia": 165, "input_covariance_matrix": [165, 166, 167], "vel": [165, 167], "x_next": [165, 166, 167, 168], "purpos": [165, 167], "even": [165, 167, 168], "nomin": 165, "seri": 165, "51": 165, "rangetolandmarkse2": [165, 167], "measurement_covari": [165, 167], "po": [165, 167, 168], "made": 165, "throw": 165, "feed": 165, "easi": 165, "lightweight": 165, "52": 165, "46544123": 165, "88507893": 165, "good": [165, 166], "anywai": 165, "pass": 165, "boilerpl": 165, "extra": 165, "effect": 165, "With": [165, 167], "snippet": [165, 167], "53": 165, "state_data": [165, 167, 168], "kalman_filt": [165, 167, 168], "diag": [165, 167, 168], "meas_idx": [165, 167, 168], "occur": [165, 167, 168], "ang": 165, "frequent": 165, "would": 165, "55": 165, "wheeledrobotst": 165, "pose_valu": 165, "bias_valu": 165, "getter": 165, "look": 165, "cleaner": 165, "flexibl": 165, "becaus": [165, 166], "ergonom": 165, "As": [166, 167, 168], "know": 166, "conform": 166, "constraint": 166, "triangleq": 166, "partial": 166, "regular": [166, 168], "univers": 166, "roughli": 166, "what": 166, "micro": [166, 167], "theori": [166, 167], "paper": 166, "natur": 166, "aris": 166, "choic": 166, "dont": 166, "worri": 166, "drawback": 166, "computation": 166, "expens": 166, "less": 166, "accur": 166, "analyt": 166, "offer": 166, "accuraci": 166, "speed": [166, 167], "recal": 166, "had": 166, "theta_": [166, 168], "theta_k": [166, 168], "omega_k": [166, 168], "v_k": [166, 168], "y_": [166, 168], "y_k": [166, 168], "techniqu": 166, "lead": 166, "deviat": [166, 168], "wheeledrobot": [166, 168], "did": 166, "everyth": 166, "correctli": 166, "analy": 166, "nfinit": 166, "01682942": 166, "01080605": 166, "01682943": 166, "01080604": 166, "almost": 166, "slightli": 166, "due": 166, "nevertheless": 166, "suffici": 166, "applic": 166, "again": [166, 167], "rangetolandmark": [166, 168], "nanaly": 166, "70710678": 166, "70710696": 166, "nice": 166, "wedge_k": 166, "underbrac": 166, "There": [166, 168], "invok": [166, 168], "adjoint_se2": 166, "wheeledrobotse2": [166, 167], "0394695": 166, "92106099": 166, "38941834": 166, "19470917": 166, "00000000e": [166, 167], "10747782e": 166, "94695038e": 166, "21060995e": 166, "89418343e": 166, "94709171e": 166, "89418342e": 166, "21060994e": 166, "longer": 166, "tangibl": 166, "advantag": [166, 168], "high": 166, "uncertainti": 166, "excess": 166, "far": 166, "could": [167, 168], "task": 167, "becom": 167, "increasingli": 167, "cosin": 167, "togeth": 167, "multipli": 167, "proce": 167, "further": 167, "setup": 167, "vee": 167, "28": 167, "reset": 167, "helper": 167, "vee_se2": 167, "fundament": 167, "relationship": 167, "appear": 167, "logarithm": 167, "deeper": 167, "suffic": 167, "think": 167, "3x1": [167, 168], "logm": 167, "nthe": 167, "18467933": 167, "30949192": 167, "littl": 167, "bit": 167, "literatur": 167, "boxplu": 167, "boxminu": 167, "varepsilon": 167, "context": 167, "plai": 167, "role": 167, "new_valu": 167, "other_inv": 167, "adapt": 167, "od": 167, "short": 167, "t_": 167, "unchang": 167, "And": 167, "liter": 167, "past": 167, "modif": 167, "hz": [167, 168], "99950000e": 167, "99983333e": 167, "99990000e": 167, "99997500e": 167, "52438924": 167, "40056502": 167, "poserangetolandmark": 167, "299276237837416": 167, "scratch": [167, 168], "pedagog": 167, "come": 167, "belon": 167, "sl3state": 167, "homographi": 167, "moreov": 167, "close": 167, "formula": 167, "underli": 167, "flight": 168, "environ": 168, "euler": 168, "seed": 168, "cover": 168, "those": 168, "y_i": 168, "23": 168, "real": 168, "4867558": 168, "40227221": 168, "5906187969698615": 168, "corrupt": 168, "item": 168, "scatter": 168, "annot": 168, "xlabel": 168, "ylabel": 168, "u_arrai": 168, "u_stamp": 168, "whenev": 168, "26": 168, "try": 168, "too": 168, "unscentedkalmanfilt": 168, "iteratedkalmanfilt": 168, "stateless": 168, "extern": 168, "slight": 168, "burden": 168, "transpar": 168, "abil": 168, "ekf": 168, "ukf": 168, "obtain": 168, "qualiti": 168, "27": 168, "might": 168}, "objects": {"navlie": [[0, 0, 0, "-", "batch"], [21, 0, 0, "-", "bspline"], [23, 0, 0, "-", "composite"], [29, 0, 0, "-", "datagen"], [32, 0, 0, "-", "filters"], [47, 0, 0, "-", "lib"], [119, 0, 0, "-", "types"], [127, 0, 0, "-", "utils"]], "navlie.batch": [[1, 0, 0, "-", "estimator"], [3, 0, 0, "-", "gaussian_mixtures"], [9, 0, 0, "-", "losses"], [13, 0, 0, "-", "problem"], [16, 0, 0, "-", "residuals"]], "navlie.batch.estimator": [[2, 1, 1, "", "BatchEstimator"]], "navlie.batch.estimator.BatchEstimator": [[2, 2, 1, "", "solve"]], "navlie.batch.gaussian_mixtures": [[4, 1, 1, "", "GaussianMixtureResidual"], [5, 1, 1, "", "HessianSumMixtureResidual"], [6, 1, 1, "", "MaxMixtureResidual"], [7, 1, 1, "", "MaxSumMixtureResidual"], [8, 1, 1, "", "SumMixtureResidual"]], "navlie.batch.gaussian_mixtures.GaussianMixtureResidual": [[4, 2, 1, "", "evaluate"], [4, 2, 1, "", "evaluate_component_residuals"], [4, 2, 1, "", "jacobian_fd"], [4, 2, 1, "", "mix_errors"], [4, 2, 1, "", "mix_jacobians"], [4, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual": [[5, 2, 1, "", "evaluate"], [5, 2, 1, "", "evaluate_component_residuals"], [5, 2, 1, "", "get_normalization_constant"], [5, 2, 1, "", "jacobian_fd"], [5, 2, 1, "", "mix_errors"], [5, 2, 1, "", "mix_jacobians"], [5, 3, 1, "", "no_use_complex_numbers"], [5, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.MaxMixtureResidual": [[6, 2, 1, "", "evaluate"], [6, 2, 1, "", "evaluate_component_residuals"], [6, 2, 1, "", "jacobian_fd"], [6, 2, 1, "", "mix_errors"], [6, 2, 1, "", "mix_jacobians"], [6, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual": [[7, 2, 1, "", "compute_nonlinear_part"], [7, 3, 1, "", "damping_const"], [7, 2, 1, "", "evaluate"], [7, 2, 1, "", "evaluate_component_residuals"], [7, 2, 1, "", "jacobian_fd"], [7, 2, 1, "", "mix_errors"], [7, 2, 1, "", "mix_jacobians"], [7, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.SumMixtureResidual": [[8, 2, 1, "", "evaluate"], [8, 2, 1, "", "evaluate_component_residuals"], [8, 2, 1, "", "jacobian_fd"], [8, 2, 1, "", "mix_errors"], [8, 2, 1, "", "mix_jacobians"], [8, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.losses": [[10, 1, 1, "", "CauchyLoss"], [11, 1, 1, "", "L2Loss"], [12, 1, 1, "", "LossFunction"]], "navlie.batch.losses.CauchyLoss": [[10, 2, 1, "", "loss"], [10, 2, 1, "", "weight"]], "navlie.batch.losses.L2Loss": [[11, 2, 1, "", "loss"], [11, 2, 1, "", "weight"]], "navlie.batch.losses.LossFunction": [[12, 2, 1, "", "loss"], [12, 2, 1, "", "weight"]], "navlie.batch.problem": [[14, 1, 1, "", "OptimizationSummary"], [15, 1, 1, "", "Problem"]], "navlie.batch.problem.Problem": [[15, 2, 1, "", "add_residual"], [15, 2, 1, "", "add_variable"], [15, 2, 1, "", "compute_covariance"], [15, 2, 1, "", "compute_error_jac_cost"], [15, 2, 1, "", "get_covariance_block"], [15, 2, 1, "", "is_converged"], [15, 2, 1, "", "set_variables_constant"], [15, 2, 1, "", "solve"]], "navlie.batch.residuals": [[17, 1, 1, "", "MeasurementResidual"], [18, 1, 1, "", "PriorResidual"], [19, 1, 1, "", "ProcessResidual"], [20, 1, 1, "", "Residual"]], "navlie.batch.residuals.MeasurementResidual": [[17, 2, 1, "", "evaluate"], [17, 2, 1, "", "jacobian_fd"], [17, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.PriorResidual": [[18, 2, 1, "", "evaluate"], [18, 2, 1, "", "jacobian_fd"], [18, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.ProcessResidual": [[19, 2, 1, "", "evaluate"], [19, 2, 1, "", "jacobian_fd"], [19, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.Residual": [[20, 2, 1, "", "evaluate"], [20, 2, 1, "", "jacobian_fd"], [20, 2, 1, "", "sqrt_info_matrix"]], "navlie.bspline": [[22, 1, 1, "", "SE3Bspline"]], "navlie.bspline.SE3Bspline": [[22, 2, 1, "", "get_acceleration"], [22, 2, 1, "", "get_pose"], [22, 2, 1, "", "get_velocity"]], "navlie.composite": [[24, 1, 1, "", "CompositeInput"], [25, 1, 1, "", "CompositeMeasurement"], [26, 1, 1, "", "CompositeMeasurementModel"], [27, 1, 1, "", "CompositeProcessModel"], [28, 1, 1, "", "CompositeState"]], "navlie.composite.CompositeInput": [[24, 2, 1, "", "add_input"], [24, 2, 1, "", "copy"], [24, 3, 1, "", "covariance"], [24, 3, 1, "", "dof"], [24, 2, 1, "", "get_dof_by_id"], [24, 2, 1, "", "get_index_by_id"], [24, 2, 1, "", "get_input_by_id"], [24, 2, 1, "", "get_stamp_by_id"], [24, 2, 1, "", "plus"], [24, 2, 1, "", "remove_input_by_id"], [24, 2, 1, "", "set_input_by_id"], [24, 2, 1, "", "set_stamp_by_id"], [24, 2, 1, "", "set_stamp_for_all"], [24, 3, 1, "", "stamp"], [24, 3, 1, "", "state_id"], [24, 2, 1, "", "to_list"]], "navlie.composite.CompositeMeasurement": [[25, 2, 1, "", "minus"], [25, 3, 1, "", "model"], [25, 3, 1, "", "stamp"], [25, 3, 1, "", "state_id"], [25, 3, 1, "", "value"]], "navlie.composite.CompositeMeasurementModel": [[26, 2, 1, "", "covariance"], [26, 2, 1, "", "evaluate"], [26, 2, 1, "", "evaluate_with_jacobian"], [26, 2, 1, "", "jacobian"], [26, 2, 1, "", "jacobian_fd"], [26, 2, 1, "", "sqrt_information"]], "navlie.composite.CompositeProcessModel": [[27, 2, 1, "", "covariance"], [27, 2, 1, "", "evaluate"], [27, 2, 1, "", "evaluate_with_jacobian"], [27, 2, 1, "", "input_covariance"], [27, 2, 1, "", "input_jacobian_fd"], [27, 2, 1, "", "jacobian"], [27, 2, 1, "", "jacobian_fd"], [27, 2, 1, "", "sqrt_information"]], "navlie.composite.CompositeState": [[28, 2, 1, "", "add_state"], [28, 2, 1, "", "copy"], [28, 3, 1, "", "dof"], [28, 2, 1, "", "get_dof_by_id"], [28, 2, 1, "", "get_index_by_id"], [28, 2, 1, "", "get_matrix_block_by_ids"], [28, 2, 1, "", "get_slice_by_id"], [28, 2, 1, "", "get_slices"], [28, 2, 1, "", "get_stamp_by_id"], [28, 2, 1, "", "get_state_by_id"], [28, 2, 1, "", "get_value_by_id"], [28, 2, 1, "", "jacobian_from_blocks"], [28, 2, 1, "", "minus"], [28, 2, 1, "", "minus_jacobian"], [28, 2, 1, "", "minus_jacobian_fd"], [28, 2, 1, "", "plus"], [28, 2, 1, "", "plus_by_id"], [28, 2, 1, "", "plus_jacobian"], [28, 2, 1, "", "plus_jacobian_fd"], [28, 2, 1, "", "remove_state_by_id"], [28, 2, 1, "", "set_matrix_block_by_ids"], [28, 2, 1, "", "set_stamp_by_id"], [28, 2, 1, "", "set_stamp_for_all"], [28, 2, 1, "", "set_state_by_id"], [28, 2, 1, "", "set_value_by_id"], [28, 3, 1, "", "stamp"], [28, 3, 1, "", "state_id"], [28, 2, 1, "", "to_list"], [28, 3, 1, "", "value"]], "navlie.datagen": [[30, 1, 1, "", "DataGenerator"], [31, 4, 1, "", "generate_measurement"]], "navlie.datagen.DataGenerator": [[30, 2, 1, "", "add_measurement_model"], [30, 2, 1, "", "generate"]], "navlie.filters": [[33, 1, 1, "", "CubatureKalmanFilter"], [34, 1, 1, "", "ExtendedKalmanFilter"], [35, 1, 1, "", "GaussHermiteKalmanFilter"], [36, 1, 1, "", "GaussianSumFilter"], [37, 1, 1, "", "InteractingModelFilter"], [38, 1, 1, "", "IteratedKalmanFilter"], [39, 1, 1, "", "SigmaPointKalmanFilter"], [40, 1, 1, "", "UnscentedKalmanFilter"], [41, 4, 1, "", "check_outlier"], [42, 4, 1, "", "generate_sigmapoints"], [43, 4, 1, "", "mean_state"], [44, 4, 1, "", "run_filter"], [45, 4, 1, "", "run_gsf_filter"], [46, 4, 1, "", "run_imm_filter"]], "navlie.filters.CubatureKalmanFilter": [[33, 2, 1, "", "correct"], [33, 3, 1, "", "iterate_mean"], [33, 3, 1, "", "method"], [33, 2, 1, "", "predict"], [33, 3, 1, "", "process_model"], [33, 3, 1, "", "reject_outliers"]], "navlie.filters.ExtendedKalmanFilter": [[34, 2, 1, "", "correct"], [34, 2, 1, "", "predict"], [34, 3, 1, "", "process_model"], [34, 3, 1, "", "reject_outliers"]], "navlie.filters.GaussHermiteKalmanFilter": [[35, 2, 1, "", "correct"], [35, 3, 1, "", "iterate_mean"], [35, 3, 1, "", "method"], [35, 2, 1, "", "predict"], [35, 3, 1, "", "process_model"], [35, 3, 1, "", "reject_outliers"]], "navlie.filters.GaussianSumFilter": [[36, 2, 1, "", "correct"], [36, 2, 1, "", "predict"], [36, 3, 1, "", "process_model"], [36, 3, 1, "", "reject_outliers"]], "navlie.filters.InteractingModelFilter": [[37, 2, 1, "", "correct"], [37, 2, 1, "", "interaction"], [37, 2, 1, "", "predict"]], "navlie.filters.IteratedKalmanFilter": [[38, 2, 1, "", "correct"], [38, 3, 1, "", "line_search"], [38, 3, 1, "", "max_iters"], [38, 2, 1, "", "predict"], [38, 3, 1, "", "process_model"], [38, 3, 1, "", "reject_outliers"], [38, 3, 1, "", "step_tol"]], "navlie.filters.SigmaPointKalmanFilter": [[39, 2, 1, "", "correct"], [39, 3, 1, "", "iterate_mean"], [39, 3, 1, "", "method"], [39, 2, 1, "", "predict"], [39, 3, 1, "", "process_model"], [39, 3, 1, "", "reject_outliers"]], "navlie.filters.UnscentedKalmanFilter": [[40, 2, 1, "", "correct"], [40, 3, 1, "", "iterate_mean"], [40, 3, 1, "", "method"], [40, 2, 1, "", "predict"], [40, 3, 1, "", "process_model"], [40, 3, 1, "", "reject_outliers"]], "navlie.lib": [[48, 0, 0, "-", "camera"], [51, 0, 0, "-", "datasets"], [56, 0, 0, "-", "imu"], [72, 0, 0, "-", "models"], [95, 0, 0, "-", "preintegration"], [107, 0, 0, "-", "states"]], "navlie.lib.camera": [[49, 1, 1, "", "PinholeCamera"], [50, 1, 1, "", "PoseMatrix"]], "navlie.lib.camera.PinholeCamera": [[49, 5, 1, "", "R_normalized_image_coords"], [49, 2, 1, "", "copy"], [49, 2, 1, "", "evaluate"], [49, 2, 1, "", "get_cam_to_enu"], [49, 5, 1, "", "intrinsics"], [49, 2, 1, "", "is_landmark_in_front_of_cam"], [49, 2, 1, "", "is_measurement_valid"], [49, 2, 1, "", "project"], [49, 2, 1, "", "resolve_landmark_in_cam_frame"], [49, 5, 1, "", "sigma_normalized_image_coords"], [49, 2, 1, "", "to_normalized_coords"], [49, 2, 1, "", "to_pixel_coors"]], "navlie.lib.camera.PoseMatrix": [[50, 5, 1, "", "attitude"], [50, 2, 1, "", "copy"], [50, 5, 1, "", "position"]], "navlie.lib.datasets": [[52, 1, 1, "", "SimulatedInertialGPSDataset"], [53, 1, 1, "", "SimulatedInertialLandmarkDataset"], [54, 1, 1, "", "SimulatedPoseRangingDataset"], [55, 4, 1, "", "generate_landmark_positions"]], "navlie.lib.datasets.SimulatedInertialGPSDataset": [[52, 2, 1, "", "get_ground_truth"], [52, 2, 1, "", "get_input_data"], [52, 2, 1, "", "get_measurement_data"]], "navlie.lib.datasets.SimulatedInertialLandmarkDataset": [[53, 2, 1, "", "get_ground_truth"], [53, 2, 1, "", "get_groundtruth_landmarks"], [53, 2, 1, "", "get_input_data"], [53, 2, 1, "", "get_measurement_data"]], "navlie.lib.datasets.SimulatedPoseRangingDataset": [[54, 2, 1, "", "get_ground_truth"], [54, 2, 1, "", "get_input_data"], [54, 2, 1, "", "get_measurement_data"]], "navlie.lib.imu": [[57, 4, 1, "", "G_matrix"], [58, 4, 1, "", "G_matrix_inv"], [59, 1, 1, "", "IMU"], [60, 1, 1, "", "IMUKinematics"], [61, 1, 1, "", "IMUState"], [62, 4, 1, "", "L_matrix"], [63, 4, 1, "", "M_matrix"], [64, 4, 1, "", "N_matrix"], [65, 4, 1, "", "U_matrix"], [66, 4, 1, "", "U_matrix_inv"], [67, 4, 1, "", "U_tilde_matrix"], [68, 4, 1, "", "adjoint_IE3"], [69, 4, 1, "", "delta_matrix"], [70, 4, 1, "", "get_unbiased_imu"], [71, 4, 1, "", "inverse_IE3"]], "navlie.lib.imu.IMU": [[59, 3, 1, "", "accel"], [59, 3, 1, "", "bias_accel_walk"], [59, 3, 1, "", "bias_gyro_walk"], [59, 2, 1, "", "copy"], [59, 3, 1, "", "covariance"], [59, 3, 1, "", "dof"], [59, 3, 1, "", "gyro"], [59, 2, 1, "", "plus"], [59, 2, 1, "", "random"], [59, 3, 1, "", "stamp"], [59, 3, 1, "", "state_id"]], "navlie.lib.imu.IMUKinematics": [[60, 2, 1, "", "covariance"], [60, 2, 1, "", "evaluate"], [60, 2, 1, "", "evaluate_with_jacobian"], [60, 2, 1, "", "input_covariance"], [60, 2, 1, "", "input_jacobian_fd"], [60, 2, 1, "", "jacobian"], [60, 2, 1, "", "jacobian_fd"], [60, 2, 1, "", "sqrt_information"]], "navlie.lib.imu.IMUState": [[61, 2, 1, "", "add_state"], [61, 5, 1, "", "attitude"], [61, 5, 1, "", "bias"], [61, 5, 1, "", "bias_accel"], [61, 5, 1, "", "bias_gyro"], [61, 2, 1, "", "copy"], [61, 5, 1, "", "direction"], [61, 3, 1, "", "dof"], [61, 2, 1, "", "get_dof_by_id"], [61, 2, 1, "", "get_index_by_id"], [61, 2, 1, "", "get_matrix_block_by_ids"], [61, 2, 1, "", "get_slice_by_id"], [61, 2, 1, "", "get_slices"], [61, 2, 1, "", "get_stamp_by_id"], [61, 2, 1, "", "get_state_by_id"], [61, 2, 1, "", "get_value_by_id"], [61, 2, 1, "", "jacobian_from_blocks"], [61, 2, 1, "", "minus"], [61, 2, 1, "", "minus_jacobian"], [61, 2, 1, "", "minus_jacobian_fd"], [61, 5, 1, "", "nav_state"], [61, 2, 1, "", "plus"], [61, 2, 1, "", "plus_by_id"], [61, 2, 1, "", "plus_jacobian"], [61, 2, 1, "", "plus_jacobian_fd"], [61, 5, 1, "", "pose"], [61, 5, 1, "", "position"], [61, 2, 1, "", "remove_state_by_id"], [61, 2, 1, "", "set_matrix_block_by_ids"], [61, 2, 1, "", "set_stamp_by_id"], [61, 2, 1, "", "set_stamp_for_all"], [61, 2, 1, "", "set_state_by_id"], [61, 2, 1, "", "set_value_by_id"], [61, 3, 1, "", "stamp"], [61, 3, 1, "", "state_id"], [61, 2, 1, "", "to_list"], [61, 3, 1, "", "value"], [61, 5, 1, "", "velocity"]], "navlie.lib.models": [[73, 1, 1, "", "AbsolutePosition"], [74, 1, 1, "", "AbsoluteVelocity"], [75, 1, 1, "", "Altitude"], [76, 1, 1, "", "BodyFrameVelocity"], [77, 1, 1, "", "CameraProjection"], [78, 1, 1, "", "DoubleIntegrator"], [79, 1, 1, "", "DoubleIntegratorWithBias"], [80, 1, 1, "", "GlobalPosition"], [81, 1, 1, "", "Gravitometer"], [82, 1, 1, "", "InvariantMeasurement"], [83, 1, 1, "", "InvariantPointRelativePosition"], [84, 1, 1, "", "LinearMeasurement"], [85, 1, 1, "", "Magnetometer"], [86, 1, 1, "", "OneDimensionalPositionVelocityRange"], [87, 1, 1, "", "PointRelativePosition"], [88, 1, 1, "", "PointRelativePositionSLAM"], [89, 1, 1, "", "RangePointToAnchor"], [90, 1, 1, "", "RangePoseToAnchor"], [91, 1, 1, "", "RangePoseToPose"], [92, 1, 1, "", "RangeRelativePose"], [93, 1, 1, "", "RelativeBodyFrameVelocity"], [94, 1, 1, "", "SingleIntegrator"]], "navlie.lib.models.AbsolutePosition": [[73, 2, 1, "", "covariance"], [73, 2, 1, "", "evaluate"], [73, 2, 1, "", "evaluate_with_jacobian"], [73, 2, 1, "", "jacobian"], [73, 2, 1, "", "jacobian_fd"], [73, 2, 1, "", "sqrt_information"]], "navlie.lib.models.AbsoluteVelocity": [[74, 2, 1, "", "covariance"], [74, 2, 1, "", "evaluate"], [74, 2, 1, "", "evaluate_with_jacobian"], [74, 2, 1, "", "jacobian"], [74, 2, 1, "", "jacobian_fd"], [74, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Altitude": [[75, 2, 1, "", "covariance"], [75, 2, 1, "", "evaluate"], [75, 2, 1, "", "evaluate_with_jacobian"], [75, 2, 1, "", "jacobian"], [75, 2, 1, "", "jacobian_fd"], [75, 2, 1, "", "sqrt_information"]], "navlie.lib.models.BodyFrameVelocity": [[76, 2, 1, "", "covariance"], [76, 2, 1, "", "evaluate"], [76, 2, 1, "", "evaluate_with_jacobian"], [76, 2, 1, "", "input_covariance"], [76, 2, 1, "", "input_jacobian_fd"], [76, 2, 1, "", "jacobian"], [76, 2, 1, "", "jacobian_fd"], [76, 2, 1, "", "sqrt_information"]], "navlie.lib.models.CameraProjection": [[77, 2, 1, "", "covariance"], [77, 2, 1, "", "evaluate"], [77, 2, 1, "", "evaluate_with_jacobian"], [77, 2, 1, "", "jacobian"], [77, 2, 1, "", "jacobian_fd"], [77, 2, 1, "", "sqrt_information"]], "navlie.lib.models.DoubleIntegrator": [[78, 2, 1, "", "covariance"], [78, 2, 1, "", "evaluate"], [78, 2, 1, "", "evaluate_with_jacobian"], [78, 2, 1, "", "input_covariance"], [78, 2, 1, "", "input_jacobian"], [78, 2, 1, "", "input_jacobian_fd"], [78, 2, 1, "", "jacobian"], [78, 2, 1, "", "jacobian_fd"], [78, 2, 1, "", "sqrt_information"]], "navlie.lib.models.DoubleIntegratorWithBias": [[79, 2, 1, "", "covariance"], [79, 2, 1, "", "evaluate"], [79, 2, 1, "", "evaluate_with_jacobian"], [79, 2, 1, "", "input_covariance"], [79, 2, 1, "", "input_jacobian"], [79, 2, 1, "", "input_jacobian_fd"], [79, 2, 1, "", "jacobian"], [79, 2, 1, "", "jacobian_fd"], [79, 2, 1, "", "sqrt_information"]], "navlie.lib.models.GlobalPosition": [[80, 2, 1, "", "covariance"], [80, 2, 1, "", "evaluate"], [80, 2, 1, "", "evaluate_with_jacobian"], [80, 2, 1, "", "jacobian"], [80, 2, 1, "", "jacobian_fd"], [80, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Gravitometer": [[81, 2, 1, "", "covariance"], [81, 2, 1, "", "evaluate"], [81, 2, 1, "", "evaluate_with_jacobian"], [81, 2, 1, "", "jacobian"], [81, 2, 1, "", "jacobian_fd"], [81, 2, 1, "", "sqrt_information"]], "navlie.lib.models.InvariantMeasurement": [[82, 2, 1, "", "minus"], [82, 3, 1, "", "model"], [82, 3, 1, "", "stamp"], [82, 3, 1, "", "state_id"], [82, 3, 1, "", "value"]], "navlie.lib.models.InvariantPointRelativePosition": [[83, 2, 1, "", "covariance"], [83, 2, 1, "", "evaluate"], [83, 2, 1, "", "evaluate_with_jacobian"], [83, 2, 1, "", "jacobian"], [83, 2, 1, "", "jacobian_fd"], [83, 2, 1, "", "sqrt_information"]], "navlie.lib.models.LinearMeasurement": [[84, 2, 1, "", "covariance"], [84, 2, 1, "", "evaluate"], [84, 2, 1, "", "evaluate_with_jacobian"], [84, 2, 1, "", "jacobian"], [84, 2, 1, "", "jacobian_fd"], [84, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Magnetometer": [[85, 2, 1, "", "covariance"], [85, 2, 1, "", "evaluate"], [85, 2, 1, "", "evaluate_with_jacobian"], [85, 2, 1, "", "jacobian"], [85, 2, 1, "", "jacobian_fd"], [85, 2, 1, "", "sqrt_information"]], "navlie.lib.models.OneDimensionalPositionVelocityRange": [[86, 2, 1, "", "covariance"], [86, 2, 1, "", "evaluate"], [86, 2, 1, "", "evaluate_with_jacobian"], [86, 2, 1, "", "jacobian"], [86, 2, 1, "", "jacobian_fd"], [86, 2, 1, "", "sqrt_information"]], "navlie.lib.models.PointRelativePosition": [[87, 2, 1, "", "covariance"], [87, 2, 1, "", "evaluate"], [87, 2, 1, "", "evaluate_with_jacobian"], [87, 2, 1, "", "jacobian"], [87, 2, 1, "", "jacobian_fd"], [87, 2, 1, "", "sqrt_information"]], "navlie.lib.models.PointRelativePositionSLAM": [[88, 2, 1, "", "covariance"], [88, 2, 1, "", "evaluate"], [88, 2, 1, "", "evaluate_with_jacobian"], [88, 2, 1, "", "jacobian"], [88, 2, 1, "", "jacobian_fd"], [88, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePointToAnchor": [[89, 2, 1, "", "covariance"], [89, 2, 1, "", "evaluate"], [89, 2, 1, "", "evaluate_with_jacobian"], [89, 2, 1, "", "jacobian"], [89, 2, 1, "", "jacobian_fd"], [89, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePoseToAnchor": [[90, 2, 1, "", "covariance"], [90, 2, 1, "", "evaluate"], [90, 2, 1, "", "evaluate_with_jacobian"], [90, 2, 1, "", "jacobian"], [90, 2, 1, "", "jacobian_fd"], [90, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePoseToPose": [[91, 2, 1, "", "covariance"], [91, 2, 1, "", "evaluate"], [91, 2, 1, "", "evaluate_with_jacobian"], [91, 2, 1, "", "jacobian"], [91, 2, 1, "", "jacobian_fd"], [91, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangeRelativePose": [[92, 2, 1, "", "covariance"], [92, 2, 1, "", "evaluate"], [92, 2, 1, "", "evaluate_with_jacobian"], [92, 2, 1, "", "jacobian"], [92, 2, 1, "", "jacobian_fd"], [92, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RelativeBodyFrameVelocity": [[93, 2, 1, "", "covariance"], [93, 2, 1, "", "evaluate"], [93, 2, 1, "", "evaluate_with_jacobian"], [93, 2, 1, "", "input_covariance"], [93, 2, 1, "", "input_jacobian_fd"], [93, 2, 1, "", "jacobian"], [93, 2, 1, "", "jacobian_fd"], [93, 2, 1, "", "sqrt_information"]], "navlie.lib.models.SingleIntegrator": [[94, 2, 1, "", "covariance"], [94, 2, 1, "", "evaluate"], [94, 2, 1, "", "evaluate_with_jacobian"], [94, 2, 1, "", "input_covariance"], [94, 2, 1, "", "input_jacobian_fd"], [94, 2, 1, "", "jacobian"], [94, 2, 1, "", "jacobian_fd"], [94, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration": [[96, 1, 1, "", "AngularVelocityIncrement"], [97, 1, 1, "", "BodyVelocityIncrement"], [98, 1, 1, "", "IMUIncrement"], [99, 1, 1, "", "LinearIncrement"], [100, 1, 1, "", "PreintegratedAngularVelocity"], [101, 1, 1, "", "PreintegratedBodyVelocity"], [102, 1, 1, "", "PreintegratedIMUKinematics"], [103, 1, 1, "", "PreintegratedLinearModel"], [104, 1, 1, "", "PreintegratedWheelOdometry"], [105, 1, 1, "", "RelativeMotionIncrement"], [106, 1, 1, "", "WheelOdometryIncrement"]], "navlie.lib.preintegration.AngularVelocityIncrement": [[96, 2, 1, "", "copy"], [96, 3, 1, "", "covariance"], [96, 3, 1, "", "dof"], [96, 2, 1, "", "increment"], [96, 2, 1, "", "new"], [96, 2, 1, "", "plus"], [96, 5, 1, "", "stamp"], [96, 3, 1, "", "stamps"], [96, 3, 1, "", "state_id"], [96, 2, 1, "", "symmetrize"], [96, 2, 1, "", "update_bias"], [96, 5, 1, "", "value"]], "navlie.lib.preintegration.BodyVelocityIncrement": [[97, 2, 1, "", "copy"], [97, 3, 1, "", "covariance"], [97, 3, 1, "", "dof"], [97, 2, 1, "", "increment"], [97, 2, 1, "", "new"], [97, 2, 1, "", "plus"], [97, 5, 1, "", "stamp"], [97, 3, 1, "", "stamps"], [97, 3, 1, "", "state_id"], [97, 2, 1, "", "symmetrize"], [97, 2, 1, "", "update_bias"], [97, 5, 1, "", "value"]], "navlie.lib.preintegration.IMUIncrement": [[98, 5, 1, "", "accel_bias"], [98, 3, 1, "", "bias_jacobian"], [98, 2, 1, "", "copy"], [98, 3, 1, "", "covariance"], [98, 3, 1, "", "dof"], [98, 3, 1, "", "gravity"], [98, 5, 1, "", "gyro_bias"], [98, 2, 1, "", "increment"], [98, 3, 1, "", "input_covariance"], [98, 2, 1, "", "new"], [98, 3, 1, "", "new_bias"], [98, 3, 1, "", "original_bias"], [98, 3, 1, "", "original_value"], [98, 2, 1, "", "plus"], [98, 5, 1, "", "stamp"], [98, 3, 1, "", "stamps"], [98, 3, 1, "", "state_id"], [98, 2, 1, "", "symmetrize"], [98, 2, 1, "", "update_bias"], [98, 5, 1, "", "value"]], "navlie.lib.preintegration.LinearIncrement": [[99, 3, 1, "", "bias_jacobian"], [99, 2, 1, "", "copy"], [99, 3, 1, "", "covariance"], [99, 3, 1, "", "dof"], [99, 2, 1, "", "increment"], [99, 2, 1, "", "new"], [99, 3, 1, "", "new_bias"], [99, 3, 1, "", "original_bias"], [99, 3, 1, "", "original_value"], [99, 2, 1, "", "plus"], [99, 5, 1, "", "stamp"], [99, 3, 1, "", "stamps"], [99, 3, 1, "", "state_id"], [99, 2, 1, "", "symmetrize"], [99, 2, 1, "", "update_bias"], [99, 5, 1, "", "value"]], "navlie.lib.preintegration.PreintegratedAngularVelocity": [[100, 2, 1, "", "covariance"], [100, 2, 1, "", "evaluate"], [100, 2, 1, "", "evaluate_with_jacobian"], [100, 2, 1, "", "input_covariance"], [100, 2, 1, "", "input_jacobian_fd"], [100, 2, 1, "", "jacobian"], [100, 2, 1, "", "jacobian_fd"], [100, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedBodyVelocity": [[101, 2, 1, "", "covariance"], [101, 2, 1, "", "evaluate"], [101, 2, 1, "", "evaluate_with_jacobian"], [101, 2, 1, "", "input_covariance"], [101, 2, 1, "", "input_jacobian_fd"], [101, 2, 1, "", "jacobian"], [101, 2, 1, "", "jacobian_fd"], [101, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedIMUKinematics": [[102, 2, 1, "", "covariance"], [102, 2, 1, "", "evaluate"], [102, 2, 1, "", "evaluate_with_jacobian"], [102, 2, 1, "", "input_covariance"], [102, 2, 1, "", "input_jacobian_fd"], [102, 2, 1, "", "jacobian"], [102, 2, 1, "", "jacobian_fd"], [102, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedLinearModel": [[103, 2, 1, "", "covariance"], [103, 2, 1, "", "evaluate"], [103, 2, 1, "", "evaluate_with_jacobian"], [103, 2, 1, "", "input_covariance"], [103, 2, 1, "", "input_jacobian_fd"], [103, 2, 1, "", "jacobian"], [103, 2, 1, "", "jacobian_fd"], [103, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedWheelOdometry": [[104, 2, 1, "", "covariance"], [104, 2, 1, "", "evaluate"], [104, 2, 1, "", "evaluate_with_jacobian"], [104, 2, 1, "", "input_covariance"], [104, 2, 1, "", "input_jacobian_fd"], [104, 2, 1, "", "jacobian"], [104, 2, 1, "", "jacobian_fd"], [104, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.RelativeMotionIncrement": [[105, 2, 1, "", "copy"], [105, 3, 1, "", "covariance"], [105, 3, 1, "", "dof"], [105, 2, 1, "", "increment"], [105, 2, 1, "", "new"], [105, 2, 1, "", "plus"], [105, 5, 1, "", "stamp"], [105, 3, 1, "", "stamps"], [105, 3, 1, "", "state_id"], [105, 2, 1, "", "symmetrize"], [105, 2, 1, "", "update_bias"]], "navlie.lib.preintegration.WheelOdometryIncrement": [[106, 2, 1, "", "copy"], [106, 3, 1, "", "covariance"], [106, 3, 1, "", "dof"], [106, 2, 1, "", "increment"], [106, 2, 1, "", "new"], [106, 3, 1, "", "original_value"], [106, 2, 1, "", "plus"], [106, 5, 1, "", "stamp"], [106, 3, 1, "", "stamps"], [106, 3, 1, "", "state_id"], [106, 2, 1, "", "symmetrize"], [106, 2, 1, "", "update_bias"], [106, 5, 1, "", "value"]], "navlie.lib.states": [[108, 1, 1, "", "MatrixLieGroupState"], [109, 1, 1, "", "MixtureState"], [110, 1, 1, "", "SE23State"], [111, 1, 1, "", "SE2State"], [112, 1, 1, "", "SE3State"], [113, 1, 1, "", "SL3State"], [114, 1, 1, "", "SO2State"], [115, 1, 1, "", "SO3State"], [116, 1, 1, "", "StampedValue"], [117, 1, 1, "", "VectorInput"], [118, 1, 1, "", "VectorState"]], "navlie.lib.states.MatrixLieGroupState": [[108, 5, 1, "", "attitude"], [108, 2, 1, "", "copy"], [108, 3, 1, "", "direction"], [108, 3, 1, "", "dof"], [108, 2, 1, "", "dot"], [108, 3, 1, "", "group"], [108, 2, 1, "", "jacobian_from_blocks"], [108, 2, 1, "", "minus"], [108, 2, 1, "", "minus_jacobian"], [108, 2, 1, "", "minus_jacobian_fd"], [108, 2, 1, "", "plus"], [108, 2, 1, "", "plus_jacobian"], [108, 2, 1, "", "plus_jacobian_fd"], [108, 5, 1, "", "position"], [108, 3, 1, "", "stamp"], [108, 3, 1, "", "state_id"], [108, 3, 1, "", "value"], [108, 5, 1, "", "velocity"]], "navlie.lib.states.MixtureState": [[109, 2, 1, "", "copy"], [109, 3, 1, "", "model_probabilities"], [109, 3, 1, "", "model_states"], [109, 5, 1, "", "stamp"]], "navlie.lib.states.SE23State": [[110, 5, 1, "", "attitude"], [110, 2, 1, "", "copy"], [110, 3, 1, "", "direction"], [110, 3, 1, "", "dof"], [110, 2, 1, "", "dot"], [110, 3, 1, "", "group"], [110, 2, 1, "", "jacobian_from_blocks"], [110, 2, 1, "", "minus"], [110, 2, 1, "", "minus_jacobian"], [110, 2, 1, "", "minus_jacobian_fd"], [110, 2, 1, "", "plus"], [110, 2, 1, "", "plus_jacobian"], [110, 2, 1, "", "plus_jacobian_fd"], [110, 5, 1, "", "pose"], [110, 5, 1, "", "position"], [110, 2, 1, "", "random"], [110, 3, 1, "", "stamp"], [110, 3, 1, "", "state_id"], [110, 3, 1, "", "value"], [110, 5, 1, "", "velocity"]], "navlie.lib.states.SE2State": [[111, 5, 1, "", "attitude"], [111, 2, 1, "", "copy"], [111, 3, 1, "", "direction"], [111, 3, 1, "", "dof"], [111, 2, 1, "", "dot"], [111, 3, 1, "", "group"], [111, 2, 1, "", "jacobian_from_blocks"], [111, 2, 1, "", "minus"], [111, 2, 1, "", "minus_jacobian"], [111, 2, 1, "", "minus_jacobian_fd"], [111, 2, 1, "", "plus"], [111, 2, 1, "", "plus_jacobian"], [111, 2, 1, "", "plus_jacobian_fd"], [111, 5, 1, "", "pose"], [111, 5, 1, "", "position"], [111, 2, 1, "", "random"], [111, 3, 1, "", "stamp"], [111, 3, 1, "", "state_id"], [111, 3, 1, "", "value"], [111, 5, 1, "", "velocity"]], "navlie.lib.states.SE3State": [[112, 5, 1, "", "attitude"], [112, 2, 1, "", "copy"], [112, 3, 1, "", "direction"], [112, 3, 1, "", "dof"], [112, 2, 1, "", "dot"], [112, 2, 1, "", "from_ros"], [112, 3, 1, "", "group"], [112, 2, 1, "", "jacobian_from_blocks"], [112, 2, 1, "", "minus"], [112, 2, 1, "", "minus_jacobian"], [112, 2, 1, "", "minus_jacobian_fd"], [112, 2, 1, "", "plus"], [112, 2, 1, "", "plus_jacobian"], [112, 2, 1, "", "plus_jacobian_fd"], [112, 5, 1, "", "position"], [112, 2, 1, "", "random"], [112, 3, 1, "", "stamp"], [112, 3, 1, "", "state_id"], [112, 2, 1, "", "to_ros"], [112, 3, 1, "", "value"], [112, 5, 1, "", "velocity"]], "navlie.lib.states.SL3State": [[113, 5, 1, "", "attitude"], [113, 2, 1, "", "copy"], [113, 3, 1, "", "direction"], [113, 3, 1, "", "dof"], [113, 2, 1, "", "dot"], [113, 3, 1, "", "group"], [113, 2, 1, "", "jacobian_from_blocks"], [113, 2, 1, "", "minus"], [113, 2, 1, "", "minus_jacobian"], [113, 2, 1, "", "minus_jacobian_fd"], [113, 2, 1, "", "plus"], [113, 2, 1, "", "plus_jacobian"], [113, 2, 1, "", "plus_jacobian_fd"], [113, 5, 1, "", "position"], [113, 3, 1, "", "stamp"], [113, 3, 1, "", "state_id"], [113, 3, 1, "", "value"], [113, 5, 1, "", "velocity"]], "navlie.lib.states.SO2State": [[114, 5, 1, "", "attitude"], [114, 2, 1, "", "copy"], [114, 3, 1, "", "direction"], [114, 3, 1, "", "dof"], [114, 2, 1, "", "dot"], [114, 3, 1, "", "group"], [114, 2, 1, "", "jacobian_from_blocks"], [114, 2, 1, "", "minus"], [114, 2, 1, "", "minus_jacobian"], [114, 2, 1, "", "minus_jacobian_fd"], [114, 2, 1, "", "plus"], [114, 2, 1, "", "plus_jacobian"], [114, 2, 1, "", "plus_jacobian_fd"], [114, 5, 1, "", "position"], [114, 2, 1, "", "random"], [114, 3, 1, "", "stamp"], [114, 3, 1, "", "state_id"], [114, 3, 1, "", "value"], [114, 5, 1, "", "velocity"]], "navlie.lib.states.SO3State": [[115, 5, 1, "", "attitude"], [115, 2, 1, "", "copy"], [115, 3, 1, "", "direction"], [115, 3, 1, "", "dof"], [115, 2, 1, "", "dot"], [115, 2, 1, "", "from_ros"], [115, 3, 1, "", "group"], [115, 2, 1, "", "jacobian_from_blocks"], [115, 2, 1, "", "minus"], [115, 2, 1, "", "minus_jacobian"], [115, 2, 1, "", "minus_jacobian_fd"], [115, 2, 1, "", "plus"], [115, 2, 1, "", "plus_jacobian"], [115, 2, 1, "", "plus_jacobian_fd"], [115, 5, 1, "", "position"], [115, 2, 1, "", "random"], [115, 3, 1, "", "stamp"], [115, 3, 1, "", "state_id"], [115, 2, 1, "", "to_ros"], [115, 3, 1, "", "value"], [115, 5, 1, "", "velocity"]], "navlie.lib.states.StampedValue": [[116, 2, 1, "", "copy"], [116, 3, 1, "", "covariance"], [116, 3, 1, "", "dof"], [116, 2, 1, "", "plus"], [116, 3, 1, "", "stamp"], [116, 3, 1, "", "state_id"], [116, 3, 1, "", "value"]], "navlie.lib.states.VectorInput": [[117, 2, 1, "", "copy"], [117, 3, 1, "", "covariance"], [117, 3, 1, "", "dof"], [117, 2, 1, "", "plus"], [117, 3, 1, "", "stamp"], [117, 3, 1, "", "state_id"], [117, 3, 1, "", "value"]], "navlie.lib.states.VectorState": [[118, 2, 1, "", "copy"], [118, 3, 1, "", "dof"], [118, 2, 1, "", "minus"], [118, 2, 1, "", "minus_jacobian"], [118, 2, 1, "", "minus_jacobian_fd"], [118, 2, 1, "", "plus"], [118, 2, 1, "", "plus_jacobian"], [118, 2, 1, "", "plus_jacobian_fd"], [118, 3, 1, "", "stamp"], [118, 3, 1, "", "state_id"], [118, 3, 1, "", "value"]], "navlie.types": [[120, 1, 1, "", "Dataset"], [121, 1, 1, "", "Input"], [122, 1, 1, "", "Measurement"], [123, 1, 1, "", "MeasurementModel"], [124, 1, 1, "", "ProcessModel"], [125, 1, 1, "", "State"], [126, 1, 1, "", "StateWithCovariance"]], "navlie.types.Dataset": [[120, 2, 1, "", "get_ground_truth"], [120, 2, 1, "", "get_input_data"], [120, 2, 1, "", "get_measurement_data"]], "navlie.types.Input": [[121, 2, 1, "", "copy"], [121, 3, 1, "", "covariance"], [121, 3, 1, "", "dof"], [121, 2, 1, "", "plus"], [121, 3, 1, "", "stamp"], [121, 3, 1, "", "state_id"]], "navlie.types.Measurement": [[122, 2, 1, "", "minus"], [122, 3, 1, "", "model"], [122, 3, 1, "", "stamp"], [122, 3, 1, "", "state_id"], [122, 3, 1, "", "value"]], "navlie.types.MeasurementModel": [[123, 2, 1, "", "covariance"], [123, 2, 1, "", "evaluate"], [123, 2, 1, "", "evaluate_with_jacobian"], [123, 2, 1, "", "jacobian"], [123, 2, 1, "", "jacobian_fd"], [123, 2, 1, "", "sqrt_information"]], "navlie.types.ProcessModel": [[124, 2, 1, "", "covariance"], [124, 2, 1, "", "evaluate"], [124, 2, 1, "", "evaluate_with_jacobian"], [124, 2, 1, "", "input_covariance"], [124, 2, 1, "", "input_jacobian_fd"], [124, 2, 1, "", "jacobian"], [124, 2, 1, "", "jacobian_fd"], [124, 2, 1, "", "sqrt_information"]], "navlie.types.State": [[125, 2, 1, "", "copy"], [125, 3, 1, "", "dof"], [125, 2, 1, "", "minus"], [125, 2, 1, "", "minus_jacobian"], [125, 2, 1, "", "minus_jacobian_fd"], [125, 2, 1, "", "plus"], [125, 2, 1, "", "plus_jacobian"], [125, 2, 1, "", "plus_jacobian_fd"], [125, 3, 1, "", "stamp"], [125, 3, 1, "", "state_id"], [125, 3, 1, "", "value"]], "navlie.types.StateWithCovariance": [[126, 2, 1, "", "copy"], [126, 3, 1, "", "covariance"], [126, 5, 1, "", "stamp"], [126, 3, 1, "", "state"], [126, 2, 1, "", "symmetrize"]], "navlie.utils": [[128, 0, 0, "-", "alignment"], [132, 0, 0, "-", "common"], [147, 0, 0, "-", "mixture"], [152, 0, 0, "-", "plot"]], "navlie.utils.alignment": [[129, 4, 1, "", "associate_and_align_trajectories"], [130, 4, 1, "", "evo_traj_to_state_list"], [131, 4, 1, "", "state_list_to_evo_traj"]], "navlie.utils.common": [[133, 1, 1, "", "GaussianResult"], [134, 1, 1, "", "GaussianResultList"], [135, 1, 1, "", "MixtureResult"], [136, 1, 1, "", "MixtureResultList"], [137, 1, 1, "", "MonteCarloResult"], [138, 4, 1, "", "associate_stamps"], [139, 4, 1, "", "find_nearest_stamp_idx"], [140, 4, 1, "", "jacobian"], [141, 4, 1, "", "load_tum_trajectory"], [142, 4, 1, "", "monte_carlo"], [143, 4, 1, "", "randvec"], [144, 4, 1, "", "schedule_sequential_measurements"], [145, 4, 1, "", "state_interp"], [146, 4, 1, "", "van_loans"]], "navlie.utils.common.GaussianResult": [[133, 3, 1, "", "covariance"], [133, 3, 1, "", "ees"], [133, 3, 1, "", "error"], [133, 3, 1, "", "md"], [133, 3, 1, "", "nees"], [133, 3, 1, "", "rmse"], [133, 3, 1, "", "stamp"], [133, 3, 1, "", "state"], [133, 3, 1, "", "state_true"], [133, 3, 1, "", "three_sigma"]], "navlie.utils.common.GaussianResultList": [[134, 3, 1, "", "covariance"], [134, 3, 1, "", "dof"], [134, 3, 1, "", "ees"], [134, 3, 1, "", "error"], [134, 2, 1, "", "from_estimates"], [134, 3, 1, "", "md"], [134, 3, 1, "", "nees"], [134, 2, 1, "", "nees_lower_bound"], [134, 2, 1, "", "nees_upper_bound"], [134, 3, 1, "", "rmse"], [134, 3, 1, "", "stamp"], [134, 3, 1, "", "state"], [134, 3, 1, "", "state_true"], [134, 3, 1, "", "three_sigma"], [134, 3, 1, "", "value"], [134, 3, 1, "", "value_true"]], "navlie.utils.common.MixtureResult": [[135, 3, 1, "", "covariance"], [135, 3, 1, "", "ees"], [135, 3, 1, "", "error"], [135, 3, 1, "", "md"], [135, 3, 1, "", "model_probabilities"], [135, 3, 1, "", "nees"], [135, 3, 1, "", "rmse"], [135, 3, 1, "", "stamp"], [135, 3, 1, "", "state"], [135, 3, 1, "", "state_true"], [135, 3, 1, "", "three_sigma"]], "navlie.utils.common.MixtureResultList": [[136, 3, 1, "", "covariance"], [136, 3, 1, "", "dof"], [136, 3, 1, "", "ees"], [136, 3, 1, "", "error"], [136, 2, 1, "", "from_estimates"], [136, 3, 1, "", "md"], [136, 3, 1, "", "model_probabilities"], [136, 3, 1, "", "nees"], [136, 2, 1, "", "nees_lower_bound"], [136, 2, 1, "", "nees_upper_bound"], [136, 3, 1, "", "rmse"], [136, 3, 1, "", "stamp"], [136, 3, 1, "", "state"], [136, 3, 1, "", "state_true"], [136, 3, 1, "", "three_sigma"], [136, 3, 1, "", "value"], [136, 3, 1, "", "value_true"]], "navlie.utils.common.MonteCarloResult": [[137, 3, 1, "", "average_ees"], [137, 3, 1, "", "average_nees"], [137, 3, 1, "", "dof"], [137, 3, 1, "", "expected_nees"], [137, 2, 1, "", "nees_lower_bound"], [137, 2, 1, "", "nees_upper_bound"], [137, 3, 1, "", "num_trials"], [137, 3, 1, "", "rmse"], [137, 3, 1, "", "stamp"], [137, 3, 1, "", "total_rmse"], [137, 3, 1, "", "trial_results"]], "navlie.utils.mixture": [[148, 4, 1, "", "gaussian_mixing"], [149, 4, 1, "", "gaussian_mixing_vectorspace"], [150, 4, 1, "", "reparametrize_gaussians_about_X_par"], [151, 4, 1, "", "update_X"]], "navlie.utils.plot": [[153, 1, 1, "", "CameraPoseVisualizer"], [154, 4, 1, "", "plot_camera_poses"], [155, 4, 1, "", "plot_error"], [156, 4, 1, "", "plot_meas"], [157, 4, 1, "", "plot_meas_by_model"], [158, 4, 1, "", "plot_nees"], [159, 4, 1, "", "plot_poses"], [160, 4, 1, "", "set_axes_equal"]], "navlie.utils.plot.CameraPoseVisualizer": [[153, 2, 1, "", "plot_pose"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"navli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 166], "batch": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 164], "estim": [1, 2, 164], "batchestim": 2, "gaussian_mixtur": [3, 4, 5, 6, 7, 8], "gaussianmixtureresidu": 4, "hessiansummixtureresidu": 5, "maxmixtureresidu": 6, "maxsummixtureresidu": 7, "summixtureresidu": 8, "loss": [9, 10, 11, 12], "cauchyloss": 10, "l2loss": 11, "lossfunct": 12, "problem": [13, 14, 15, 164, 167, 168], "optimizationsummari": 14, "residu": [16, 17, 18, 19, 20], "measurementresidu": 17, "priorresidu": 18, "processresidu": 19, "bspline": [21, 22], "se3bsplin": 22, "composit": [23, 24, 25, 26, 27, 28, 165], "compositeinput": 24, "compositemeasur": 25, "compositemeasurementmodel": 26, "compositeprocessmodel": 27, "compositest": [28, 165], "datagen": [29, 30, 31], "datagener": 30, "generate_measur": 31, "filter": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 167, 168], "cubaturekalmanfilt": 33, "extendedkalmanfilt": 34, "gausshermitekalmanfilt": 35, "gaussiansumfilt": 36, "interactingmodelfilt": 37, "iteratedkalmanfilt": 38, "sigmapointkalmanfilt": 39, "unscentedkalmanfilt": 40, "check_outli": 41, "generate_sigmapoint": 42, "mean_stat": 43, "run_filt": 44, "run_gsf_filt": 45, "run_imm_filt": 46, "lib": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "camera": [48, 49, 50], "pinholecamera": 49, "posematrix": 50, "dataset": [51, 52, 53, 54, 55, 120], "simulatedinertialgpsdataset": 52, "simulatedinertiallandmarkdataset": 53, "simulatedposerangingdataset": 54, "generate_landmark_posit": 55, "imu": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "g_matrix": 57, "g_matrix_inv": 58, "imukinemat": 60, "imust": 61, "l_matrix": 62, "m_matrix": 63, "n_matrix": 64, "u_matrix": 65, "u_matrix_inv": 66, "u_tilde_matrix": 67, "adjoint_ie3": 68, "delta_matrix": 69, "get_unbiased_imu": 70, "inverse_ie3": 71, "model": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 164, 167, 168], "absoluteposit": 73, "absoluteveloc": 74, "altitud": 75, "bodyframeveloc": 76, "cameraproject": 77, "doubleintegr": 78, "doubleintegratorwithbia": 79, "globalposit": 80, "gravitomet": 81, "invariantmeasur": 82, "invariantpointrelativeposit": 83, "linearmeasur": 84, "magnetomet": 85, "onedimensionalpositionvelocityrang": 86, "pointrelativeposit": 87, "pointrelativepositionslam": 88, "rangepointtoanchor": 89, "rangeposetoanchor": 90, "rangeposetopos": 91, "rangerelativepos": 92, "relativebodyframeveloc": 93, "singleintegr": 94, "preintegr": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "angularvelocityincr": 96, "bodyvelocityincr": 97, "imuincr": 98, "linearincr": 99, "preintegratedangularveloc": 100, "preintegratedbodyveloc": 101, "preintegratedimukinemat": 102, "preintegratedlinearmodel": 103, "preintegratedwheelodometri": 104, "relativemotionincr": 105, "wheelodometryincr": 106, "state": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 165, 167, 168], "matrixliegroupst": 108, "mixturest": 109, "se23stat": 110, "se2stat": 111, "se3stat": 112, "sl3state": 113, "so2stat": 114, "so3stat": 115, "stampedvalu": 116, "vectorinput": 117, "vectorst": 118, "type": [119, 120, 121, 122, 123, 124, 125, 126], "input": 121, "measur": [122, 164, 167, 168], "measurementmodel": 123, "processmodel": 124, "statewithcovari": 126, "util": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "align": [128, 129, 130, 131], "associate_and_align_trajectori": 129, "evo_traj_to_state_list": 130, "state_list_to_evo_traj": 131, "common": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "gaussianresult": 133, "gaussianresultlist": 134, "mixtureresult": 135, "mixtureresultlist": 136, "montecarloresult": 137, "associate_stamp": 138, "find_nearest_stamp_idx": 139, "jacobian": [140, 166], "load_tum_trajectori": 141, "monte_carlo": 142, "randvec": 143, "schedule_sequential_measur": 144, "state_interp": 145, "van_loan": 146, "mixtur": [147, 148, 149, 150, 151], "gaussian_mix": 148, "gaussian_mixing_vectorspac": 149, "reparametrize_gaussians_about_x_par": 150, "update_x": 151, "plot": [152, 153, 154, 155, 156, 157, 158, 159, 160], "cameraposevisu": 153, "plot_camera_pos": 154, "plot_error": 155, "plot_mea": 156, "plot_meas_by_model": 157, "plot_ne": 158, "plot_pos": 159, "set_axes_equ": 160, "api": 161, "document": 161, "welcom": 162, "instal": 162, "exampl": [162, 164], "get": 163, "start": 163, "toi": [164, 167, 168], "slam": 164, "evalu": 164, "The": 164, "creat": 164, "simul": [164, 168], "data": [164, 168], "from": [164, 165], "weight": 164, "nonlinear": 164, "least": 164, "squar": 164, "unweight": 164, "defin": [164, 167, 168], "gener": [164, 168], "initi": 164, "run": [164, 167, 168], "extract": 164, "covari": 164, "inherit": 165, "tradit": [166, 168], "approach": [166, 167, 168], "lie": [166, 167], "group": [166, 167], "process": [167, 168], "built": 167, "": 168, "onli": 168, "fake": 168}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"navlie.batch": [[0, "module-navlie.batch"]], "navlie.batch.estimator": [[1, "module-navlie.batch.estimator"]], "navlie.batch.estimator.BatchEstimator": [[2, "navlie-batch-estimator-batchestimator"]], "navlie.batch.gaussian_mixtures": [[3, "module-navlie.batch.gaussian_mixtures"]], "navlie.batch.gaussian_mixtures.GaussianMixtureResidual": [[4, "navlie-batch-gaussian-mixtures-gaussianmixtureresidual"]], "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual": [[5, "navlie-batch-gaussian-mixtures-hessiansummixtureresidual"]], "navlie.batch.gaussian_mixtures.MaxMixtureResidual": [[6, "navlie-batch-gaussian-mixtures-maxmixtureresidual"]], "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual": [[7, "navlie-batch-gaussian-mixtures-maxsummixtureresidual"]], "navlie.batch.gaussian_mixtures.SumMixtureResidual": [[8, "navlie-batch-gaussian-mixtures-summixtureresidual"]], "navlie.batch.losses": [[9, "module-navlie.batch.losses"]], "navlie.batch.losses.CauchyLoss": [[10, "navlie-batch-losses-cauchyloss"]], "navlie.batch.losses.L2Loss": [[11, "navlie-batch-losses-l2loss"]], "navlie.batch.losses.LossFunction": [[12, "navlie-batch-losses-lossfunction"]], "navlie.batch.problem": [[13, "module-navlie.batch.problem"]], "navlie.batch.problem.OptimizationSummary": [[14, "navlie-batch-problem-optimizationsummary"]], "navlie.batch.problem.Problem": [[15, "navlie-batch-problem-problem"]], "navlie.batch.residuals": [[16, "module-navlie.batch.residuals"]], "navlie.batch.residuals.MeasurementResidual": [[17, "navlie-batch-residuals-measurementresidual"]], "navlie.batch.residuals.PriorResidual": [[18, "navlie-batch-residuals-priorresidual"]], "navlie.batch.residuals.ProcessResidual": [[19, "navlie-batch-residuals-processresidual"]], "navlie.batch.residuals.Residual": [[20, "navlie-batch-residuals-residual"]], "navlie.bspline": [[21, "module-navlie.bspline"]], "navlie.bspline.SE3Bspline": [[22, "navlie-bspline-se3bspline"]], "navlie.composite": [[23, "module-navlie.composite"]], "navlie.composite.CompositeInput": [[24, "navlie-composite-compositeinput"]], "navlie.composite.CompositeMeasurement": [[25, "navlie-composite-compositemeasurement"]], "navlie.composite.CompositeMeasurementModel": [[26, "navlie-composite-compositemeasurementmodel"]], "navlie.composite.CompositeProcessModel": [[27, "navlie-composite-compositeprocessmodel"]], "navlie.composite.CompositeState": [[28, "navlie-composite-compositestate"]], "navlie.datagen": [[29, "module-navlie.datagen"]], "navlie.datagen.DataGenerator": [[30, "navlie-datagen-datagenerator"]], "navlie.datagen.generate_measurement": [[31, "navlie-datagen-generate-measurement"]], "navlie.filters": [[32, "module-navlie.filters"]], "navlie.filters.CubatureKalmanFilter": [[33, "navlie-filters-cubaturekalmanfilter"]], "navlie.filters.ExtendedKalmanFilter": [[34, "navlie-filters-extendedkalmanfilter"]], "navlie.filters.GaussHermiteKalmanFilter": [[35, "navlie-filters-gausshermitekalmanfilter"]], "navlie.filters.GaussianSumFilter": [[36, "navlie-filters-gaussiansumfilter"]], "navlie.filters.InteractingModelFilter": [[37, "navlie-filters-interactingmodelfilter"]], "navlie.filters.IteratedKalmanFilter": [[38, "navlie-filters-iteratedkalmanfilter"]], "navlie.filters.SigmaPointKalmanFilter": [[39, "navlie-filters-sigmapointkalmanfilter"]], "navlie.filters.UnscentedKalmanFilter": [[40, "navlie-filters-unscentedkalmanfilter"]], "navlie.filters.check_outlier": [[41, "navlie-filters-check-outlier"]], "navlie.filters.generate_sigmapoints": [[42, "navlie-filters-generate-sigmapoints"]], "navlie.filters.mean_state": [[43, "navlie-filters-mean-state"]], "navlie.filters.run_filter": [[44, "navlie-filters-run-filter"]], "navlie.filters.run_gsf_filter": [[45, "navlie-filters-run-gsf-filter"]], "navlie.filters.run_imm_filter": [[46, "navlie-filters-run-imm-filter"]], "navlie.lib": [[47, "module-navlie.lib"]], "navlie.lib.camera": [[48, "module-navlie.lib.camera"]], "navlie.lib.camera.PinholeCamera": [[49, "navlie-lib-camera-pinholecamera"]], "navlie.lib.camera.PoseMatrix": [[50, "navlie-lib-camera-posematrix"]], "navlie.lib.datasets": [[51, "module-navlie.lib.datasets"]], "navlie.lib.datasets.SimulatedInertialGPSDataset": [[52, "navlie-lib-datasets-simulatedinertialgpsdataset"]], "navlie.lib.datasets.SimulatedInertialLandmarkDataset": [[53, "navlie-lib-datasets-simulatedinertiallandmarkdataset"]], "navlie.lib.datasets.SimulatedPoseRangingDataset": [[54, "navlie-lib-datasets-simulatedposerangingdataset"]], "navlie.lib.datasets.generate_landmark_positions": [[55, "navlie-lib-datasets-generate-landmark-positions"]], "navlie.lib.imu": [[56, "module-navlie.lib.imu"]], "navlie.lib.imu.G_matrix": [[57, "navlie-lib-imu-g-matrix"]], "navlie.lib.imu.G_matrix_inv": [[58, "navlie-lib-imu-g-matrix-inv"]], "navlie.lib.imu.IMU": [[59, "navlie-lib-imu-imu"]], "navlie.lib.imu.IMUKinematics": [[60, "navlie-lib-imu-imukinematics"]], "navlie.lib.imu.IMUState": [[61, "navlie-lib-imu-imustate"]], "navlie.lib.imu.L_matrix": [[62, "navlie-lib-imu-l-matrix"]], "navlie.lib.imu.M_matrix": [[63, "navlie-lib-imu-m-matrix"]], "navlie.lib.imu.N_matrix": [[64, "navlie-lib-imu-n-matrix"]], "navlie.lib.imu.U_matrix": [[65, "navlie-lib-imu-u-matrix"]], "navlie.lib.imu.U_matrix_inv": [[66, "navlie-lib-imu-u-matrix-inv"]], "navlie.lib.imu.U_tilde_matrix": [[67, "navlie-lib-imu-u-tilde-matrix"]], "navlie.lib.imu.adjoint_IE3": [[68, "navlie-lib-imu-adjoint-ie3"]], "navlie.lib.imu.delta_matrix": [[69, "navlie-lib-imu-delta-matrix"]], "navlie.lib.imu.get_unbiased_imu": [[70, "navlie-lib-imu-get-unbiased-imu"]], "navlie.lib.imu.inverse_IE3": [[71, "navlie-lib-imu-inverse-ie3"]], "navlie.lib.models": [[72, "module-navlie.lib.models"]], "navlie.lib.models.AbsolutePosition": [[73, "navlie-lib-models-absoluteposition"]], "navlie.lib.models.AbsoluteVelocity": [[74, "navlie-lib-models-absolutevelocity"]], "navlie.lib.models.Altitude": [[75, "navlie-lib-models-altitude"]], "navlie.lib.models.BodyFrameVelocity": [[76, "navlie-lib-models-bodyframevelocity"]], "navlie.lib.models.CameraProjection": [[77, "navlie-lib-models-cameraprojection"]], "navlie.lib.models.DoubleIntegrator": [[78, "navlie-lib-models-doubleintegrator"]], "navlie.lib.models.DoubleIntegratorWithBias": [[79, "navlie-lib-models-doubleintegratorwithbias"]], "navlie.lib.models.GlobalPosition": [[80, "navlie-lib-models-globalposition"]], "navlie.lib.models.Gravitometer": [[81, "navlie-lib-models-gravitometer"]], "navlie.lib.models.InvariantMeasurement": [[82, "navlie-lib-models-invariantmeasurement"]], "navlie.lib.models.InvariantPointRelativePosition": [[83, "navlie-lib-models-invariantpointrelativeposition"]], "navlie.lib.models.LinearMeasurement": [[84, "navlie-lib-models-linearmeasurement"]], "navlie.lib.models.Magnetometer": [[85, "navlie-lib-models-magnetometer"]], "navlie.lib.models.OneDimensionalPositionVelocityRange": [[86, "navlie-lib-models-onedimensionalpositionvelocityrange"]], "navlie.lib.models.PointRelativePosition": [[87, "navlie-lib-models-pointrelativeposition"]], "navlie.lib.models.PointRelativePositionSLAM": [[88, "navlie-lib-models-pointrelativepositionslam"]], "navlie.lib.models.RangePointToAnchor": [[89, "navlie-lib-models-rangepointtoanchor"]], "navlie.lib.models.RangePoseToAnchor": [[90, "navlie-lib-models-rangeposetoanchor"]], "navlie.lib.models.RangePoseToPose": [[91, "navlie-lib-models-rangeposetopose"]], "navlie.lib.models.RangeRelativePose": [[92, "navlie-lib-models-rangerelativepose"]], "navlie.lib.models.RelativeBodyFrameVelocity": [[93, "navlie-lib-models-relativebodyframevelocity"]], "navlie.lib.models.SingleIntegrator": [[94, "navlie-lib-models-singleintegrator"]], "navlie.lib.preintegration": [[95, "module-navlie.lib.preintegration"]], "navlie.lib.preintegration.AngularVelocityIncrement": [[96, "navlie-lib-preintegration-angularvelocityincrement"]], "navlie.lib.preintegration.BodyVelocityIncrement": [[97, "navlie-lib-preintegration-bodyvelocityincrement"]], "navlie.lib.preintegration.IMUIncrement": [[98, "navlie-lib-preintegration-imuincrement"]], "navlie.lib.preintegration.LinearIncrement": [[99, "navlie-lib-preintegration-linearincrement"]], "navlie.lib.preintegration.PreintegratedAngularVelocity": [[100, "navlie-lib-preintegration-preintegratedangularvelocity"]], "navlie.lib.preintegration.PreintegratedBodyVelocity": [[101, "navlie-lib-preintegration-preintegratedbodyvelocity"]], "navlie.lib.preintegration.PreintegratedIMUKinematics": [[102, "navlie-lib-preintegration-preintegratedimukinematics"]], "navlie.lib.preintegration.PreintegratedLinearModel": [[103, "navlie-lib-preintegration-preintegratedlinearmodel"]], "navlie.lib.preintegration.PreintegratedWheelOdometry": [[104, "navlie-lib-preintegration-preintegratedwheelodometry"]], "navlie.lib.preintegration.RelativeMotionIncrement": [[105, "navlie-lib-preintegration-relativemotionincrement"]], "navlie.lib.preintegration.WheelOdometryIncrement": [[106, "navlie-lib-preintegration-wheelodometryincrement"]], "navlie.lib.states": [[107, "module-navlie.lib.states"]], "navlie.lib.states.MatrixLieGroupState": [[108, "navlie-lib-states-matrixliegroupstate"]], "navlie.lib.states.MixtureState": [[109, "navlie-lib-states-mixturestate"]], "navlie.lib.states.SE23State": [[110, "navlie-lib-states-se23state"]], "navlie.lib.states.SE2State": [[111, "navlie-lib-states-se2state"]], "navlie.lib.states.SE3State": [[112, "navlie-lib-states-se3state"]], "navlie.lib.states.SL3State": [[113, "navlie-lib-states-sl3state"]], "navlie.lib.states.SO2State": [[114, "navlie-lib-states-so2state"]], "navlie.lib.states.SO3State": [[115, "navlie-lib-states-so3state"]], "navlie.lib.states.StampedValue": [[116, "navlie-lib-states-stampedvalue"]], "navlie.lib.states.VectorInput": [[117, "navlie-lib-states-vectorinput"]], "navlie.lib.states.VectorState": [[118, "navlie-lib-states-vectorstate"]], "navlie.types": [[119, "module-navlie.types"]], "navlie.types.Dataset": [[120, "navlie-types-dataset"]], "navlie.types.Input": [[121, "navlie-types-input"]], "navlie.types.Measurement": [[122, "navlie-types-measurement"]], "navlie.types.MeasurementModel": [[123, "navlie-types-measurementmodel"]], "navlie.types.ProcessModel": [[124, "navlie-types-processmodel"]], "navlie.types.State": [[125, "navlie-types-state"]], "navlie.types.StateWithCovariance": [[126, "navlie-types-statewithcovariance"]], "navlie.utils": [[127, "module-navlie.utils"]], "navlie.utils.alignment": [[128, "module-navlie.utils.alignment"]], "navlie.utils.alignment.associate_and_align_trajectories": [[129, "navlie-utils-alignment-associate-and-align-trajectories"]], "navlie.utils.alignment.evo_traj_to_state_list": [[130, "navlie-utils-alignment-evo-traj-to-state-list"]], "navlie.utils.alignment.state_list_to_evo_traj": [[131, "navlie-utils-alignment-state-list-to-evo-traj"]], "navlie.utils.common": [[132, "module-navlie.utils.common"]], "navlie.utils.common.GaussianResult": [[133, "navlie-utils-common-gaussianresult"]], "navlie.utils.common.GaussianResultList": [[134, "navlie-utils-common-gaussianresultlist"]], "navlie.utils.common.MixtureResult": [[135, "navlie-utils-common-mixtureresult"]], "navlie.utils.common.MixtureResultList": [[136, "navlie-utils-common-mixtureresultlist"]], "navlie.utils.common.MonteCarloResult": [[137, "navlie-utils-common-montecarloresult"]], "navlie.utils.common.associate_stamps": [[138, "navlie-utils-common-associate-stamps"]], "navlie.utils.common.find_nearest_stamp_idx": [[139, "navlie-utils-common-find-nearest-stamp-idx"]], "navlie.utils.common.jacobian": [[140, "navlie-utils-common-jacobian"]], "navlie.utils.common.load_tum_trajectory": [[141, "navlie-utils-common-load-tum-trajectory"]], "navlie.utils.common.monte_carlo": [[142, "navlie-utils-common-monte-carlo"]], "navlie.utils.common.randvec": [[143, "navlie-utils-common-randvec"]], "navlie.utils.common.schedule_sequential_measurements": [[144, "navlie-utils-common-schedule-sequential-measurements"]], "navlie.utils.common.state_interp": [[145, "navlie-utils-common-state-interp"]], "navlie.utils.common.van_loans": [[146, "navlie-utils-common-van-loans"]], "navlie.utils.mixture": [[147, "module-navlie.utils.mixture"]], "navlie.utils.mixture.gaussian_mixing": [[148, "navlie-utils-mixture-gaussian-mixing"]], "navlie.utils.mixture.gaussian_mixing_vectorspace": [[149, "navlie-utils-mixture-gaussian-mixing-vectorspace"]], "navlie.utils.mixture.reparametrize_gaussians_about_X_par": [[150, "navlie-utils-mixture-reparametrize-gaussians-about-x-par"]], "navlie.utils.mixture.update_X": [[151, "navlie-utils-mixture-update-x"]], "navlie.utils.plot": [[152, "module-navlie.utils.plot"]], "navlie.utils.plot.CameraPoseVisualizer": [[153, "navlie-utils-plot-cameraposevisualizer"]], "navlie.utils.plot.plot_camera_poses": [[154, "navlie-utils-plot-plot-camera-poses"]], "navlie.utils.plot.plot_error": [[155, "navlie-utils-plot-plot-error"]], "navlie.utils.plot.plot_meas": [[156, "navlie-utils-plot-plot-meas"]], "navlie.utils.plot.plot_meas_by_model": [[157, "navlie-utils-plot-plot-meas-by-model"]], "navlie.utils.plot.plot_nees": [[158, "navlie-utils-plot-plot-nees"]], "navlie.utils.plot.plot_poses": [[159, "navlie-utils-plot-plot-poses"]], "navlie.utils.plot.set_axes_equal": [[160, "navlie-utils-plot-set-axes-equal"]], "API Documentation": [[161, "api-documentation"]], "Welcome to navlie!": [[162, "welcome-to-navlie"]], "Installation": [[162, "installation"]], "Examples": [[162, "examples"]], "Getting Started": [[163, "getting-started"]], "Toy Batch SLAM Example": [[164, "Toy-Batch-SLAM-Example"]], "Evaluating The Measurement Model": [[164, "Evaluating-The-Measurement-Model"]], "Creating the simulated data": [[164, "Creating-the-simulated-data"]], "Batch Estimation: From Weighted Nonlinear Least Squares to Unweighted Nonlinear Least Squares": [[164, "Batch-Estimation:-From-Weighted-Nonlinear-Least-Squares-to-Unweighted-Nonlinear-Least-Squares"]], "Defining Nonlinear Least Squares Problems in navlie": [[164, "Defining-Nonlinear-Least-Squares-Problems-in-navlie"]], "Generating the Initial Estimate": [[164, "Generating-the-Initial-Estimate"]], "Run Batch!": [[164, "Run-Batch!"]], "Extracting the Estimates and the Covariances": [[164, "Extracting-the-Estimates-and-the-Covariances"]], "Composite States": [[165, "Composite-States"]], "Inheriting from CompositeState": [[165, "Inheriting-from-CompositeState"]], "Jacobians in navlie": [[166, "Jacobians-in-navlie"]], "Jacobians - Traditional Approach": [[166, "Jacobians---Traditional-Approach"]], "Jacobians - Lie Group Approach": [[166, "Jacobians---Lie-Group-Approach"]], "Toy Problem - Lie group approach": [[167, "Toy-Problem---Lie-group-approach"]], "Define the State": [[167, "Define-the-State"], [168, "Define-the-State"]], "Define the Process Model": [[167, "Define-the-Process-Model"], [168, "Define-the-Process-Model"]], "Define the Measurement Model": [[167, "Define-the-Measurement-Model"]], "Run the Filter!": [[167, "Run-the-Filter!"]], "Built-in Lie group states": [[167, "Built-in-Lie-group-states"]], "Toy Problem - Traditional Approach": [[168, "Toy-Problem---Traditional-Approach"]], "Define the Measurement Model(s)": [[168, "Define-the-Measurement-Model(s)"]], "(Simulation only) Generate fake data": [[168, "(Simulation-only)-Generate-fake-data"]], "Run a filter!": [[168, "Run-a-filter!"]]}, "indexentries": {"module": [[0, "module-navlie.batch"], [1, "module-navlie.batch.estimator"], [3, "module-navlie.batch.gaussian_mixtures"], [9, "module-navlie.batch.losses"], [13, "module-navlie.batch.problem"], [16, "module-navlie.batch.residuals"], [21, "module-navlie.bspline"], [23, "module-navlie.composite"], [29, "module-navlie.datagen"], [32, "module-navlie.filters"], [47, "module-navlie.lib"], [48, "module-navlie.lib.camera"], [51, "module-navlie.lib.datasets"], [56, "module-navlie.lib.imu"], [72, "module-navlie.lib.models"], [95, "module-navlie.lib.preintegration"], [107, "module-navlie.lib.states"], [119, "module-navlie.types"], [127, "module-navlie.utils"], [128, "module-navlie.utils.alignment"], [132, "module-navlie.utils.common"], [147, "module-navlie.utils.mixture"], [152, "module-navlie.utils.plot"]], "navlie.batch": [[0, "module-navlie.batch"]], "navlie.batch.estimator": [[1, "module-navlie.batch.estimator"]], "batchestimator (class in navlie.batch.estimator)": [[2, "navlie.batch.estimator.BatchEstimator"]], "solve() (navlie.batch.estimator.batchestimator method)": [[2, "navlie.batch.estimator.BatchEstimator.solve"]], "navlie.batch.gaussian_mixtures": [[3, "module-navlie.batch.gaussian_mixtures"]], "gaussianmixtureresidual (class in navlie.batch.gaussian_mixtures)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.sqrt_info_matrix"]], "hessiansummixtureresidual (class in navlie.batch.gaussian_mixtures)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.evaluate_component_residuals"]], "get_normalization_constant() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual static method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.get_normalization_constant"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.mix_jacobians"]], "no_use_complex_numbers (navlie.batch.gaussian_mixtures.hessiansummixtureresidual attribute)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.no_use_complex_numbers"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.sqrt_info_matrix"]], "maxmixtureresidual (class in navlie.batch.gaussian_mixtures)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.sqrt_info_matrix"]], "maxsummixtureresidual (class in navlie.batch.gaussian_mixtures)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual"]], "compute_nonlinear_part() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.compute_nonlinear_part"]], "damping_const (navlie.batch.gaussian_mixtures.maxsummixtureresidual attribute)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.damping_const"]], "evaluate() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.sqrt_info_matrix"]], "summixtureresidual (class in navlie.batch.gaussian_mixtures)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.sqrt_info_matrix"]], "navlie.batch.losses": [[9, "module-navlie.batch.losses"]], "cauchyloss (class in navlie.batch.losses)": [[10, "navlie.batch.losses.CauchyLoss"]], "loss() (navlie.batch.losses.cauchyloss method)": [[10, "navlie.batch.losses.CauchyLoss.loss"]], "weight() (navlie.batch.losses.cauchyloss method)": [[10, "navlie.batch.losses.CauchyLoss.weight"]], "l2loss (class in navlie.batch.losses)": [[11, "navlie.batch.losses.L2Loss"]], "loss() (navlie.batch.losses.l2loss method)": [[11, "navlie.batch.losses.L2Loss.loss"]], "weight() (navlie.batch.losses.l2loss method)": [[11, "navlie.batch.losses.L2Loss.weight"]], "lossfunction (class in navlie.batch.losses)": [[12, "navlie.batch.losses.LossFunction"]], "loss() (navlie.batch.losses.lossfunction method)": [[12, "navlie.batch.losses.LossFunction.loss"]], "weight() (navlie.batch.losses.lossfunction method)": [[12, "navlie.batch.losses.LossFunction.weight"]], "navlie.batch.problem": [[13, "module-navlie.batch.problem"]], "optimizationsummary (class in navlie.batch.problem)": [[14, "navlie.batch.problem.OptimizationSummary"]], "problem (class in navlie.batch.problem)": [[15, "navlie.batch.problem.Problem"]], "add_residual() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.add_residual"]], "add_variable() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.add_variable"]], "compute_covariance() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.compute_covariance"]], "compute_error_jac_cost() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.compute_error_jac_cost"]], "get_covariance_block() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.get_covariance_block"]], "is_converged() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.is_converged"]], "set_variables_constant() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.set_variables_constant"]], "solve() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.solve"]], "navlie.batch.residuals": [[16, "module-navlie.batch.residuals"]], "measurementresidual (class in navlie.batch.residuals)": [[17, "navlie.batch.residuals.MeasurementResidual"]], "evaluate() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.sqrt_info_matrix"]], "priorresidual (class in navlie.batch.residuals)": [[18, "navlie.batch.residuals.PriorResidual"]], "evaluate() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.sqrt_info_matrix"]], "processresidual (class in navlie.batch.residuals)": [[19, "navlie.batch.residuals.ProcessResidual"]], "evaluate() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.sqrt_info_matrix"]], "residual (class in navlie.batch.residuals)": [[20, "navlie.batch.residuals.Residual"]], "evaluate() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.sqrt_info_matrix"]], "navlie.bspline": [[21, "module-navlie.bspline"]], "se3bspline (class in navlie.bspline)": [[22, "navlie.bspline.SE3Bspline"]], "get_acceleration() (navlie.bspline.se3bspline method)": [[22, "navlie.bspline.SE3Bspline.get_acceleration"]], "get_pose() (navlie.bspline.se3bspline method)": [[22, "navlie.bspline.SE3Bspline.get_pose"]], "get_velocity() (navlie.bspline.se3bspline method)": [[22, "navlie.bspline.SE3Bspline.get_velocity"]], "navlie.composite": [[23, "module-navlie.composite"]], "compositeinput (class in navlie.composite)": [[24, "navlie.composite.CompositeInput"]], "add_input() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.add_input"]], "copy() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.copy"]], "covariance (navlie.composite.compositeinput attribute)": [[24, "navlie.composite.CompositeInput.covariance"]], "dof (navlie.composite.compositeinput attribute)": [[24, "navlie.composite.CompositeInput.dof"]], "get_dof_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.get_dof_by_id"]], "get_index_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.get_index_by_id"]], "get_input_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.get_input_by_id"]], "get_stamp_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.get_stamp_by_id"]], "plus() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.plus"]], "remove_input_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.remove_input_by_id"]], "set_input_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.set_input_by_id"]], "set_stamp_by_id() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.set_stamp_by_id"]], "set_stamp_for_all() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.set_stamp_for_all"]], "stamp (navlie.composite.compositeinput attribute)": [[24, "navlie.composite.CompositeInput.stamp"]], "state_id (navlie.composite.compositeinput attribute)": [[24, "navlie.composite.CompositeInput.state_id"]], "to_list() (navlie.composite.compositeinput method)": [[24, "navlie.composite.CompositeInput.to_list"]], "compositemeasurement (class in navlie.composite)": [[25, "navlie.composite.CompositeMeasurement"]], "minus() (navlie.composite.compositemeasurement method)": [[25, "navlie.composite.CompositeMeasurement.minus"]], "model (navlie.composite.compositemeasurement attribute)": [[25, "navlie.composite.CompositeMeasurement.model"]], "stamp (navlie.composite.compositemeasurement attribute)": [[25, "navlie.composite.CompositeMeasurement.stamp"]], "state_id (navlie.composite.compositemeasurement attribute)": [[25, "navlie.composite.CompositeMeasurement.state_id"]], "value (navlie.composite.compositemeasurement attribute)": [[25, "navlie.composite.CompositeMeasurement.value"]], "compositemeasurementmodel (class in navlie.composite)": [[26, "navlie.composite.CompositeMeasurementModel"]], "covariance() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.covariance"]], "evaluate() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.evaluate"]], "evaluate_with_jacobian() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.evaluate_with_jacobian"]], "jacobian() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.jacobian"]], "jacobian_fd() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.jacobian_fd"]], "sqrt_information() (navlie.composite.compositemeasurementmodel method)": [[26, "navlie.composite.CompositeMeasurementModel.sqrt_information"]], "compositeprocessmodel (class in navlie.composite)": [[27, "navlie.composite.CompositeProcessModel"]], "covariance() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.covariance"]], "evaluate() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.evaluate"]], "evaluate_with_jacobian() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.evaluate_with_jacobian"]], "input_covariance() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.input_covariance"]], "input_jacobian_fd() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.input_jacobian_fd"]], "jacobian() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.jacobian"]], "jacobian_fd() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.jacobian_fd"]], "sqrt_information() (navlie.composite.compositeprocessmodel method)": [[27, "navlie.composite.CompositeProcessModel.sqrt_information"]], "compositestate (class in navlie.composite)": [[28, "navlie.composite.CompositeState"]], "add_state() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.add_state"]], "copy() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.copy"]], "dof (navlie.composite.compositestate attribute)": [[28, "navlie.composite.CompositeState.dof"]], "get_dof_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_dof_by_id"]], "get_index_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_index_by_id"]], "get_matrix_block_by_ids() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_matrix_block_by_ids"]], "get_slice_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_slice_by_id"]], "get_slices() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_slices"]], "get_stamp_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_stamp_by_id"]], "get_state_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_state_by_id"]], "get_value_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.get_value_by_id"]], "jacobian_from_blocks() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.jacobian_from_blocks"]], "minus() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.minus"]], "minus_jacobian() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.minus_jacobian"]], "minus_jacobian_fd() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.minus_jacobian_fd"]], "plus() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.plus"]], "plus_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.plus_by_id"]], "plus_jacobian() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.plus_jacobian"]], "plus_jacobian_fd() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.plus_jacobian_fd"]], "remove_state_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.remove_state_by_id"]], "set_matrix_block_by_ids() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.set_matrix_block_by_ids"]], "set_stamp_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.set_stamp_by_id"]], "set_stamp_for_all() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.set_stamp_for_all"]], "set_state_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.set_state_by_id"]], "set_value_by_id() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.set_value_by_id"]], "stamp (navlie.composite.compositestate attribute)": [[28, "navlie.composite.CompositeState.stamp"]], "state_id (navlie.composite.compositestate attribute)": [[28, "navlie.composite.CompositeState.state_id"]], "to_list() (navlie.composite.compositestate method)": [[28, "navlie.composite.CompositeState.to_list"]], "value (navlie.composite.compositestate attribute)": [[28, "navlie.composite.CompositeState.value"]], "navlie.datagen": [[29, "module-navlie.datagen"]], "datagenerator (class in navlie.datagen)": [[30, "navlie.datagen.DataGenerator"]], "add_measurement_model() (navlie.datagen.datagenerator method)": [[30, "navlie.datagen.DataGenerator.add_measurement_model"]], "generate() (navlie.datagen.datagenerator method)": [[30, "navlie.datagen.DataGenerator.generate"]], "generate_measurement() (in module navlie.datagen)": [[31, "navlie.datagen.generate_measurement"]], "navlie.filters": [[32, "module-navlie.filters"]], "cubaturekalmanfilter (class in navlie.filters)": [[33, "navlie.filters.CubatureKalmanFilter"]], "correct() (navlie.filters.cubaturekalmanfilter method)": [[33, "navlie.filters.CubatureKalmanFilter.correct"]], "iterate_mean (navlie.filters.cubaturekalmanfilter attribute)": [[33, "navlie.filters.CubatureKalmanFilter.iterate_mean"]], "method (navlie.filters.cubaturekalmanfilter attribute)": [[33, "navlie.filters.CubatureKalmanFilter.method"]], "predict() (navlie.filters.cubaturekalmanfilter method)": [[33, "navlie.filters.CubatureKalmanFilter.predict"]], "process_model (navlie.filters.cubaturekalmanfilter attribute)": [[33, "navlie.filters.CubatureKalmanFilter.process_model"]], "reject_outliers (navlie.filters.cubaturekalmanfilter attribute)": [[33, "navlie.filters.CubatureKalmanFilter.reject_outliers"]], "extendedkalmanfilter (class in navlie.filters)": [[34, "navlie.filters.ExtendedKalmanFilter"]], "correct() (navlie.filters.extendedkalmanfilter method)": [[34, "navlie.filters.ExtendedKalmanFilter.correct"]], "predict() (navlie.filters.extendedkalmanfilter method)": [[34, "navlie.filters.ExtendedKalmanFilter.predict"]], "process_model (navlie.filters.extendedkalmanfilter attribute)": [[34, "navlie.filters.ExtendedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.extendedkalmanfilter attribute)": [[34, "navlie.filters.ExtendedKalmanFilter.reject_outliers"]], "gausshermitekalmanfilter (class in navlie.filters)": [[35, "navlie.filters.GaussHermiteKalmanFilter"]], "correct() (navlie.filters.gausshermitekalmanfilter method)": [[35, "navlie.filters.GaussHermiteKalmanFilter.correct"]], "iterate_mean (navlie.filters.gausshermitekalmanfilter attribute)": [[35, "navlie.filters.GaussHermiteKalmanFilter.iterate_mean"]], "method (navlie.filters.gausshermitekalmanfilter attribute)": [[35, "navlie.filters.GaussHermiteKalmanFilter.method"]], "predict() (navlie.filters.gausshermitekalmanfilter method)": [[35, "navlie.filters.GaussHermiteKalmanFilter.predict"]], "process_model (navlie.filters.gausshermitekalmanfilter attribute)": [[35, "navlie.filters.GaussHermiteKalmanFilter.process_model"]], "reject_outliers (navlie.filters.gausshermitekalmanfilter attribute)": [[35, "navlie.filters.GaussHermiteKalmanFilter.reject_outliers"]], "gaussiansumfilter (class in navlie.filters)": [[36, "navlie.filters.GaussianSumFilter"]], "correct() (navlie.filters.gaussiansumfilter method)": [[36, "navlie.filters.GaussianSumFilter.correct"]], "predict() (navlie.filters.gaussiansumfilter method)": [[36, "navlie.filters.GaussianSumFilter.predict"]], "process_model (navlie.filters.gaussiansumfilter attribute)": [[36, "navlie.filters.GaussianSumFilter.process_model"]], "reject_outliers (navlie.filters.gaussiansumfilter attribute)": [[36, "navlie.filters.GaussianSumFilter.reject_outliers"]], "interactingmodelfilter (class in navlie.filters)": [[37, "navlie.filters.InteractingModelFilter"]], "correct() (navlie.filters.interactingmodelfilter method)": [[37, "navlie.filters.InteractingModelFilter.correct"]], "interaction() (navlie.filters.interactingmodelfilter method)": [[37, "navlie.filters.InteractingModelFilter.interaction"]], "predict() (navlie.filters.interactingmodelfilter method)": [[37, "navlie.filters.InteractingModelFilter.predict"]], "iteratedkalmanfilter (class in navlie.filters)": [[38, "navlie.filters.IteratedKalmanFilter"]], "correct() (navlie.filters.iteratedkalmanfilter method)": [[38, "navlie.filters.IteratedKalmanFilter.correct"]], "line_search (navlie.filters.iteratedkalmanfilter attribute)": [[38, "navlie.filters.IteratedKalmanFilter.line_search"]], "max_iters (navlie.filters.iteratedkalmanfilter attribute)": [[38, "navlie.filters.IteratedKalmanFilter.max_iters"]], "predict() (navlie.filters.iteratedkalmanfilter method)": [[38, "navlie.filters.IteratedKalmanFilter.predict"]], "process_model (navlie.filters.iteratedkalmanfilter attribute)": [[38, "navlie.filters.IteratedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.iteratedkalmanfilter attribute)": [[38, "navlie.filters.IteratedKalmanFilter.reject_outliers"]], "step_tol (navlie.filters.iteratedkalmanfilter attribute)": [[38, "navlie.filters.IteratedKalmanFilter.step_tol"]], "sigmapointkalmanfilter (class in navlie.filters)": [[39, "navlie.filters.SigmaPointKalmanFilter"]], "correct() (navlie.filters.sigmapointkalmanfilter method)": [[39, "navlie.filters.SigmaPointKalmanFilter.correct"]], "iterate_mean (navlie.filters.sigmapointkalmanfilter attribute)": [[39, "navlie.filters.SigmaPointKalmanFilter.iterate_mean"]], "method (navlie.filters.sigmapointkalmanfilter attribute)": [[39, "navlie.filters.SigmaPointKalmanFilter.method"]], "predict() (navlie.filters.sigmapointkalmanfilter method)": [[39, "navlie.filters.SigmaPointKalmanFilter.predict"]], "process_model (navlie.filters.sigmapointkalmanfilter attribute)": [[39, "navlie.filters.SigmaPointKalmanFilter.process_model"]], "reject_outliers (navlie.filters.sigmapointkalmanfilter attribute)": [[39, "navlie.filters.SigmaPointKalmanFilter.reject_outliers"]], "unscentedkalmanfilter (class in navlie.filters)": [[40, "navlie.filters.UnscentedKalmanFilter"]], "correct() (navlie.filters.unscentedkalmanfilter method)": [[40, "navlie.filters.UnscentedKalmanFilter.correct"]], "iterate_mean (navlie.filters.unscentedkalmanfilter attribute)": [[40, "navlie.filters.UnscentedKalmanFilter.iterate_mean"]], "method (navlie.filters.unscentedkalmanfilter attribute)": [[40, "navlie.filters.UnscentedKalmanFilter.method"]], "predict() (navlie.filters.unscentedkalmanfilter method)": [[40, "navlie.filters.UnscentedKalmanFilter.predict"]], "process_model (navlie.filters.unscentedkalmanfilter attribute)": [[40, "navlie.filters.UnscentedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.unscentedkalmanfilter attribute)": [[40, "navlie.filters.UnscentedKalmanFilter.reject_outliers"]], "check_outlier() (in module navlie.filters)": [[41, "navlie.filters.check_outlier"]], "generate_sigmapoints() (in module navlie.filters)": [[42, "navlie.filters.generate_sigmapoints"]], "mean_state() (in module navlie.filters)": [[43, "navlie.filters.mean_state"]], "run_filter() (in module navlie.filters)": [[44, "navlie.filters.run_filter"]], "run_gsf_filter() (in module navlie.filters)": [[45, "navlie.filters.run_gsf_filter"]], "run_imm_filter() (in module navlie.filters)": [[46, "navlie.filters.run_imm_filter"]], "navlie.lib": [[47, "module-navlie.lib"]], "navlie.lib.camera": [[48, "module-navlie.lib.camera"]], "pinholecamera (class in navlie.lib.camera)": [[49, "navlie.lib.camera.PinholeCamera"]], "r_normalized_image_coords (navlie.lib.camera.pinholecamera property)": [[49, "navlie.lib.camera.PinholeCamera.R_normalized_image_coords"]], "copy() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.copy"]], "evaluate() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.evaluate"]], "get_cam_to_enu() (navlie.lib.camera.pinholecamera static method)": [[49, "navlie.lib.camera.PinholeCamera.get_cam_to_enu"]], "intrinsics (navlie.lib.camera.pinholecamera property)": [[49, "navlie.lib.camera.PinholeCamera.intrinsics"]], "is_landmark_in_front_of_cam() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.is_landmark_in_front_of_cam"]], "is_measurement_valid() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.is_measurement_valid"]], "project() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.project"]], "resolve_landmark_in_cam_frame() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.resolve_landmark_in_cam_frame"]], "sigma_normalized_image_coords (navlie.lib.camera.pinholecamera property)": [[49, "navlie.lib.camera.PinholeCamera.sigma_normalized_image_coords"]], "to_normalized_coords() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.to_normalized_coords"]], "to_pixel_coors() (navlie.lib.camera.pinholecamera method)": [[49, "navlie.lib.camera.PinholeCamera.to_pixel_coors"]], "posematrix (class in navlie.lib.camera)": [[50, "navlie.lib.camera.PoseMatrix"]], "attitude (navlie.lib.camera.posematrix property)": [[50, "navlie.lib.camera.PoseMatrix.attitude"]], "copy() (navlie.lib.camera.posematrix method)": [[50, "navlie.lib.camera.PoseMatrix.copy"]], "position (navlie.lib.camera.posematrix property)": [[50, "navlie.lib.camera.PoseMatrix.position"]], "navlie.lib.datasets": [[51, "module-navlie.lib.datasets"]], "simulatedinertialgpsdataset (class in navlie.lib.datasets)": [[52, "navlie.lib.datasets.SimulatedInertialGPSDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[52, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_ground_truth"]], "get_input_data() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[52, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[52, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_measurement_data"]], "simulatedinertiallandmarkdataset (class in navlie.lib.datasets)": [[53, "navlie.lib.datasets.SimulatedInertialLandmarkDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[53, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_ground_truth"]], "get_groundtruth_landmarks() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[53, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_groundtruth_landmarks"]], "get_input_data() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[53, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[53, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_measurement_data"]], "simulatedposerangingdataset (class in navlie.lib.datasets)": [[54, "navlie.lib.datasets.SimulatedPoseRangingDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedposerangingdataset method)": [[54, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_ground_truth"]], "get_input_data() (navlie.lib.datasets.simulatedposerangingdataset method)": [[54, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedposerangingdataset method)": [[54, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_measurement_data"]], "generate_landmark_positions() (in module navlie.lib.datasets)": [[55, "navlie.lib.datasets.generate_landmark_positions"]], "navlie.lib.imu": [[56, "module-navlie.lib.imu"]], "g_matrix() (in module navlie.lib.imu)": [[57, "navlie.lib.imu.G_matrix"]], "g_matrix_inv() (in module navlie.lib.imu)": [[58, "navlie.lib.imu.G_matrix_inv"]], "imu (class in navlie.lib.imu)": [[59, "navlie.lib.imu.IMU"]], "accel (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.accel"]], "bias_accel_walk (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.bias_accel_walk"]], "bias_gyro_walk (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.bias_gyro_walk"]], "copy() (navlie.lib.imu.imu method)": [[59, "navlie.lib.imu.IMU.copy"]], "covariance (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.covariance"]], "dof (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.dof"]], "gyro (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.gyro"]], "plus() (navlie.lib.imu.imu method)": [[59, "navlie.lib.imu.IMU.plus"]], "random() (navlie.lib.imu.imu static method)": [[59, "navlie.lib.imu.IMU.random"]], "stamp (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.stamp"]], "state_id (navlie.lib.imu.imu attribute)": [[59, "navlie.lib.imu.IMU.state_id"]], "imukinematics (class in navlie.lib.imu)": [[60, "navlie.lib.imu.IMUKinematics"]], "covariance() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.covariance"]], "evaluate() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.evaluate"]], "evaluate_with_jacobian() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.input_covariance"]], "input_jacobian_fd() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.input_jacobian_fd"]], "jacobian() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.jacobian"]], "jacobian_fd() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.jacobian_fd"]], "sqrt_information() (navlie.lib.imu.imukinematics method)": [[60, "navlie.lib.imu.IMUKinematics.sqrt_information"]], "imustate (class in navlie.lib.imu)": [[61, "navlie.lib.imu.IMUState"]], "add_state() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.add_state"]], "attitude (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.attitude"]], "bias (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.bias"]], "bias_accel (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.bias_accel"]], "bias_gyro (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.bias_gyro"]], "copy() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.copy"]], "direction (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.direction"]], "dof (navlie.lib.imu.imustate attribute)": [[61, "navlie.lib.imu.IMUState.dof"]], "get_dof_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_dof_by_id"]], "get_index_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_index_by_id"]], "get_matrix_block_by_ids() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_matrix_block_by_ids"]], "get_slice_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_slice_by_id"]], "get_slices() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_slices"]], "get_stamp_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_stamp_by_id"]], "get_state_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_state_by_id"]], "get_value_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.get_value_by_id"]], "jacobian_from_blocks() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.jacobian_from_blocks"]], "minus() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.minus"]], "minus_jacobian() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.minus_jacobian_fd"]], "nav_state (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.nav_state"]], "plus() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.plus"]], "plus_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.plus_by_id"]], "plus_jacobian() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.plus_jacobian_fd"]], "pose (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.pose"]], "position (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.position"]], "remove_state_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.remove_state_by_id"]], "set_matrix_block_by_ids() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.set_matrix_block_by_ids"]], "set_stamp_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.set_stamp_by_id"]], "set_stamp_for_all() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.set_stamp_for_all"]], "set_state_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.set_state_by_id"]], "set_value_by_id() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.set_value_by_id"]], "stamp (navlie.lib.imu.imustate attribute)": [[61, "navlie.lib.imu.IMUState.stamp"]], "state_id (navlie.lib.imu.imustate attribute)": [[61, "navlie.lib.imu.IMUState.state_id"]], "to_list() (navlie.lib.imu.imustate method)": [[61, "navlie.lib.imu.IMUState.to_list"]], "value (navlie.lib.imu.imustate attribute)": [[61, "navlie.lib.imu.IMUState.value"]], "velocity (navlie.lib.imu.imustate property)": [[61, "navlie.lib.imu.IMUState.velocity"]], "l_matrix() (in module navlie.lib.imu)": [[62, "navlie.lib.imu.L_matrix"]], "m_matrix() (in module navlie.lib.imu)": [[63, "navlie.lib.imu.M_matrix"]], "n_matrix() (in module navlie.lib.imu)": [[64, "navlie.lib.imu.N_matrix"]], "u_matrix() (in module navlie.lib.imu)": [[65, "navlie.lib.imu.U_matrix"]], "u_matrix_inv() (in module navlie.lib.imu)": [[66, "navlie.lib.imu.U_matrix_inv"]], "u_tilde_matrix() (in module navlie.lib.imu)": [[67, "navlie.lib.imu.U_tilde_matrix"]], "adjoint_ie3() (in module navlie.lib.imu)": [[68, "navlie.lib.imu.adjoint_IE3"]], "delta_matrix() (in module navlie.lib.imu)": [[69, "navlie.lib.imu.delta_matrix"]], "get_unbiased_imu() (in module navlie.lib.imu)": [[70, "navlie.lib.imu.get_unbiased_imu"]], "inverse_ie3() (in module navlie.lib.imu)": [[71, "navlie.lib.imu.inverse_IE3"]], "navlie.lib.models": [[72, "module-navlie.lib.models"]], "absoluteposition (class in navlie.lib.models)": [[73, "navlie.lib.models.AbsolutePosition"]], "covariance() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.covariance"]], "evaluate() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.absoluteposition method)": [[73, "navlie.lib.models.AbsolutePosition.sqrt_information"]], "absolutevelocity (class in navlie.lib.models)": [[74, "navlie.lib.models.AbsoluteVelocity"]], "covariance() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.covariance"]], "evaluate() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.absolutevelocity method)": [[74, "navlie.lib.models.AbsoluteVelocity.sqrt_information"]], "altitude (class in navlie.lib.models)": [[75, "navlie.lib.models.Altitude"]], "covariance() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.covariance"]], "evaluate() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.jacobian"]], "jacobian_fd() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.jacobian_fd"]], "sqrt_information() (navlie.lib.models.altitude method)": [[75, "navlie.lib.models.Altitude.sqrt_information"]], "bodyframevelocity (class in navlie.lib.models)": [[76, "navlie.lib.models.BodyFrameVelocity"]], "covariance() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.covariance"]], "evaluate() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.bodyframevelocity method)": [[76, "navlie.lib.models.BodyFrameVelocity.sqrt_information"]], "cameraprojection (class in navlie.lib.models)": [[77, "navlie.lib.models.CameraProjection"]], "covariance() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.covariance"]], "evaluate() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.jacobian"]], "jacobian_fd() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.jacobian_fd"]], "sqrt_information() (navlie.lib.models.cameraprojection method)": [[77, "navlie.lib.models.CameraProjection.sqrt_information"]], "doubleintegrator (class in navlie.lib.models)": [[78, "navlie.lib.models.DoubleIntegrator"]], "covariance() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.covariance"]], "evaluate() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.input_covariance"]], "input_jacobian() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.input_jacobian"]], "input_jacobian_fd() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.input_jacobian_fd"]], "jacobian() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.jacobian"]], "jacobian_fd() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.jacobian_fd"]], "sqrt_information() (navlie.lib.models.doubleintegrator method)": [[78, "navlie.lib.models.DoubleIntegrator.sqrt_information"]], "doubleintegratorwithbias (class in navlie.lib.models)": [[79, "navlie.lib.models.DoubleIntegratorWithBias"]], "covariance() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.covariance"]], "evaluate() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.input_covariance"]], "input_jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.input_jacobian"]], "input_jacobian_fd() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.input_jacobian_fd"]], "jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.jacobian"]], "jacobian_fd() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.jacobian_fd"]], "sqrt_information() (navlie.lib.models.doubleintegratorwithbias method)": [[79, "navlie.lib.models.DoubleIntegratorWithBias.sqrt_information"]], "globalposition (class in navlie.lib.models)": [[80, "navlie.lib.models.GlobalPosition"]], "covariance() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.covariance"]], "evaluate() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.jacobian"]], "jacobian_fd() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.globalposition method)": [[80, "navlie.lib.models.GlobalPosition.sqrt_information"]], "gravitometer (class in navlie.lib.models)": [[81, "navlie.lib.models.Gravitometer"]], "covariance() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.covariance"]], "evaluate() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.jacobian"]], "jacobian_fd() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.jacobian_fd"]], "sqrt_information() (navlie.lib.models.gravitometer method)": [[81, "navlie.lib.models.Gravitometer.sqrt_information"]], "invariantmeasurement (class in navlie.lib.models)": [[82, "navlie.lib.models.InvariantMeasurement"]], "minus() (navlie.lib.models.invariantmeasurement method)": [[82, "navlie.lib.models.InvariantMeasurement.minus"]], "model (navlie.lib.models.invariantmeasurement attribute)": [[82, "navlie.lib.models.InvariantMeasurement.model"]], "stamp (navlie.lib.models.invariantmeasurement attribute)": [[82, "navlie.lib.models.InvariantMeasurement.stamp"]], "state_id (navlie.lib.models.invariantmeasurement attribute)": [[82, "navlie.lib.models.InvariantMeasurement.state_id"]], "value (navlie.lib.models.invariantmeasurement attribute)": [[82, "navlie.lib.models.InvariantMeasurement.value"]], "invariantpointrelativeposition (class in navlie.lib.models)": [[83, "navlie.lib.models.InvariantPointRelativePosition"]], "covariance() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.covariance"]], "evaluate() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.invariantpointrelativeposition method)": [[83, "navlie.lib.models.InvariantPointRelativePosition.sqrt_information"]], "linearmeasurement (class in navlie.lib.models)": [[84, "navlie.lib.models.LinearMeasurement"]], "covariance() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.covariance"]], "evaluate() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.jacobian"]], "jacobian_fd() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.jacobian_fd"]], "sqrt_information() (navlie.lib.models.linearmeasurement method)": [[84, "navlie.lib.models.LinearMeasurement.sqrt_information"]], "magnetometer (class in navlie.lib.models)": [[85, "navlie.lib.models.Magnetometer"]], "covariance() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.covariance"]], "evaluate() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.jacobian"]], "jacobian_fd() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.jacobian_fd"]], "sqrt_information() (navlie.lib.models.magnetometer method)": [[85, "navlie.lib.models.Magnetometer.sqrt_information"]], "onedimensionalpositionvelocityrange (class in navlie.lib.models)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange"]], "covariance() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.covariance"]], "evaluate() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.jacobian"]], "jacobian_fd() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.jacobian_fd"]], "sqrt_information() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[86, "navlie.lib.models.OneDimensionalPositionVelocityRange.sqrt_information"]], "pointrelativeposition (class in navlie.lib.models)": [[87, "navlie.lib.models.PointRelativePosition"]], "covariance() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.covariance"]], "evaluate() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.pointrelativeposition method)": [[87, "navlie.lib.models.PointRelativePosition.sqrt_information"]], "pointrelativepositionslam (class in navlie.lib.models)": [[88, "navlie.lib.models.PointRelativePositionSLAM"]], "covariance() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.covariance"]], "evaluate() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.jacobian"]], "jacobian_fd() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.jacobian_fd"]], "sqrt_information() (navlie.lib.models.pointrelativepositionslam method)": [[88, "navlie.lib.models.PointRelativePositionSLAM.sqrt_information"]], "rangepointtoanchor (class in navlie.lib.models)": [[89, "navlie.lib.models.RangePointToAnchor"]], "covariance() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.covariance"]], "evaluate() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.jacobian"]], "jacobian_fd() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangepointtoanchor method)": [[89, "navlie.lib.models.RangePointToAnchor.sqrt_information"]], "rangeposetoanchor (class in navlie.lib.models)": [[90, "navlie.lib.models.RangePoseToAnchor"]], "covariance() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.covariance"]], "evaluate() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.jacobian"]], "jacobian_fd() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangeposetoanchor method)": [[90, "navlie.lib.models.RangePoseToAnchor.sqrt_information"]], "rangeposetopose (class in navlie.lib.models)": [[91, "navlie.lib.models.RangePoseToPose"]], "covariance() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.covariance"]], "evaluate() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.jacobian"]], "jacobian_fd() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangeposetopose method)": [[91, "navlie.lib.models.RangePoseToPose.sqrt_information"]], "rangerelativepose (class in navlie.lib.models)": [[92, "navlie.lib.models.RangeRelativePose"]], "covariance() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.covariance"]], "evaluate() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.jacobian"]], "jacobian_fd() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangerelativepose method)": [[92, "navlie.lib.models.RangeRelativePose.sqrt_information"]], "relativebodyframevelocity (class in navlie.lib.models)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity"]], "covariance() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.covariance"]], "evaluate() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.relativebodyframevelocity method)": [[93, "navlie.lib.models.RelativeBodyFrameVelocity.sqrt_information"]], "singleintegrator (class in navlie.lib.models)": [[94, "navlie.lib.models.SingleIntegrator"]], "covariance() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.covariance"]], "evaluate() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.input_jacobian_fd"]], "jacobian() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.jacobian"]], "jacobian_fd() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.jacobian_fd"]], "sqrt_information() (navlie.lib.models.singleintegrator method)": [[94, "navlie.lib.models.SingleIntegrator.sqrt_information"]], "navlie.lib.preintegration": [[95, "module-navlie.lib.preintegration"]], "angularvelocityincrement (class in navlie.lib.preintegration)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement"]], "copy() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.copy"]], "covariance (navlie.lib.preintegration.angularvelocityincrement attribute)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.covariance"]], "dof (navlie.lib.preintegration.angularvelocityincrement attribute)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.dof"]], "increment() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.increment"]], "new() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.new"]], "plus() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.plus"]], "stamp (navlie.lib.preintegration.angularvelocityincrement property)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.stamp"]], "stamps (navlie.lib.preintegration.angularvelocityincrement attribute)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.stamps"]], "state_id (navlie.lib.preintegration.angularvelocityincrement attribute)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.angularvelocityincrement method)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.update_bias"]], "value (navlie.lib.preintegration.angularvelocityincrement property)": [[96, "navlie.lib.preintegration.AngularVelocityIncrement.value"]], "bodyvelocityincrement (class in navlie.lib.preintegration)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement"]], "copy() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.copy"]], "covariance (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.covariance"]], "dof (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.dof"]], "increment() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.increment"]], "new() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.new"]], "plus() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.plus"]], "stamp (navlie.lib.preintegration.bodyvelocityincrement property)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.stamp"]], "stamps (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.stamps"]], "state_id (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.bodyvelocityincrement method)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.update_bias"]], "value (navlie.lib.preintegration.bodyvelocityincrement property)": [[97, "navlie.lib.preintegration.BodyVelocityIncrement.value"]], "imuincrement (class in navlie.lib.preintegration)": [[98, "navlie.lib.preintegration.IMUIncrement"]], "accel_bias (navlie.lib.preintegration.imuincrement property)": [[98, "navlie.lib.preintegration.IMUIncrement.accel_bias"]], "bias_jacobian (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.bias_jacobian"]], "copy() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.copy"]], "covariance (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.covariance"]], "dof (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.dof"]], "gravity (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.gravity"]], "gyro_bias (navlie.lib.preintegration.imuincrement property)": [[98, "navlie.lib.preintegration.IMUIncrement.gyro_bias"]], "increment() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.increment"]], "input_covariance (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.input_covariance"]], "new() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.new"]], "new_bias (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.new_bias"]], "original_bias (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.original_bias"]], "original_value (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.original_value"]], "plus() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.plus"]], "stamp (navlie.lib.preintegration.imuincrement property)": [[98, "navlie.lib.preintegration.IMUIncrement.stamp"]], "stamps (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.stamps"]], "state_id (navlie.lib.preintegration.imuincrement attribute)": [[98, "navlie.lib.preintegration.IMUIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.imuincrement method)": [[98, "navlie.lib.preintegration.IMUIncrement.update_bias"]], "value (navlie.lib.preintegration.imuincrement property)": [[98, "navlie.lib.preintegration.IMUIncrement.value"]], "linearincrement (class in navlie.lib.preintegration)": [[99, "navlie.lib.preintegration.LinearIncrement"]], "bias_jacobian (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.bias_jacobian"]], "copy() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.copy"]], "covariance (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.covariance"]], "dof (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.dof"]], "increment() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.increment"]], "new() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.new"]], "new_bias (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.new_bias"]], "original_bias (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.original_bias"]], "original_value (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.original_value"]], "plus() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.plus"]], "stamp (navlie.lib.preintegration.linearincrement property)": [[99, "navlie.lib.preintegration.LinearIncrement.stamp"]], "stamps (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.stamps"]], "state_id (navlie.lib.preintegration.linearincrement attribute)": [[99, "navlie.lib.preintegration.LinearIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.linearincrement method)": [[99, "navlie.lib.preintegration.LinearIncrement.update_bias"]], "value (navlie.lib.preintegration.linearincrement property)": [[99, "navlie.lib.preintegration.LinearIncrement.value"]], "preintegratedangularvelocity (class in navlie.lib.preintegration)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity"]], "covariance() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[100, "navlie.lib.preintegration.PreintegratedAngularVelocity.sqrt_information"]], "preintegratedbodyvelocity (class in navlie.lib.preintegration)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity"]], "covariance() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[101, "navlie.lib.preintegration.PreintegratedBodyVelocity.sqrt_information"]], "preintegratedimukinematics (class in navlie.lib.preintegration)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics"]], "covariance() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedimukinematics method)": [[102, "navlie.lib.preintegration.PreintegratedIMUKinematics.sqrt_information"]], "preintegratedlinearmodel (class in navlie.lib.preintegration)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel"]], "covariance() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[103, "navlie.lib.preintegration.PreintegratedLinearModel.sqrt_information"]], "preintegratedwheelodometry (class in navlie.lib.preintegration)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry"]], "covariance() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[104, "navlie.lib.preintegration.PreintegratedWheelOdometry.sqrt_information"]], "relativemotionincrement (class in navlie.lib.preintegration)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement"]], "copy() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.copy"]], "covariance (navlie.lib.preintegration.relativemotionincrement attribute)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.covariance"]], "dof (navlie.lib.preintegration.relativemotionincrement attribute)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.dof"]], "increment() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.increment"]], "new() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.new"]], "plus() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.plus"]], "stamp (navlie.lib.preintegration.relativemotionincrement property)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.stamp"]], "stamps (navlie.lib.preintegration.relativemotionincrement attribute)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.stamps"]], "state_id (navlie.lib.preintegration.relativemotionincrement attribute)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.relativemotionincrement method)": [[105, "navlie.lib.preintegration.RelativeMotionIncrement.update_bias"]], "wheelodometryincrement (class in navlie.lib.preintegration)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement"]], "copy() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.copy"]], "covariance (navlie.lib.preintegration.wheelodometryincrement attribute)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.covariance"]], "dof (navlie.lib.preintegration.wheelodometryincrement attribute)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.dof"]], "increment() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.increment"]], "new() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.new"]], "original_value (navlie.lib.preintegration.wheelodometryincrement attribute)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.original_value"]], "plus() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.plus"]], "stamp (navlie.lib.preintegration.wheelodometryincrement property)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.stamp"]], "stamps (navlie.lib.preintegration.wheelodometryincrement attribute)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.stamps"]], "state_id (navlie.lib.preintegration.wheelodometryincrement attribute)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.wheelodometryincrement method)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.update_bias"]], "value (navlie.lib.preintegration.wheelodometryincrement property)": [[106, "navlie.lib.preintegration.WheelOdometryIncrement.value"]], "navlie.lib.states": [[107, "module-navlie.lib.states"]], "matrixliegroupstate (class in navlie.lib.states)": [[108, "navlie.lib.states.MatrixLieGroupState"]], "attitude (navlie.lib.states.matrixliegroupstate property)": [[108, "navlie.lib.states.MatrixLieGroupState.attitude"]], "copy() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.copy"]], "direction (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.direction"]], "dof (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.dof"]], "dot() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.dot"]], "group (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.group"]], "jacobian_from_blocks() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.jacobian_from_blocks"]], "minus() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.minus"]], "minus_jacobian() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.minus_jacobian_fd"]], "plus() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.plus"]], "plus_jacobian() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.matrixliegroupstate method)": [[108, "navlie.lib.states.MatrixLieGroupState.plus_jacobian_fd"]], "position (navlie.lib.states.matrixliegroupstate property)": [[108, "navlie.lib.states.MatrixLieGroupState.position"]], "stamp (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.stamp"]], "state_id (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.state_id"]], "value (navlie.lib.states.matrixliegroupstate attribute)": [[108, "navlie.lib.states.MatrixLieGroupState.value"]], "velocity (navlie.lib.states.matrixliegroupstate property)": [[108, "navlie.lib.states.MatrixLieGroupState.velocity"]], "mixturestate (class in navlie.lib.states)": [[109, "navlie.lib.states.MixtureState"]], "copy() (navlie.lib.states.mixturestate method)": [[109, "navlie.lib.states.MixtureState.copy"]], "model_probabilities (navlie.lib.states.mixturestate attribute)": [[109, "navlie.lib.states.MixtureState.model_probabilities"]], "model_states (navlie.lib.states.mixturestate attribute)": [[109, "navlie.lib.states.MixtureState.model_states"]], "stamp (navlie.lib.states.mixturestate property)": [[109, "navlie.lib.states.MixtureState.stamp"]], "se23state (class in navlie.lib.states)": [[110, "navlie.lib.states.SE23State"]], "attitude (navlie.lib.states.se23state property)": [[110, "navlie.lib.states.SE23State.attitude"]], "copy() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.copy"]], "direction (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.direction"]], "dof (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.dof"]], "dot() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.dot"]], "group (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.group"]], "jacobian_from_blocks() (navlie.lib.states.se23state static method)": [[110, "navlie.lib.states.SE23State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.minus"]], "minus_jacobian() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.plus"]], "plus_jacobian() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se23state method)": [[110, "navlie.lib.states.SE23State.plus_jacobian_fd"]], "pose (navlie.lib.states.se23state property)": [[110, "navlie.lib.states.SE23State.pose"]], "position (navlie.lib.states.se23state property)": [[110, "navlie.lib.states.SE23State.position"]], "random() (navlie.lib.states.se23state static method)": [[110, "navlie.lib.states.SE23State.random"]], "stamp (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.stamp"]], "state_id (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.state_id"]], "value (navlie.lib.states.se23state attribute)": [[110, "navlie.lib.states.SE23State.value"]], "velocity (navlie.lib.states.se23state property)": [[110, "navlie.lib.states.SE23State.velocity"]], "se2state (class in navlie.lib.states)": [[111, "navlie.lib.states.SE2State"]], "attitude (navlie.lib.states.se2state property)": [[111, "navlie.lib.states.SE2State.attitude"]], "copy() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.copy"]], "direction (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.direction"]], "dof (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.dof"]], "dot() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.dot"]], "group (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.group"]], "jacobian_from_blocks() (navlie.lib.states.se2state static method)": [[111, "navlie.lib.states.SE2State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.minus"]], "minus_jacobian() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.plus"]], "plus_jacobian() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se2state method)": [[111, "navlie.lib.states.SE2State.plus_jacobian_fd"]], "pose (navlie.lib.states.se2state property)": [[111, "navlie.lib.states.SE2State.pose"]], "position (navlie.lib.states.se2state property)": [[111, "navlie.lib.states.SE2State.position"]], "random() (navlie.lib.states.se2state static method)": [[111, "navlie.lib.states.SE2State.random"]], "stamp (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.stamp"]], "state_id (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.state_id"]], "value (navlie.lib.states.se2state attribute)": [[111, "navlie.lib.states.SE2State.value"]], "velocity (navlie.lib.states.se2state property)": [[111, "navlie.lib.states.SE2State.velocity"]], "se3state (class in navlie.lib.states)": [[112, "navlie.lib.states.SE3State"]], "attitude (navlie.lib.states.se3state property)": [[112, "navlie.lib.states.SE3State.attitude"]], "copy() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.copy"]], "direction (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.direction"]], "dof (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.dof"]], "dot() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.dot"]], "from_ros() (navlie.lib.states.se3state static method)": [[112, "navlie.lib.states.SE3State.from_ros"]], "group (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.group"]], "jacobian_from_blocks() (navlie.lib.states.se3state static method)": [[112, "navlie.lib.states.SE3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.minus"]], "minus_jacobian() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.plus"]], "plus_jacobian() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.plus_jacobian_fd"]], "position (navlie.lib.states.se3state property)": [[112, "navlie.lib.states.SE3State.position"]], "random() (navlie.lib.states.se3state static method)": [[112, "navlie.lib.states.SE3State.random"]], "stamp (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.stamp"]], "state_id (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.state_id"]], "to_ros() (navlie.lib.states.se3state method)": [[112, "navlie.lib.states.SE3State.to_ros"]], "value (navlie.lib.states.se3state attribute)": [[112, "navlie.lib.states.SE3State.value"]], "velocity (navlie.lib.states.se3state property)": [[112, "navlie.lib.states.SE3State.velocity"]], "sl3state (class in navlie.lib.states)": [[113, "navlie.lib.states.SL3State"]], "attitude (navlie.lib.states.sl3state property)": [[113, "navlie.lib.states.SL3State.attitude"]], "copy() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.copy"]], "direction (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.direction"]], "dof (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.dof"]], "dot() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.dot"]], "group (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.group"]], "jacobian_from_blocks() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.minus"]], "minus_jacobian() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.plus"]], "plus_jacobian() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.sl3state method)": [[113, "navlie.lib.states.SL3State.plus_jacobian_fd"]], "position (navlie.lib.states.sl3state property)": [[113, "navlie.lib.states.SL3State.position"]], "stamp (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.stamp"]], "state_id (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.state_id"]], "value (navlie.lib.states.sl3state attribute)": [[113, "navlie.lib.states.SL3State.value"]], "velocity (navlie.lib.states.sl3state property)": [[113, "navlie.lib.states.SL3State.velocity"]], "so2state (class in navlie.lib.states)": [[114, "navlie.lib.states.SO2State"]], "attitude (navlie.lib.states.so2state property)": [[114, "navlie.lib.states.SO2State.attitude"]], "copy() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.copy"]], "direction (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.direction"]], "dof (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.dof"]], "dot() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.dot"]], "group (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.group"]], "jacobian_from_blocks() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.jacobian_from_blocks"]], "minus() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.minus"]], "minus_jacobian() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.minus_jacobian_fd"]], "plus() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.plus"]], "plus_jacobian() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.so2state method)": [[114, "navlie.lib.states.SO2State.plus_jacobian_fd"]], "position (navlie.lib.states.so2state property)": [[114, "navlie.lib.states.SO2State.position"]], "random() (navlie.lib.states.so2state static method)": [[114, "navlie.lib.states.SO2State.random"]], "stamp (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.stamp"]], "state_id (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.state_id"]], "value (navlie.lib.states.so2state attribute)": [[114, "navlie.lib.states.SO2State.value"]], "velocity (navlie.lib.states.so2state property)": [[114, "navlie.lib.states.SO2State.velocity"]], "so3state (class in navlie.lib.states)": [[115, "navlie.lib.states.SO3State"]], "attitude (navlie.lib.states.so3state property)": [[115, "navlie.lib.states.SO3State.attitude"]], "copy() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.copy"]], "direction (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.direction"]], "dof (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.dof"]], "dot() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.dot"]], "from_ros() (navlie.lib.states.so3state static method)": [[115, "navlie.lib.states.SO3State.from_ros"]], "group (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.group"]], "jacobian_from_blocks() (navlie.lib.states.so3state static method)": [[115, "navlie.lib.states.SO3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.minus"]], "minus_jacobian() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.plus"]], "plus_jacobian() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.plus_jacobian_fd"]], "position (navlie.lib.states.so3state property)": [[115, "navlie.lib.states.SO3State.position"]], "random() (navlie.lib.states.so3state static method)": [[115, "navlie.lib.states.SO3State.random"]], "stamp (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.stamp"]], "state_id (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.state_id"]], "to_ros() (navlie.lib.states.so3state method)": [[115, "navlie.lib.states.SO3State.to_ros"]], "value (navlie.lib.states.so3state attribute)": [[115, "navlie.lib.states.SO3State.value"]], "velocity (navlie.lib.states.so3state property)": [[115, "navlie.lib.states.SO3State.velocity"]], "stampedvalue (class in navlie.lib.states)": [[116, "navlie.lib.states.StampedValue"]], "copy() (navlie.lib.states.stampedvalue method)": [[116, "navlie.lib.states.StampedValue.copy"]], "covariance (navlie.lib.states.stampedvalue attribute)": [[116, "navlie.lib.states.StampedValue.covariance"]], "dof (navlie.lib.states.stampedvalue attribute)": [[116, "navlie.lib.states.StampedValue.dof"]], "plus() (navlie.lib.states.stampedvalue method)": [[116, "navlie.lib.states.StampedValue.plus"]], "stamp (navlie.lib.states.stampedvalue attribute)": [[116, "navlie.lib.states.StampedValue.stamp"]], "state_id (navlie.lib.states.stampedvalue attribute)": [[116, "navlie.lib.states.StampedValue.state_id"]], "value (navlie.lib.states.stampedvalue attribute)": [[116, "navlie.lib.states.StampedValue.value"]], "vectorinput (class in navlie.lib.states)": [[117, "navlie.lib.states.VectorInput"]], "copy() (navlie.lib.states.vectorinput method)": [[117, "navlie.lib.states.VectorInput.copy"]], "covariance (navlie.lib.states.vectorinput attribute)": [[117, "navlie.lib.states.VectorInput.covariance"]], "dof (navlie.lib.states.vectorinput attribute)": [[117, "navlie.lib.states.VectorInput.dof"]], "plus() (navlie.lib.states.vectorinput method)": [[117, "navlie.lib.states.VectorInput.plus"]], "stamp (navlie.lib.states.vectorinput attribute)": [[117, "navlie.lib.states.VectorInput.stamp"]], "state_id (navlie.lib.states.vectorinput attribute)": [[117, "navlie.lib.states.VectorInput.state_id"]], "value (navlie.lib.states.vectorinput attribute)": [[117, "navlie.lib.states.VectorInput.value"]], "vectorstate (class in navlie.lib.states)": [[118, "navlie.lib.states.VectorState"]], "copy() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.copy"]], "dof (navlie.lib.states.vectorstate attribute)": [[118, "navlie.lib.states.VectorState.dof"]], "minus() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.minus"]], "minus_jacobian() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.minus_jacobian_fd"]], "plus() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.plus"]], "plus_jacobian() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.vectorstate method)": [[118, "navlie.lib.states.VectorState.plus_jacobian_fd"]], "stamp (navlie.lib.states.vectorstate attribute)": [[118, "navlie.lib.states.VectorState.stamp"]], "state_id (navlie.lib.states.vectorstate attribute)": [[118, "navlie.lib.states.VectorState.state_id"]], "value (navlie.lib.states.vectorstate attribute)": [[118, "navlie.lib.states.VectorState.value"]], "navlie.types": [[119, "module-navlie.types"]], "dataset (class in navlie.types)": [[120, "navlie.types.Dataset"]], "get_ground_truth() (navlie.types.dataset method)": [[120, "navlie.types.Dataset.get_ground_truth"]], "get_input_data() (navlie.types.dataset method)": [[120, "navlie.types.Dataset.get_input_data"]], "get_measurement_data() (navlie.types.dataset method)": [[120, "navlie.types.Dataset.get_measurement_data"]], "input (class in navlie.types)": [[121, "navlie.types.Input"]], "copy() (navlie.types.input method)": [[121, "navlie.types.Input.copy"]], "covariance (navlie.types.input attribute)": [[121, "navlie.types.Input.covariance"]], "dof (navlie.types.input attribute)": [[121, "navlie.types.Input.dof"]], "plus() (navlie.types.input method)": [[121, "navlie.types.Input.plus"]], "stamp (navlie.types.input attribute)": [[121, "navlie.types.Input.stamp"]], "state_id (navlie.types.input attribute)": [[121, "navlie.types.Input.state_id"]], "measurement (class in navlie.types)": [[122, "navlie.types.Measurement"]], "minus() (navlie.types.measurement method)": [[122, "navlie.types.Measurement.minus"]], "model (navlie.types.measurement attribute)": [[122, "navlie.types.Measurement.model"]], "stamp (navlie.types.measurement attribute)": [[122, "navlie.types.Measurement.stamp"]], "state_id (navlie.types.measurement attribute)": [[122, "navlie.types.Measurement.state_id"]], "value (navlie.types.measurement attribute)": [[122, "navlie.types.Measurement.value"]], "measurementmodel (class in navlie.types)": [[123, "navlie.types.MeasurementModel"]], "covariance() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.covariance"]], "evaluate() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.evaluate"]], "evaluate_with_jacobian() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.evaluate_with_jacobian"]], "jacobian() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.jacobian"]], "jacobian_fd() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.jacobian_fd"]], "sqrt_information() (navlie.types.measurementmodel method)": [[123, "navlie.types.MeasurementModel.sqrt_information"]], "processmodel (class in navlie.types)": [[124, "navlie.types.ProcessModel"]], "covariance() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.covariance"]], "evaluate() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.evaluate"]], "evaluate_with_jacobian() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.evaluate_with_jacobian"]], "input_covariance() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.input_covariance"]], "input_jacobian_fd() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.input_jacobian_fd"]], "jacobian() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.jacobian"]], "jacobian_fd() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.jacobian_fd"]], "sqrt_information() (navlie.types.processmodel method)": [[124, "navlie.types.ProcessModel.sqrt_information"]], "state (class in navlie.types)": [[125, "navlie.types.State"]], "copy() (navlie.types.state method)": [[125, "navlie.types.State.copy"]], "dof (navlie.types.state attribute)": [[125, "navlie.types.State.dof"]], "minus() (navlie.types.state method)": [[125, "navlie.types.State.minus"]], "minus_jacobian() (navlie.types.state method)": [[125, "navlie.types.State.minus_jacobian"]], "minus_jacobian_fd() (navlie.types.state method)": [[125, "navlie.types.State.minus_jacobian_fd"]], "plus() (navlie.types.state method)": [[125, "navlie.types.State.plus"]], "plus_jacobian() (navlie.types.state method)": [[125, "navlie.types.State.plus_jacobian"]], "plus_jacobian_fd() (navlie.types.state method)": [[125, "navlie.types.State.plus_jacobian_fd"]], "stamp (navlie.types.state attribute)": [[125, "navlie.types.State.stamp"]], "state_id (navlie.types.state attribute)": [[125, "navlie.types.State.state_id"]], "value (navlie.types.state attribute)": [[125, "navlie.types.State.value"]], "statewithcovariance (class in navlie.types)": [[126, "navlie.types.StateWithCovariance"]], "copy() (navlie.types.statewithcovariance method)": [[126, "navlie.types.StateWithCovariance.copy"]], "covariance (navlie.types.statewithcovariance attribute)": [[126, "navlie.types.StateWithCovariance.covariance"]], "stamp (navlie.types.statewithcovariance property)": [[126, "navlie.types.StateWithCovariance.stamp"]], "state (navlie.types.statewithcovariance attribute)": [[126, "navlie.types.StateWithCovariance.state"]], "symmetrize() (navlie.types.statewithcovariance method)": [[126, "navlie.types.StateWithCovariance.symmetrize"]], "navlie.utils": [[127, "module-navlie.utils"]], "navlie.utils.alignment": [[128, "module-navlie.utils.alignment"]], "associate_and_align_trajectories() (in module navlie.utils.alignment)": [[129, "navlie.utils.alignment.associate_and_align_trajectories"]], "evo_traj_to_state_list() (in module navlie.utils.alignment)": [[130, "navlie.utils.alignment.evo_traj_to_state_list"]], "state_list_to_evo_traj() (in module navlie.utils.alignment)": [[131, "navlie.utils.alignment.state_list_to_evo_traj"]], "navlie.utils.common": [[132, "module-navlie.utils.common"]], "gaussianresult (class in navlie.utils.common)": [[133, "navlie.utils.common.GaussianResult"]], "covariance (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.covariance"]], "ees (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.ees"]], "error (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.error"]], "md (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.md"]], "nees (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.nees"]], "rmse (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.rmse"]], "stamp (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.stamp"]], "state (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.state"]], "state_true (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.state_true"]], "three_sigma (navlie.utils.common.gaussianresult attribute)": [[133, "navlie.utils.common.GaussianResult.three_sigma"]], "gaussianresultlist (class in navlie.utils.common)": [[134, "navlie.utils.common.GaussianResultList"]], "covariance (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.covariance"]], "dof (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.dof"]], "ees (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.ees"]], "error (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.error"]], "from_estimates() (navlie.utils.common.gaussianresultlist static method)": [[134, "navlie.utils.common.GaussianResultList.from_estimates"]], "md (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.md"]], "nees (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.nees"]], "nees_lower_bound() (navlie.utils.common.gaussianresultlist method)": [[134, "navlie.utils.common.GaussianResultList.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.gaussianresultlist method)": [[134, "navlie.utils.common.GaussianResultList.nees_upper_bound"]], "rmse (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.rmse"]], "stamp (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.stamp"]], "state (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.state"]], "state_true (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.state_true"]], "three_sigma (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.three_sigma"]], "value (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.value"]], "value_true (navlie.utils.common.gaussianresultlist attribute)": [[134, "navlie.utils.common.GaussianResultList.value_true"]], "mixtureresult (class in navlie.utils.common)": [[135, "navlie.utils.common.MixtureResult"]], "covariance (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.covariance"]], "ees (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.ees"]], "error (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.error"]], "md (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.md"]], "model_probabilities (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.model_probabilities"]], "nees (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.nees"]], "rmse (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.rmse"]], "stamp (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.stamp"]], "state (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.state"]], "state_true (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.state_true"]], "three_sigma (navlie.utils.common.mixtureresult attribute)": [[135, "navlie.utils.common.MixtureResult.three_sigma"]], "mixtureresultlist (class in navlie.utils.common)": [[136, "navlie.utils.common.MixtureResultList"]], "covariance (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.covariance"]], "dof (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.dof"]], "ees (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.ees"]], "error (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.error"]], "from_estimates() (navlie.utils.common.mixtureresultlist static method)": [[136, "navlie.utils.common.MixtureResultList.from_estimates"]], "md (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.md"]], "model_probabilities (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.model_probabilities"]], "nees (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.nees"]], "nees_lower_bound() (navlie.utils.common.mixtureresultlist method)": [[136, "navlie.utils.common.MixtureResultList.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.mixtureresultlist method)": [[136, "navlie.utils.common.MixtureResultList.nees_upper_bound"]], "rmse (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.rmse"]], "stamp (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.stamp"]], "state (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.state"]], "state_true (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.state_true"]], "three_sigma (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.three_sigma"]], "value (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.value"]], "value_true (navlie.utils.common.mixtureresultlist attribute)": [[136, "navlie.utils.common.MixtureResultList.value_true"]], "montecarloresult (class in navlie.utils.common)": [[137, "navlie.utils.common.MonteCarloResult"]], "average_ees (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.average_ees"]], "average_nees (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.average_nees"]], "dof (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.dof"]], "expected_nees (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.expected_nees"]], "nees_lower_bound() (navlie.utils.common.montecarloresult method)": [[137, "navlie.utils.common.MonteCarloResult.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.montecarloresult method)": [[137, "navlie.utils.common.MonteCarloResult.nees_upper_bound"]], "num_trials (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.num_trials"]], "rmse (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.rmse"]], "stamp (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.stamp"]], "total_rmse (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.total_rmse"]], "trial_results (navlie.utils.common.montecarloresult attribute)": [[137, "navlie.utils.common.MonteCarloResult.trial_results"]], "associate_stamps() (in module navlie.utils.common)": [[138, "navlie.utils.common.associate_stamps"]], "find_nearest_stamp_idx() (in module navlie.utils.common)": [[139, "navlie.utils.common.find_nearest_stamp_idx"]], "jacobian() (in module navlie.utils.common)": [[140, "navlie.utils.common.jacobian"]], "load_tum_trajectory() (in module navlie.utils.common)": [[141, "navlie.utils.common.load_tum_trajectory"]], "monte_carlo() (in module navlie.utils.common)": [[142, "navlie.utils.common.monte_carlo"]], "randvec() (in module navlie.utils.common)": [[143, "navlie.utils.common.randvec"]], "schedule_sequential_measurements() (in module navlie.utils.common)": [[144, "navlie.utils.common.schedule_sequential_measurements"]], "state_interp() (in module navlie.utils.common)": [[145, "navlie.utils.common.state_interp"]], "van_loans() (in module navlie.utils.common)": [[146, "navlie.utils.common.van_loans"]], "navlie.utils.mixture": [[147, "module-navlie.utils.mixture"]], "gaussian_mixing() (in module navlie.utils.mixture)": [[148, "navlie.utils.mixture.gaussian_mixing"]], "gaussian_mixing_vectorspace() (in module navlie.utils.mixture)": [[149, "navlie.utils.mixture.gaussian_mixing_vectorspace"]], "reparametrize_gaussians_about_x_par() (in module navlie.utils.mixture)": [[150, "navlie.utils.mixture.reparametrize_gaussians_about_X_par"]], "update_x() (in module navlie.utils.mixture)": [[151, "navlie.utils.mixture.update_X"]], "navlie.utils.plot": [[152, "module-navlie.utils.plot"]], "cameraposevisualizer (class in navlie.utils.plot)": [[153, "navlie.utils.plot.CameraPoseVisualizer"]], "plot_pose() (navlie.utils.plot.cameraposevisualizer method)": [[153, "navlie.utils.plot.CameraPoseVisualizer.plot_pose"]], "plot_camera_poses() (in module navlie.utils.plot)": [[154, "navlie.utils.plot.plot_camera_poses"]], "plot_error() (in module navlie.utils.plot)": [[155, "navlie.utils.plot.plot_error"]], "plot_meas() (in module navlie.utils.plot)": [[156, "navlie.utils.plot.plot_meas"]], "plot_meas_by_model() (in module navlie.utils.plot)": [[157, "navlie.utils.plot.plot_meas_by_model"]], "plot_nees() (in module navlie.utils.plot)": [[158, "navlie.utils.plot.plot_nees"]], "plot_poses() (in module navlie.utils.plot)": [[159, "navlie.utils.plot.plot_poses"]], "set_axes_equal() (in module navlie.utils.plot)": [[160, "navlie.utils.plot.set_axes_equal"]]}})